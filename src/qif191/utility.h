///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once
#include "QIFDocument/QIFDocument.h"
#include <memory>

namespace qif191
{
// Returns the 3 doubles associated with the given point.
QIF191_EXPORT void GetPointValues(qif191::t::CPointSimpleTypeType* pt, double& x, double& y, double& z);

// Sets the value of the given point to the value of the given 3 doubles.
QIF191_EXPORT void SetPointValues(qif191::t::CPointSimpleTypeType& pt, double x, double y, double z);

// Returns the 3 doubles associated with the given unit vector.
QIF191_EXPORT void GetUnitVectorValues(qif191::t::CUnitVectorSimpleTypeType* vec, double& x, double& y, double& z);

// Sets the value of the given unit vector to the value of the given 3 doubles.
QIF191_EXPORT void SetUnitVectorValues(qif191::t::CUnitVectorSimpleTypeType& vec, double x, double y, double z);

// Returns the 3xN doubles associated with the given polyline.
QIF191_EXPORT void GetPolyLineValues(qif191::t::CPolyLineType* p, std::vector<double>& pointList);

// Takes in the given DOMNode and casts it to a CSensorType, if it is of one of the derived types.
// The list of derived types is defined as the items between _altova_mi_t_altova_CSensorsType_altova_Sensor
// and _altova_mil_t_altova_CSensorsType
QIF191_EXPORT std::unique_ptr<qif191::t::CSensorType> CastToSensor(xercesc::DOMNode* node);
}
