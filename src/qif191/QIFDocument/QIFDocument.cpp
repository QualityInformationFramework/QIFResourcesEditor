////////////////////////////////////////////////////////////////////////
//
// QIFDocument.cpp
//
// Â© Capvidia, 2020
//
// This file was generated by XMLSpy 2015r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION. -- NOTE DC 4/13/15: We can edit these files. Just make sure to merge if we regenerate.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include <string>
#include "QIFDocument.h"
#include <algorithm>

#include <xercesc/dom/DOMElement.hpp>

#include <qifbase/AltovaXML/XercesString.h>




// turn off warning: "this" used in base initializer list
#pragma warning(disable:4355)


namespace qif191
{


xercesc::DOMNode* TypeBase::GetElementNth(const altova::MemberInfo* member, unsigned index)
{
    for(XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
    {
        if(index-- == 0)
            return *it;
    }
    return 0;
}

xercesc::DOMNode* TypeBase::GetElementLast(const altova::MemberInfo* member)
{
    xercesc::DOMNode* p;
    for(XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
    {
        p = *it;
    }
    return p;
}

unsigned TypeBase::CountElement(const altova::MemberInfo* member)
{
    unsigned count = 0;
    for(XercesTreeOperations::MemberIterator it = XercesTreeOperations::GetElements(m_node, member); it; ++it)
    {
        ++count;
    }
    return count;
}

void TypeBase::RemoveElement(const altova::MemberInfo* member)
{
    XercesTreeOperations::RemoveElements(m_node, member);
}

int TypeBase::GetEnumerationIndex(const string_type sValue, const unsigned enumOffset, const unsigned enumCount)
{
    unsigned enumIndex = enumOffset;

    while(enumIndex < (enumOffset + enumCount))
    {
        const FacetInfo* facet = GetTableEntry(facets, enumIndex);

        if(facet->StringValue == sValue)
            return enumIndex - enumOffset;
        enumIndex++;
    }
    return -1; //Invalid
}

string_type TypeBase::GetEnumerationValue(const int index, const unsigned enumOffset, const unsigned enumCount)
{
    unsigned enumIndex = enumOffset + index;

    if(enumIndex >= enumOffset && enumIndex < (enumOffset + enumCount))
    {
        const FacetInfo* facet = GetTableEntry(facets, enumIndex);
        return facet->StringValue;
    }
    else
        throw altova::ConversionException(_T("Enumeration index out of range."));
}


namespace t
{

CActionBaseType::CActionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPlanElementBaseType(node)
    , PreferredActionMethodId(*this)	// "PreferredActionMethodId"
    , AlternativeActionMethodIds(*this)	// "AlternativeActionMethodIds"
    , PreferredResourceIds(*this)	// "PreferredResourceIds"
{
}

CActionBaseType::CActionBaseType(CActionBaseType const& other)
    : ::qif191::t::CPlanElementBaseType(other.GetNode())
    , PreferredActionMethodId(*this)	// "PreferredActionMethodId"
    , AlternativeActionMethodIds(*this)	// "AlternativeActionMethodIds"
    , PreferredResourceIds(*this)	// "PreferredResourceIds"
{
}

void CActionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActionGroupBaseType::CActionGroupBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPlanElementBaseType(node)
    , MeasureActionGroupFunction(*this)	// "MeasureActionGroupFunction"
{
}

CActionGroupBaseType::CActionGroupBaseType(CActionGroupBaseType const& other)
    : ::qif191::t::CPlanElementBaseType(other.GetNode())
    , MeasureActionGroupFunction(*this)	// "MeasureActionGroupFunction"
{
}

void CActionGroupBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActionGroupBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActionMethodBaseType::CActionMethodBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , ChosenResourceIds(*this)	// "ChosenResourceIds"
    , WorkInstructionIds(*this)	// "WorkInstructionIds"
{
}

CActionMethodBaseType::CActionMethodBaseType(CActionMethodBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , ChosenResourceIds(*this)	// "ChosenResourceIds"
    , WorkInstructionIds(*this)	// "WorkInstructionIds"
{
}

void CActionMethodBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActionMethodBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActionMethodsType::CActionMethodsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ActionMethod(*this)	// "ActionMethod"
    , CoordinateMeasureFeatureMethod(*this)	// "CoordinateMeasureFeatureMethod"
    , GageMeasureFeatureMethod(*this)	// "GageMeasureFeatureMethod"
    , ManualMeasureFeatureMethod(*this)	// "ManualMeasureFeatureMethod"
    , OtherMeasureFeatureMethod(*this)	// "OtherMeasureFeatureMethod"
{
}

CActionMethodsType::CActionMethodsType(CActionMethodsType const& other)
    : TypeBase(other.GetNode())
    , ActionMethod(*this)	// "ActionMethod"
    , CoordinateMeasureFeatureMethod(*this)	// "CoordinateMeasureFeatureMethod"
    , GageMeasureFeatureMethod(*this)	// "GageMeasureFeatureMethod"
    , ManualMeasureFeatureMethod(*this)	// "ManualMeasureFeatureMethod"
    , OtherMeasureFeatureMethod(*this)	// "OtherMeasureFeatureMethod"
{
}

void CActionMethodsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActionMethodsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActionToTakeEnumType::CActionToTakeEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CActionToTakeEnumType::CActionToTakeEnumType(CActionToTakeEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CActualAngularValueType::CActualAngularValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CActualAngularValueType::CActualAngularValueType(CActualAngularValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CActualAngularValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualAngularValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualAreaValueType::CActualAreaValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , areaUnit(*this)	// "@areaUnit"
{
}

CActualAreaValueType::CActualAreaValueType(CActualAreaValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , areaUnit(*this)	// "@areaUnit"
{
}

void CActualAreaValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualAreaValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualAxisType::CActualAxisType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AxisPoint(*this)	// "AxisPoint"
    , Direction(*this)	// "Direction"
{
}

CActualAxisType::CActualAxisType(CActualAxisType const& other)
    : TypeBase(other.GetNode())
    , AxisPoint(*this)	// "AxisPoint"
    , Direction(*this)	// "Direction"
{
}

void CActualAxisType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualAxisType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualComponentSetType::CActualComponentSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , ActualComponent(*this)	// "ActualComponent"
{
}

CActualComponentSetType::CActualComponentSetType(CActualComponentSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , ActualComponent(*this)	// "ActualComponent"
{
}

void CActualComponentSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualComponentSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualComponentType::CActualComponentType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , SerialNumber(*this)	// "SerialNumber"
    , AdditionalChanges(*this)	// "AdditionalChanges"
    , Status(*this)	// "Status"
    , Traceability(*this)	// "Traceability"
    , AsmPathId(*this)	// "AsmPathId"
{
}

CActualComponentType::CActualComponentType(CActualComponentType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , SerialNumber(*this)	// "SerialNumber"
    , AdditionalChanges(*this)	// "AdditionalChanges"
    , Status(*this)	// "Status"
    , Traceability(*this)	// "Traceability"
    , AsmPathId(*this)	// "AsmPathId"
{
}

void CActualComponentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualComponentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualDatumFeatureType::CActualDatumFeatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumFeatureBaseType(node)
    , MaterialModifier(*this)	// "MaterialModifier"
{
}

CActualDatumFeatureType::CActualDatumFeatureType(CActualDatumFeatureType const& other)
    : ::qif191::t::CDatumFeatureBaseType(other.GetNode())
    , MaterialModifier(*this)	// "MaterialModifier"
{
}

void CActualDatumFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualDatumFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualDecimalType::CActualDecimalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
{
}

CActualDecimalType::CActualDecimalType(CActualDecimalType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
{
}

void CActualDecimalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualDecimalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualEndRadiusType::CActualEndRadiusType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , EndRadius(*this)	// "EndRadius"
    , Expanded(*this)	// "Expanded"
{
}

CActualEndRadiusType::CActualEndRadiusType(CActualEndRadiusType const& other)
    : TypeBase(other.GetNode())
    , EndRadius(*this)	// "EndRadius"
    , Expanded(*this)	// "Expanded"
{
}

void CActualEndRadiusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualEndRadiusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualForceValueType::CActualForceValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , forceUnit(*this)	// "@forceUnit"
{
}

CActualForceValueType::CActualForceValueType(CActualForceValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , forceUnit(*this)	// "@forceUnit"
{
}

void CActualForceValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualForceValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualLinearValueType::CActualLinearValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , linearUnit(*this)	// "@linearUnit"
{
}

CActualLinearValueType::CActualLinearValueType(CActualLinearValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
{
}

void CActualLinearValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualLinearValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualMassValueType::CActualMassValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , massUnit(*this)	// "@massUnit"
{
}

CActualMassValueType::CActualMassValueType(CActualMassValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , massUnit(*this)	// "@massUnit"
{
}

void CActualMassValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualMassValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualOffsetAlignmentOperationType::CActualOffsetAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , Origin(*this)	// "Origin"
{
}

CActualOffsetAlignmentOperationType::CActualOffsetAlignmentOperationType(CActualOffsetAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , Origin(*this)	// "Origin"
{
}

void CActualOffsetAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualOffsetAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualOriginOffsetType::CActualOriginOffsetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , OriginEntity(*this)	// "OriginEntity"
    , OriginDirection(*this)	// "OriginDirection"
{
}

CActualOriginOffsetType::CActualOriginOffsetType(CActualOriginOffsetType const& other)
    : TypeBase(other.GetNode())
    , OriginEntity(*this)	// "OriginEntity"
    , OriginDirection(*this)	// "OriginDirection"
{
}

void CActualOriginOffsetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualOriginOffsetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualPlaneType::CActualPlaneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

CActualPlaneType::CActualPlaneType(CActualPlaneType const& other)
    : TypeBase(other.GetNode())
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

void CActualPlaneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualPlaneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualPointAndVectorType::CActualPointAndVectorType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StartPoint(*this)	// "StartPoint"
    , Vector(*this)	// "Vector"
{
}

CActualPointAndVectorType::CActualPointAndVectorType(CActualPointAndVectorType const& other)
    : TypeBase(other.GetNode())
    , StartPoint(*this)	// "StartPoint"
    , Vector(*this)	// "Vector"
{
}

void CActualPointAndVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualPointAndVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualPointType::CActualPointType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPointType(node)
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
{
}

CActualPointType::CActualPointType(CActualPointType const& other)
    : ::qif191::t::CPointType(other.GetNode())
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
{
}

void CActualPointType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualPointType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualPointWithNormalBaseType::CActualPointWithNormalBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

CActualPointWithNormalBaseType::CActualPointWithNormalBaseType(CActualPointWithNormalBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

void CActualPointWithNormalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualPointWithNormalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualPressureValueType::CActualPressureValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , pressureUnit(*this)	// "@pressureUnit"
{
}

CActualPressureValueType::CActualPressureValueType(CActualPressureValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , pressureUnit(*this)	// "@pressureUnit"
{
}

void CActualPressureValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualPressureValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualProductTraceabilityType::CActualProductTraceabilityType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SampleNumber(*this)	// "SampleNumber"
    , LotNumber(*this)	// "LotNumber"
    , ReportNumber(*this)	// "ReportNumber"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , FixtureId(*this)	// "FixtureId"
    , NotableEventIds(*this)	// "NotableEventIds"
    , NotedEventIds(*this)	// "NotedEventIds"
    , InspectionStart(*this)	// "InspectionStart"
    , InspectionEnd(*this)	// "InspectionEnd"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , InspectionOperator(*this)	// "InspectionOperator"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , ProductEnvironments(*this)	// "ProductEnvironments"
    , Errors(*this)	// "Errors"
{
}

CActualProductTraceabilityType::CActualProductTraceabilityType(CActualProductTraceabilityType const& other)
    : TypeBase(other.GetNode())
    , SampleNumber(*this)	// "SampleNumber"
    , LotNumber(*this)	// "LotNumber"
    , ReportNumber(*this)	// "ReportNumber"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , FixtureId(*this)	// "FixtureId"
    , NotableEventIds(*this)	// "NotableEventIds"
    , NotedEventIds(*this)	// "NotedEventIds"
    , InspectionStart(*this)	// "InspectionStart"
    , InspectionEnd(*this)	// "InspectionEnd"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , InspectionOperator(*this)	// "InspectionOperator"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , ProductEnvironments(*this)	// "ProductEnvironments"
    , Errors(*this)	// "Errors"
{
}

void CActualProductTraceabilityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualProductTraceabilityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualSpeedValueType::CActualSpeedValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , speedUnit(*this)	// "@speedUnit"
{
}

CActualSpeedValueType::CActualSpeedValueType(CActualSpeedValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , speedUnit(*this)	// "@speedUnit"
{
}

void CActualSpeedValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualSpeedValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualSubgroupType::CActualSubgroupType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , ActualIds(*this)	// "ActualIds"
{
}

CActualSubgroupType::CActualSubgroupType(CActualSubgroupType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , ActualIds(*this)	// "ActualIds"
{
}

void CActualSubgroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualSubgroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualTemperatureValueType::CActualTemperatureValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

CActualTemperatureValueType::CActualTemperatureValueType(CActualTemperatureValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

void CActualTemperatureValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualTemperatureValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualTimeValueType::CActualTimeValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , timeUnit(*this)	// "@timeUnit"
{
}

CActualTimeValueType::CActualTimeValueType(CActualTimeValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , timeUnit(*this)	// "@timeUnit"
{
}

void CActualTimeValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualTimeValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualUnitVectorType::CActualUnitVectorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CUnitVectorType(node)
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
{
}

CActualUnitVectorType::CActualUnitVectorType(CActualUnitVectorType const& other)
    : ::qif191::t::CUnitVectorType(other.GetNode())
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
{
}

void CActualUnitVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualUnitVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualUserDefinedUnitValueType::CActualUserDefinedUnitValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , unitName(*this)	// "@unitName"
{
}

CActualUserDefinedUnitValueType::CActualUserDefinedUnitValueType(CActualUserDefinedUnitValueType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , unitName(*this)	// "@unitName"
{
}

void CActualUserDefinedUnitValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualUserDefinedUnitValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualVectorType::CActualVectorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CVectorType(node)
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
{
}

CActualVectorType::CActualVectorType(CActualVectorType const& other)
    : ::qif191::t::CVectorType(other.GetNode())
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
{
}

void CActualVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualZoneAxisType::CActualZoneAxisType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAxisType(node)
    , Length(*this)	// "Length"
{
}

CActualZoneAxisType::CActualZoneAxisType(CActualZoneAxisType const& other)
    : ::qif191::t::CAxisType(other.GetNode())
    , Length(*this)	// "Length"
{
}

void CActualZoneAxisType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualZoneAxisType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActualZoneRadiiType::CActualZoneRadiiType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MinRadius(*this)	// "MinRadius"
    , MaxRadius(*this)	// "MaxRadius"
{
}

CActualZoneRadiiType::CActualZoneRadiiType(CActualZoneRadiiType const& other)
    : TypeBase(other.GetNode())
    , MinRadius(*this)	// "MinRadius"
    , MaxRadius(*this)	// "MaxRadius"
{
}

void CActualZoneRadiiType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActualZoneRadiiType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAddressDescriptionEnumType::CAddressDescriptionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAddressDescriptionEnumType::CAddressDescriptionEnumType(CAddressDescriptionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CAddressDescriptionType::CAddressDescriptionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AddressDescriptionEnum(*this)	// "AddressDescriptionEnum"
    , OtherAddressDescription(*this)	// "OtherAddressDescription"
{
}

CAddressDescriptionType::CAddressDescriptionType(CAddressDescriptionType const& other)
    : TypeBase(other.GetNode())
    , AddressDescriptionEnum(*this)	// "AddressDescriptionEnum"
    , OtherAddressDescription(*this)	// "OtherAddressDescription"
{
}

void CAddressDescriptionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AddressDescriptionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAggregate12CoreType::CAggregate12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , SubCurves(*this)	// "SubCurves"
{
}

CAggregate12CoreType::CAggregate12CoreType(CAggregate12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , SubCurves(*this)	// "SubCurves"
{
}

void CAggregate12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Aggregate12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAggregate12Type::CAggregate12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , Aggregate12Core(*this)	// "Aggregate12Core"
{
}

CAggregate12Type::CAggregate12Type(CAggregate12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , Aggregate12Core(*this)	// "Aggregate12Core"
{
}

void CAggregate12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Aggregate12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CAggregate13CoreType::CAggregate13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , SubCurves(*this)	// "SubCurves"
{
}

CAggregate13CoreType::CAggregate13CoreType(CAggregate13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , SubCurves(*this)	// "SubCurves"
{
}

void CAggregate13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Aggregate13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAggregate13Type::CAggregate13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , Transform(*this)	// "Transform"
{
}

CAggregate13Type::CAggregate13Type(CAggregate13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , Transform(*this)	// "Transform"
{
}

void CAggregate13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Aggregate13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CAlignmentFeatureType::CAlignmentFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
    , BaseFeature(*this)	// "BaseFeature"
{
}

CAlignmentFeatureType::CAlignmentFeatureType(CAlignmentFeatureType const& other)
    : TypeBase(other.GetNode())
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CAlignmentFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AlignmentFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAlignmentOperationBaseType::CAlignmentOperationBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

CAlignmentOperationBaseType::CAlignmentOperationBaseType(CAlignmentOperationBaseType const& other)
    : TypeBase(other.GetNode())
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

void CAlignmentOperationBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AlignmentOperationBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAlignmentOperationsType::CAlignmentOperationsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AlignmentOperation(*this)	// "AlignmentOperation"
    , ActualOffset(*this)	// "ActualOffset"
    , BestFit(*this)	// "BestFit"
    , DatumPrecedence(*this)	// "DatumPrecedence"
    , Machine(*this)	// "Machine"
    , NominalOffset(*this)	// "NominalOffset"
    , NominalRotation(*this)	// "NominalRotation"
    , PrimaryAlignment(*this)	// "PrimaryAlignment"
    , SecondaryAlignment(*this)	// "SecondaryAlignment"
    , BaseCoordinateSystemId(*this)	// "BaseCoordinateSystemId"
{
}

CAlignmentOperationsType::CAlignmentOperationsType(CAlignmentOperationsType const& other)
    : TypeBase(other.GetNode())
    , AlignmentOperation(*this)	// "AlignmentOperation"
    , ActualOffset(*this)	// "ActualOffset"
    , BestFit(*this)	// "BestFit"
    , DatumPrecedence(*this)	// "DatumPrecedence"
    , Machine(*this)	// "Machine"
    , NominalOffset(*this)	// "NominalOffset"
    , NominalRotation(*this)	// "NominalRotation"
    , PrimaryAlignment(*this)	// "PrimaryAlignment"
    , SecondaryAlignment(*this)	// "SecondaryAlignment"
    , BaseCoordinateSystemId(*this)	// "BaseCoordinateSystemId"
{
}

void CAlignmentOperationsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AlignmentOperationsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAndType::CAndType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

CAndType::CAndType(CAndType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

void CAndType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AndType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleBetweenAnalysisModeEnumType::CAngleBetweenAnalysisModeEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAngleBetweenAnalysisModeEnumType::CAngleBetweenAnalysisModeEnumType(CAngleBetweenAnalysisModeEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CAngleBetweenCharacteristicActualType::CAngleBetweenCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicActualBaseType(node)
    , AnalysisVector(*this)	// "AnalysisVector"
    , Vertex(*this)	// "Vertex"
{
}

CAngleBetweenCharacteristicActualType::CAngleBetweenCharacteristicActualType(CAngleBetweenCharacteristicActualType const& other)
    : ::qif191::t::CAngularCharacteristicActualBaseType(other.GetNode())
    , AnalysisVector(*this)	// "AnalysisVector"
    , Vertex(*this)	// "Vertex"
{
}

void CAngleBetweenCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleBetweenCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleBetweenCharacteristicDefinitionType::CAngleBetweenCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(node)
{
}

CAngleBetweenCharacteristicDefinitionType::CAngleBetweenCharacteristicDefinitionType(CAngleBetweenCharacteristicDefinitionType const& other)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CAngleBetweenCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleBetweenCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleBetweenCharacteristicItemType::CAngleBetweenCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicItemBaseType(node)
{
}

CAngleBetweenCharacteristicItemType::CAngleBetweenCharacteristicItemType(CAngleBetweenCharacteristicItemType const& other)
    : ::qif191::t::CAngularCharacteristicItemBaseType(other.GetNode())
{
}

void CAngleBetweenCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleBetweenCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleBetweenCharacteristicNominalType::CAngleBetweenCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(node)
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , Vertex(*this)	// "Vertex"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CAngleBetweenCharacteristicNominalType::CAngleBetweenCharacteristicNominalType(CAngleBetweenCharacteristicNominalType const& other)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(other.GetNode())
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , Vertex(*this)	// "Vertex"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CAngleBetweenCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleBetweenCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleBetweenCharacteristicStatsEvalType::CAngleBetweenCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(node)
{
}

CAngleBetweenCharacteristicStatsEvalType::CAngleBetweenCharacteristicStatsEvalType(CAngleBetweenCharacteristicStatsEvalType const& other)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(other.GetNode())
{
}

void CAngleBetweenCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleBetweenCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleCharacteristicActualType::CAngleCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicActualBaseType(node)
{
}

CAngleCharacteristicActualType::CAngleCharacteristicActualType(CAngleCharacteristicActualType const& other)
    : ::qif191::t::CAngularCharacteristicActualBaseType(other.GetNode())
{
}

void CAngleCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleCharacteristicDefinitionType::CAngleCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(node)
{
}

CAngleCharacteristicDefinitionType::CAngleCharacteristicDefinitionType(CAngleCharacteristicDefinitionType const& other)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CAngleCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleCharacteristicItemType::CAngleCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicItemBaseType(node)
{
}

CAngleCharacteristicItemType::CAngleCharacteristicItemType(CAngleCharacteristicItemType const& other)
    : ::qif191::t::CAngularCharacteristicItemBaseType(other.GetNode())
{
}

void CAngleCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleCharacteristicNominalType::CAngleCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(node)
{
}

CAngleCharacteristicNominalType::CAngleCharacteristicNominalType(CAngleCharacteristicNominalType const& other)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(other.GetNode())
{
}

void CAngleCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleCharacteristicStatsEvalType::CAngleCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(node)
{
}

CAngleCharacteristicStatsEvalType::CAngleCharacteristicStatsEvalType(CAngleCharacteristicStatsEvalType const& other)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(other.GetNode())
{
}

void CAngleCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleFromCharacteristicActualType::CAngleFromCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicActualBaseType(node)
    , AnalysisVector(*this)	// "AnalysisVector"
    , Vertex(*this)	// "Vertex"
{
}

CAngleFromCharacteristicActualType::CAngleFromCharacteristicActualType(CAngleFromCharacteristicActualType const& other)
    : ::qif191::t::CAngularCharacteristicActualBaseType(other.GetNode())
    , AnalysisVector(*this)	// "AnalysisVector"
    , Vertex(*this)	// "Vertex"
{
}

void CAngleFromCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleFromCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleFromCharacteristicDefinitionType::CAngleFromCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(node)
{
}

CAngleFromCharacteristicDefinitionType::CAngleFromCharacteristicDefinitionType(CAngleFromCharacteristicDefinitionType const& other)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CAngleFromCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleFromCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleFromCharacteristicItemType::CAngleFromCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicItemBaseType(node)
{
}

CAngleFromCharacteristicItemType::CAngleFromCharacteristicItemType(CAngleFromCharacteristicItemType const& other)
    : ::qif191::t::CAngularCharacteristicItemBaseType(other.GetNode())
{
}

void CAngleFromCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleFromCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleFromCharacteristicNominalType::CAngleFromCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(node)
    , OriginReference(*this)	// "OriginReference"
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , Vertex(*this)	// "Vertex"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CAngleFromCharacteristicNominalType::CAngleFromCharacteristicNominalType(CAngleFromCharacteristicNominalType const& other)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(other.GetNode())
    , OriginReference(*this)	// "OriginReference"
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , Vertex(*this)	// "Vertex"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CAngleFromCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleFromCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleFromCharacteristicStatsEvalType::CAngleFromCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(node)
{
}

CAngleFromCharacteristicStatsEvalType::CAngleFromCharacteristicStatsEvalType(CAngleFromCharacteristicStatsEvalType const& other)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(other.GetNode())
{
}

void CAngleFromCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleFromCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleFunctionDiscreteType::CAngleFunctionDiscreteType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFunctionDiscreteType(node)
    , DomainLinearUnit(*this)	// "DomainLinearUnit"
    , RangeAngularUnit(*this)	// "RangeAngularUnit"
{
}

CAngleFunctionDiscreteType::CAngleFunctionDiscreteType(CAngleFunctionDiscreteType const& other)
    : ::qif191::t::CFunctionDiscreteType(other.GetNode())
    , DomainLinearUnit(*this)	// "DomainLinearUnit"
    , RangeAngularUnit(*this)	// "RangeAngularUnit"
{
}

void CAngleFunctionDiscreteType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleFunctionDiscreteType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleRangeType::CAngleRangeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPoint2dSimpleTypeType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CAngleRangeType::CAngleRangeType(CAngleRangeType const& other)
    : ::qif191::t::CPoint2dSimpleTypeType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CAngleRangeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleRangeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCharacteristicActualBaseType::CAngularCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CAngularCharacteristicActualBaseType::CAngularCharacteristicActualBaseType(CAngularCharacteristicActualBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CAngularCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCharacteristicDefinitionBaseType::CAngularCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CAngularCharacteristicDefinitionBaseType::CAngularCharacteristicDefinitionBaseType(CAngularCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CAngularCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCharacteristicItemBaseType::CAngularCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicItemBaseType(node)
{
}

CAngularCharacteristicItemBaseType::CAngularCharacteristicItemBaseType(CAngularCharacteristicItemBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicItemBaseType(other.GetNode())
{
}

void CAngularCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCharacteristicNominalBaseType::CAngularCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CAngularCharacteristicNominalBaseType::CAngularCharacteristicNominalBaseType(CAngularCharacteristicNominalBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CAngularCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCharacteristicStatsEvalType::CAngularCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CAngularCharacteristicStatsEvalType::CAngularCharacteristicStatsEvalType(CAngularCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CAngularCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateCharacteristicActualType::CAngularCoordinateCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CAngularCoordinateCharacteristicActualType::CAngularCoordinateCharacteristicActualType(CAngularCoordinateCharacteristicActualType const& other)
    : ::qif191::t::CCoordinateCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CAngularCoordinateCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCoordinateCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateCharacteristicDefinitionType::CAngularCoordinateCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CAngularCoordinateCharacteristicDefinitionType::CAngularCoordinateCharacteristicDefinitionType(CAngularCoordinateCharacteristicDefinitionType const& other)
    : ::qif191::t::CCoordinateCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CAngularCoordinateCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCoordinateCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateCharacteristicItemType::CAngularCoordinateCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicItemBaseType(node)
{
}

CAngularCoordinateCharacteristicItemType::CAngularCoordinateCharacteristicItemType(CAngularCoordinateCharacteristicItemType const& other)
    : ::qif191::t::CCoordinateCharacteristicItemBaseType(other.GetNode())
{
}

void CAngularCoordinateCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCoordinateCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateCharacteristicNominalType::CAngularCoordinateCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
    , Direction(*this)	// "Direction"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

CAngularCoordinateCharacteristicNominalType::CAngularCoordinateCharacteristicNominalType(CAngularCoordinateCharacteristicNominalType const& other)
    : ::qif191::t::CCoordinateCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
    , Direction(*this)	// "Direction"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

void CAngularCoordinateCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCoordinateCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateCharacteristicStatsEvalType::CAngularCoordinateCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(node)
{
}

CAngularCoordinateCharacteristicStatsEvalType::CAngularCoordinateCharacteristicStatsEvalType(CAngularCoordinateCharacteristicStatsEvalType const& other)
    : ::qif191::t::CAngularCharacteristicStatsEvalType(other.GetNode())
{
}

void CAngularCoordinateCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCoordinateCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateDirectionEnumType::CAngularCoordinateDirectionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAngularCoordinateDirectionEnumType::CAngularCoordinateDirectionEnumType(CAngularCoordinateDirectionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CAngularToleranceDefinitionType::CAngularToleranceDefinitionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CAngularToleranceDefinitionType::CAngularToleranceDefinitionType(CAngularToleranceDefinitionType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CAngularToleranceDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularToleranceDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularToleranceType::CAngularToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinitionId(*this)	// "DefinitionId"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CAngularToleranceType::CAngularToleranceType(CAngularToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinitionId(*this)	// "DefinitionId"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CAngularToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularUnitType::CAngularUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CAngularUnitType::CAngularUnitType(CAngularUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CAngularUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularValueType::CAngularValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CAngularValueType::CAngularValueType(CAngularValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CAngularValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularityCharacteristicActualType::CAngularityCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicActualBaseType(node)
{
}

CAngularityCharacteristicActualType::CAngularityCharacteristicActualType(CAngularityCharacteristicActualType const& other)
    : ::qif191::t::COrientationCharacteristicActualBaseType(other.GetNode())
{
}

void CAngularityCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularityCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularityCharacteristicDefinitionType::CAngularityCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicDefinitionBaseType(node)
{
}

CAngularityCharacteristicDefinitionType::CAngularityCharacteristicDefinitionType(CAngularityCharacteristicDefinitionType const& other)
    : ::qif191::t::COrientationCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CAngularityCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularityCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularityCharacteristicItemType::CAngularityCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicItemBaseType(node)
{
}

CAngularityCharacteristicItemType::CAngularityCharacteristicItemType(CAngularityCharacteristicItemType const& other)
    : ::qif191::t::COrientationCharacteristicItemBaseType(other.GetNode())
{
}

void CAngularityCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularityCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularityCharacteristicNominalType::CAngularityCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicNominalBaseType(node)
    , Angle(*this)	// "Angle"
{
}

CAngularityCharacteristicNominalType::CAngularityCharacteristicNominalType(CAngularityCharacteristicNominalType const& other)
    : ::qif191::t::COrientationCharacteristicNominalBaseType(other.GetNode())
    , Angle(*this)	// "Angle"
{
}

void CAngularityCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularityCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularityCharacteristicStatsEvalType::CAngularityCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicStatsEvalType(node)
{
}

CAngularityCharacteristicStatsEvalType::CAngularityCharacteristicStatsEvalType(CAngularityCharacteristicStatsEvalType const& other)
    : ::qif191::t::COrientationCharacteristicStatsEvalType(other.GetNode())
{
}

void CAngularityCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularityCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CApplicationType::CApplicationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , Organization(*this)	// "Organization"
    , AddonName(*this)	// "AddonName"
    , AddonOrganization(*this)	// "AddonOrganization"
{
}

CApplicationType::CApplicationType(CApplicationType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , Organization(*this)	// "Organization"
    , AddonName(*this)	// "AddonName"
    , AddonOrganization(*this)	// "AddonOrganization"
{
}

void CApplicationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ApplicationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcActualDeterminationType::CArcActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CArcActualDeterminationType::CArcActualDeterminationType(CArcActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CArcActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcBestFitType::CArcBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CArcBestFitType::CArcBestFitType(CArcBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CArcBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCastType::CArcCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CArcCastType::CArcCastType(CArcCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CArcCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCheckedFeatureType::CArcCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CArcCheckedFeatureType::CArcCheckedFeatureType(CArcCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CArcCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCheckedType::CArcCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CArcCheckedType::CArcCheckedType(CArcCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CArcCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCircular12CoreType::CArcCircular12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Turned(*this)	// "@Turned"
    , Radius(*this)	// "Radius"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
{
}

CArcCircular12CoreType::CArcCircular12CoreType(CArcCircular12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Turned(*this)	// "@Turned"
    , Radius(*this)	// "Radius"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
{
}

void CArcCircular12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCircular12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCircular12Type::CArcCircular12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , ArcCircular12Core(*this)	// "ArcCircular12Core"
{
}

CArcCircular12Type::CArcCircular12Type(CArcCircular12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , ArcCircular12Core(*this)	// "ArcCircular12Core"
{
}

void CArcCircular12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCircular12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCircular13CoreType::CArcCircular13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Radius(*this)	// "Radius"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
    , Normal(*this)	// "Normal"
{
}

CArcCircular13CoreType::CArcCircular13CoreType(CArcCircular13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Radius(*this)	// "Radius"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
    , Normal(*this)	// "Normal"
{
}

void CArcCircular13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCircular13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCircular13Type::CArcCircular13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , Transform(*this)	// "Transform"
{
}

CArcCircular13Type::CArcCircular13Type(CArcCircular13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , Transform(*this)	// "Transform"
{
}

void CArcCircular13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCircular13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcConic12CoreType::CArcConic12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Form(*this)	// "@Form"
    , Turned(*this)	// "@Turned"
    , A(*this)	// "A"
    , B(*this)	// "B"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
{
}

CArcConic12CoreType::CArcConic12CoreType(CArcConic12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Form(*this)	// "@Form"
    , Turned(*this)	// "@Turned"
    , A(*this)	// "A"
    , B(*this)	// "B"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
{
}

void CArcConic12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcConic12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcConic12Type::CArcConic12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , ArcConic12Core(*this)	// "ArcConic12Core"
{
}

CArcConic12Type::CArcConic12Type(CArcConic12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , ArcConic12Core(*this)	// "ArcConic12Core"
{
}

void CArcConic12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcConic12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcConic13CoreType::CArcConic13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Form(*this)	// "@Form"
    , A(*this)	// "A"
    , B(*this)	// "B"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
    , Normal(*this)	// "Normal"
{
}

CArcConic13CoreType::CArcConic13CoreType(CArcConic13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Form(*this)	// "@Form"
    , A(*this)	// "A"
    , B(*this)	// "B"
    , Center(*this)	// "Center"
    , DirBeg(*this)	// "DirBeg"
    , Normal(*this)	// "Normal"
{
}

void CArcConic13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcConic13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcConic13Type::CArcConic13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , Transform(*this)	// "Transform"
{
}

CArcConic13Type::CArcConic13Type(CArcConic13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , Transform(*this)	// "Transform"
{
}

void CArcConic13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcConic13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcConicFormEnumType::CArcConicFormEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CArcConicFormEnumType::CArcConicFormEnumType(CArcConicFormEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CArcConstructionMethodType::CArcConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
    , Extract(*this)	// "Extract"
{
}

CArcConstructionMethodType::CArcConstructionMethodType(CArcConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
    , Extract(*this)	// "Extract"
{
}

void CArcConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcCopyType::CArcCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseArc(*this)	// "BaseArc"
{
}

CArcCopyType::CArcCopyType(CArcCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseArc(*this)	// "BaseArc"
{
}

void CArcCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcExtractType::CArcExtractType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , CurveFeature(*this)	// "CurveFeature"
{
}

CArcExtractType::CArcExtractType(CArcExtractType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , CurveFeature(*this)	// "CurveFeature"
{
}

void CArcExtractType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcExtractType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcFeatureActualType::CArcFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , Radius(*this)	// "Radius"
    , RadiusMin(*this)	// "RadiusMin"
    , RadiusMax(*this)	// "RadiusMax"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

CArcFeatureActualType::CArcFeatureActualType(CArcFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , Radius(*this)	// "Radius"
    , RadiusMin(*this)	// "RadiusMin"
    , RadiusMax(*this)	// "RadiusMax"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

void CArcFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcFeatureDefinitionType::CArcFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Radius(*this)	// "Radius"
{
}

CArcFeatureDefinitionType::CArcFeatureDefinitionType(CArcFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Radius(*this)	// "Radius"
{
}

void CArcFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcFeatureItemType::CArcFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CArcFeatureItemType::CArcFeatureItemType(CArcFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CArcFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcFeatureNominalType::CArcFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Sweep(*this)	// "Sweep"
    , Normal(*this)	// "Normal"
{
}

CArcFeatureNominalType::CArcFeatureNominalType(CArcFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Sweep(*this)	// "Sweep"
    , Normal(*this)	// "Normal"
{
}

void CArcFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcFromScanType::CArcFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

CArcFromScanType::CArcFromScanType(CArcFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

void CArcFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcPointSamplingStrategyType::CArcPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CArcPointSamplingStrategyType::CArcPointSamplingStrategyType(CArcPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CArcPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcProjectionType::CArcProjectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ProjectionArc(*this)	// "ProjectionArc"
    , ProjectionPlane(*this)	// "ProjectionPlane"
{
}

CArcProjectionType::CArcProjectionType(CArcProjectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ProjectionArc(*this)	// "ProjectionArc"
    , ProjectionPlane(*this)	// "ProjectionPlane"
{
}

void CArcProjectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcProjectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcRecompType::CArcRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CArcRecompType::CArcRecompType(CArcRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CArcRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArcTransformType::CArcTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseArc(*this)	// "BaseArc"
    , Transformation(*this)	// "Transformation"
{
}

CArcTransformType::CArcTransformType(CArcTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseArc(*this)	// "BaseArc"
    , Transformation(*this)	// "Transformation"
{
}

void CArcTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArcTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaCharacteristicActualBaseType::CAreaCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CAreaCharacteristicActualBaseType::CAreaCharacteristicActualBaseType(CAreaCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CAreaCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaCharacteristicDefinitionBaseType::CAreaCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CAreaCharacteristicDefinitionBaseType::CAreaCharacteristicDefinitionBaseType(CAreaCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CAreaCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaCharacteristicItemBaseType::CAreaCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CAreaCharacteristicItemBaseType::CAreaCharacteristicItemBaseType(CAreaCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CAreaCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaCharacteristicNominalBaseType::CAreaCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CAreaCharacteristicNominalBaseType::CAreaCharacteristicNominalBaseType(CAreaCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CAreaCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaToleranceType::CAreaToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CAreaToleranceType::CAreaToleranceType(CAreaToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CAreaToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaUnitType::CAreaUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CAreaUnitType::CAreaUnitType(CAreaUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CAreaUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAreaValueType::CAreaValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , areaUnit(*this)	// "@areaUnit"
{
}

CAreaValueType::CAreaValueType(CAreaValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , areaUnit(*this)	// "@areaUnit"
{
}

void CAreaValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AreaValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArithmeticCharacteristicParameterType::CArithmeticCharacteristicParameterType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
    , CharacteristicTypeEnum(*this)	// "CharacteristicTypeEnum"
    , Parameter(*this)	// "Parameter"
{
}

CArithmeticCharacteristicParameterType::CArithmeticCharacteristicParameterType(CArithmeticCharacteristicParameterType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
    , CharacteristicTypeEnum(*this)	// "CharacteristicTypeEnum"
    , Parameter(*this)	// "Parameter"
{
}

void CArithmeticCharacteristicParameterType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArithmeticCharacteristicParameterType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArithmeticComparisonBaseType::CArithmeticComparisonBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , DividedBy(*this)	// "DividedBy"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureLength(*this)	// "FeatureLength"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , Plus(*this)	// "Plus"
    , Times(*this)	// "Times"
{
}

CArithmeticComparisonBaseType::CArithmeticComparisonBaseType(CArithmeticComparisonBaseType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , DividedBy(*this)	// "DividedBy"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureLength(*this)	// "FeatureLength"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , Plus(*this)	// "Plus"
    , Times(*this)	// "Times"
{
}

void CArithmeticComparisonBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArithmeticComparisonBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArithmeticConstantType::CArithmeticConstantType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
    , val(*this)	// "@val"
{
}

CArithmeticConstantType::CArithmeticConstantType(CArithmeticConstantType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
    , val(*this)	// "@val"
{
}

void CArithmeticConstantType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArithmeticConstantType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArithmeticEqualType::CArithmeticEqualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticComparisonBaseType(node)
{
}

CArithmeticEqualType::CArithmeticEqualType(CArithmeticEqualType const& other)
    : ::qif191::t::CArithmeticComparisonBaseType(other.GetNode())
{
}

void CArithmeticEqualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArithmeticEqualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArithmeticExpressionBaseType::CArithmeticExpressionBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CArithmeticExpressionBaseType::CArithmeticExpressionBaseType(CArithmeticExpressionBaseType const& other)
    : TypeBase(other.GetNode())
{
}

void CArithmeticExpressionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArithmeticExpressionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArithmeticFeatureParameterType::CArithmeticFeatureParameterType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
    , Parameter(*this)	// "Parameter"
{
}

CArithmeticFeatureParameterType::CArithmeticFeatureParameterType(CArithmeticFeatureParameterType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
    , Parameter(*this)	// "Parameter"
{
}

void CArithmeticFeatureParameterType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArithmeticFeatureParameterType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayBinaryType::CArrayBinaryType(xercesc::DOMNode* const& node)
    : ::qif191::xs::Cbase64BinaryType(node)
    , N(*this)	// "@N"
    , SizeElement(*this)	// "@SizeElement"
{
}

CArrayBinaryType::CArrayBinaryType(CArrayBinaryType const& other)
    : ::qif191::xs::Cbase64BinaryType(other.GetNode())
    , N(*this)	// "@N"
    , SizeElement(*this)	// "@SizeElement"
{
}

void CArrayBinaryType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayBinaryType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayBoolType::CArrayBoolType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListBoolTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayBoolType::CArrayBoolType(CArrayBoolType const& other)
    : ::qif191::t::CListBoolTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayBoolType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayBoolType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayDoubleType::CArrayDoubleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListDoubleTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayDoubleType::CArrayDoubleType(CArrayDoubleType const& other)
    : ::qif191::t::CListDoubleTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayDoubleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayDoubleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayI2Type::CArrayI2Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CListIntTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayI2Type::CArrayI2Type(CArrayI2Type const& other)
    : ::qif191::t::CListIntTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayI2Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayI2Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayI3Type::CArrayI3Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CListIntTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayI3Type::CArrayI3Type(CArrayI3Type const& other)
    : ::qif191::t::CListIntTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayI3Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayI3Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayIntType::CArrayIntType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListIntTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayIntType::CArrayIntType(CArrayIntType const& other)
    : ::qif191::t::CListIntTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayIntType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayIntType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayNaturalType::CArrayNaturalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListNaturalTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayNaturalType::CArrayNaturalType(CArrayNaturalType const& other)
    : ::qif191::t::CListNaturalTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayNaturalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayNaturalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayPoint2dType::CArrayPoint2dType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListDoubleTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayPoint2dType::CArrayPoint2dType(CArrayPoint2dType const& other)
    : ::qif191::t::CListDoubleTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayPoint2dType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayPoint2dType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayPointType::CArrayPointType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListDoubleTypeType(node)
    , N(*this)	// "@N"
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

CArrayPointType::CArrayPointType(CArrayPointType const& other)
    : ::qif191::t::CListDoubleTypeType(other.GetNode())
    , N(*this)	// "@N"
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

void CArrayPointType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayPointType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayReferenceFullType::CArrayReferenceFullType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Id(*this)	// "Id"
{
}

CArrayReferenceFullType::CArrayReferenceFullType(CArrayReferenceFullType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Id(*this)	// "Id"
{
}

void CArrayReferenceFullType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayReferenceFullType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayReferenceType::CArrayReferenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Id(*this)	// "Id"
{
}

CArrayReferenceType::CArrayReferenceType(CArrayReferenceType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Id(*this)	// "Id"
{
}

void CArrayReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArraySubCurve12Type::CArraySubCurve12Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , SubCurve(*this)	// "SubCurve"
{
}

CArraySubCurve12Type::CArraySubCurve12Type(CArraySubCurve12Type const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , SubCurve(*this)	// "SubCurve"
{
}

void CArraySubCurve12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArraySubCurve12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArraySubCurve13Type::CArraySubCurve13Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , SubCurve(*this)	// "SubCurve"
{
}

CArraySubCurve13Type::CArraySubCurve13Type(CArraySubCurve13Type const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , SubCurve(*this)	// "SubCurve"
{
}

void CArraySubCurve13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArraySubCurve13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayUnitVectorType::CArrayUnitVectorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListDoubleTypeType(node)
    , N(*this)	// "@N"
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

CArrayUnitVectorType::CArrayUnitVectorType(CArrayUnitVectorType const& other)
    : ::qif191::t::CListDoubleTypeType(other.GetNode())
    , N(*this)	// "@N"
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

void CArrayUnitVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayUnitVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CArrayUnsignedByteType::CArrayUnsignedByteType(xercesc::DOMNode* const& node)
    : ::qif191::t::CListUnsignedByteTypeType(node)
    , N(*this)	// "@N"
{
}

CArrayUnsignedByteType::CArrayUnsignedByteType(CArrayUnsignedByteType const& other)
    : ::qif191::t::CListUnsignedByteTypeType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CArrayUnsignedByteType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ArrayUnsignedByteType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAsmPathType::CAsmPathType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , ComponentIds(*this)	// "ComponentIds"
{
}

CAsmPathType::CAsmPathType(CAsmPathType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , ComponentIds(*this)	// "ComponentIds"
{
}

void CAsmPathType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AsmPathType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAsmPathsType::CAsmPathsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , AsmPath(*this)	// "AsmPath"
{
}

CAsmPathsType::CAsmPathsType(CAsmPathsType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , AsmPath(*this)	// "AsmPath"
{
}

void CAsmPathsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AsmPathsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAssemblySetType::CAssemblySetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Assembly(*this)	// "Assembly"
{
}

CAssemblySetType::CAssemblySetType(CAssemblySetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Assembly(*this)	// "Assembly"
{
}

void CAssemblySetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AssemblySetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAssemblyType::CAssemblyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProductDefinitionBaseType(node)
    , ComponentIds(*this)	// "ComponentIds"
    , DefinitionInternal(*this)	// "DefinitionInternal"
    , DefinitionExternal(*this)	// "DefinitionExternal"
{
}

CAssemblyType::CAssemblyType(CAssemblyType const& other)
    : ::qif191::t::CProductDefinitionBaseType(other.GetNode())
    , ComponentIds(*this)	// "ComponentIds"
    , DefinitionInternal(*this)	// "DefinitionInternal"
    , DefinitionExternal(*this)	// "DefinitionExternal"
{
}

void CAssemblyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AssemblyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAssignableCauseEnumType::CAssignableCauseEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAssignableCauseEnumType::CAssignableCauseEnumType(CAssignableCauseEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CAssignableCauseType::CAssignableCauseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
    , AssignableCauseEnum(*this)	// "AssignableCauseEnum"
    , CorrectiveActionIds(*this)	// "CorrectiveActionIds"
{
}

CAssignableCauseType::CAssignableCauseType(CAssignableCauseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
    , AssignableCauseEnum(*this)	// "AssignableCauseEnum"
    , CorrectiveActionIds(*this)	// "CorrectiveActionIds"
{
}

void CAssignableCauseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AssignableCauseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAssignableCausesType::CAssignableCausesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AssignableCause(*this)	// "AssignableCause"
{
}

CAssignableCausesType::CAssignableCausesType(CAssignableCausesType const& other)
    : TypeBase(other.GetNode())
    , AssignableCause(*this)	// "AssignableCause"
{
}

void CAssignableCausesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AssignableCausesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttr23CoreEnumType::CAttr23CoreEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAttr23CoreEnumType::CAttr23CoreEnumType(CAttr23CoreEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CAttributeBaseType::CAttributeBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "@Name"
{
}

CAttributeBaseType::CAttributeBaseType(CAttributeBaseType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "@Name"
{
}

void CAttributeBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeBoolType::CAttributeBoolType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , Value2(*this)	// "@Value"
{
}

CAttributeBoolType::CAttributeBoolType(CAttributeBoolType const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , Value2(*this)	// "@Value"
{
}

void CAttributeBoolType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeBoolType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeD3Type::CAttributeD3Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , Value2(*this)	// "@Value"
{
}

CAttributeD3Type::CAttributeD3Type(CAttributeD3Type const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , Value2(*this)	// "@Value"
{
}

void CAttributeD3Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeD3Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeI1Type::CAttributeI1Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , Value2(*this)	// "@Value"
{
}

CAttributeI1Type::CAttributeI1Type(CAttributeI1Type const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , Value2(*this)	// "@Value"
{
}

void CAttributeI1Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeI1Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeI2Type::CAttributeI2Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , Value2(*this)	// "@Value"
{
}

CAttributeI2Type::CAttributeI2Type(CAttributeI2Type const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , Value2(*this)	// "@Value"
{
}

void CAttributeI2Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeI2Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeQPIdType::CAttributeQPIdType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , Value2(*this)	// "@Value"
{
}

CAttributeQPIdType::CAttributeQPIdType(CAttributeQPIdType const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , Value2(*this)	// "@Value"
{
}

void CAttributeQPIdType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeQPIdType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeStrType::CAttributeStrType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , Value2(*this)	// "@Value"
{
}

CAttributeStrType::CAttributeStrType(CAttributeStrType const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , Value2(*this)	// "@Value"
{
}

void CAttributeStrType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeStrType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributeUserType::CAttributeUserType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAttributeBaseType(node)
    , NameUserAttribute(*this)	// "@NameUserAttribute"
    , UserDataXML(*this)	// "UserDataXML"
    , UserDataBinary(*this)	// "UserDataBinary"
{
}

CAttributeUserType::CAttributeUserType(CAttributeUserType const& other)
    : ::qif191::t::CAttributeBaseType(other.GetNode())
    , NameUserAttribute(*this)	// "@NameUserAttribute"
    , UserDataXML(*this)	// "UserDataXML"
    , UserDataBinary(*this)	// "UserDataBinary"
{
}

void CAttributeUserType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributeUserType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAttributesType::CAttributesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Attribute(*this)	// "Attribute"
    , AttributeBool(*this)	// "AttributeBool"
    , AttributeD3(*this)	// "AttributeD3"
    , AttributeI1(*this)	// "AttributeI1"
    , AttributeI2(*this)	// "AttributeI2"
    , AttributeQPId(*this)	// "AttributeQPId"
    , AttributeStr(*this)	// "AttributeStr"
    , AttributeUser(*this)	// "AttributeUser"
{
}

CAttributesType::CAttributesType(CAttributesType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Attribute(*this)	// "Attribute"
    , AttributeBool(*this)	// "AttributeBool"
    , AttributeD3(*this)	// "AttributeD3"
    , AttributeI1(*this)	// "AttributeI1"
    , AttributeI2(*this)	// "AttributeI2"
    , AttributeQPId(*this)	// "AttributeQPId"
    , AttributeStr(*this)	// "AttributeStr"
    , AttributeUser(*this)	// "AttributeUser"
{
}

void CAttributesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AttributesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAuthorType::CAuthorType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , Organization(*this)	// "Organization"
{
}

CAuthorType::CAuthorType(CAuthorType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , Organization(*this)	// "Organization"
{
}

void CAuthorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AuthorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAuxiliaryBaseType::CAuxiliaryBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDrawableBaseType(node)
{
}

CAuxiliaryBaseType::CAuxiliaryBaseType(CAuxiliaryBaseType const& other)
    : ::qif191::t::CDrawableBaseType(other.GetNode())
{
}

void CAuxiliaryBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AuxiliaryBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAuxiliaryPlaneBaseType::CAuxiliaryPlaneBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAuxiliaryBaseType(node)
    , Plane(*this)	// "Plane"
{
}

CAuxiliaryPlaneBaseType::CAuxiliaryPlaneBaseType(CAuxiliaryPlaneBaseType const& other)
    : ::qif191::t::CAuxiliaryBaseType(other.GetNode())
    , Plane(*this)	// "Plane"
{
}

void CAuxiliaryPlaneBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AuxiliaryPlaneBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAuxiliarySetType::CAuxiliarySetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Auxiliary(*this)	// "Auxiliary"
    , LineAuxiliary(*this)	// "LineAuxiliary"
    , PlaneClipping(*this)	// "PlaneClipping"
    , PlaneReference(*this)	// "PlaneReference"
    , PointAuxiliary(*this)	// "PointAuxiliary"
{
}

CAuxiliarySetType::CAuxiliarySetType(CAuxiliarySetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Auxiliary(*this)	// "Auxiliary"
    , LineAuxiliary(*this)	// "LineAuxiliary"
    , PlaneClipping(*this)	// "PlaneClipping"
    , PlaneReference(*this)	// "PlaneReference"
    , PointAuxiliary(*this)	// "PointAuxiliary"
{
}

void CAuxiliarySetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AuxiliarySetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAverageFeatureType::CAverageFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureActual(*this)	// "FeatureActual"
    , ArcFeatureActual(*this)	// "ArcFeatureActual"
    , CircleFeatureActual(*this)	// "CircleFeatureActual"
    , CompoundFeatureActual(*this)	// "CompoundFeatureActual"
    , ConeFeatureActual(*this)	// "ConeFeatureActual"
    , ConicalSegmentFeatureActual(*this)	// "ConicalSegmentFeatureActual"
    , CuboidFeatureActual(*this)	// "CuboidFeatureActual"
    , CylinderFeatureActual(*this)	// "CylinderFeatureActual"
    , CylindricalSegmentFeatureActual(*this)	// "CylindricalSegmentFeatureActual"
    , EdgePointFeatureActual(*this)	// "EdgePointFeatureActual"
    , EllipseFeatureActual(*this)	// "EllipseFeatureActual"
    , ElongatedCylinderFeatureActual(*this)	// "ElongatedCylinderFeatureActual"
    , ExtrudedCrossSectionFeatureActual(*this)	// "ExtrudedCrossSectionFeatureActual"
    , GenericFeatureActual(*this)	// "GenericFeatureActual"
    , LineFeatureActual(*this)	// "LineFeatureActual"
    , OppositeLinesFeatureActual(*this)	// "OppositeLinesFeatureActual"
    , OppositePlanesFeatureActual(*this)	// "OppositePlanesFeatureActual"
    , PatternFeatureActual(*this)	// "PatternFeatureActual"
    , PlaneFeatureActual(*this)	// "PlaneFeatureActual"
    , PointDefinedCurveFeatureActual(*this)	// "PointDefinedCurveFeatureActual"
    , PointDefinedSurfaceFeatureActual(*this)	// "PointDefinedSurfaceFeatureActual"
    , PointFeatureActual(*this)	// "PointFeatureActual"
    , ProfileGroupFeatureActual(*this)	// "ProfileGroupFeatureActual"
    , RunoutGroupFeatureActual(*this)	// "RunoutGroupFeatureActual"
    , SphereFeatureActual(*this)	// "SphereFeatureActual"
    , SphericalSegmentFeatureActual(*this)	// "SphericalSegmentFeatureActual"
    , SurfaceOfRevolutionFeatureActual(*this)	// "SurfaceOfRevolutionFeatureActual"
    , ThreadedFeatureActual(*this)	// "ThreadedFeatureActual"
    , ToroidalSegmentFeatureActual(*this)	// "ToroidalSegmentFeatureActual"
    , TorusFeatureActual(*this)	// "TorusFeatureActual"
    , ActualIds(*this)	// "ActualIds"
{
}

CAverageFeatureType::CAverageFeatureType(CAverageFeatureType const& other)
    : TypeBase(other.GetNode())
    , FeatureActual(*this)	// "FeatureActual"
    , ArcFeatureActual(*this)	// "ArcFeatureActual"
    , CircleFeatureActual(*this)	// "CircleFeatureActual"
    , CompoundFeatureActual(*this)	// "CompoundFeatureActual"
    , ConeFeatureActual(*this)	// "ConeFeatureActual"
    , ConicalSegmentFeatureActual(*this)	// "ConicalSegmentFeatureActual"
    , CuboidFeatureActual(*this)	// "CuboidFeatureActual"
    , CylinderFeatureActual(*this)	// "CylinderFeatureActual"
    , CylindricalSegmentFeatureActual(*this)	// "CylindricalSegmentFeatureActual"
    , EdgePointFeatureActual(*this)	// "EdgePointFeatureActual"
    , EllipseFeatureActual(*this)	// "EllipseFeatureActual"
    , ElongatedCylinderFeatureActual(*this)	// "ElongatedCylinderFeatureActual"
    , ExtrudedCrossSectionFeatureActual(*this)	// "ExtrudedCrossSectionFeatureActual"
    , GenericFeatureActual(*this)	// "GenericFeatureActual"
    , LineFeatureActual(*this)	// "LineFeatureActual"
    , OppositeLinesFeatureActual(*this)	// "OppositeLinesFeatureActual"
    , OppositePlanesFeatureActual(*this)	// "OppositePlanesFeatureActual"
    , PatternFeatureActual(*this)	// "PatternFeatureActual"
    , PlaneFeatureActual(*this)	// "PlaneFeatureActual"
    , PointDefinedCurveFeatureActual(*this)	// "PointDefinedCurveFeatureActual"
    , PointDefinedSurfaceFeatureActual(*this)	// "PointDefinedSurfaceFeatureActual"
    , PointFeatureActual(*this)	// "PointFeatureActual"
    , ProfileGroupFeatureActual(*this)	// "ProfileGroupFeatureActual"
    , RunoutGroupFeatureActual(*this)	// "RunoutGroupFeatureActual"
    , SphereFeatureActual(*this)	// "SphereFeatureActual"
    , SphericalSegmentFeatureActual(*this)	// "SphericalSegmentFeatureActual"
    , SurfaceOfRevolutionFeatureActual(*this)	// "SurfaceOfRevolutionFeatureActual"
    , ThreadedFeatureActual(*this)	// "ThreadedFeatureActual"
    , ToroidalSegmentFeatureActual(*this)	// "ToroidalSegmentFeatureActual"
    , TorusFeatureActual(*this)	// "TorusFeatureActual"
    , ActualIds(*this)	// "ActualIds"
{
}

void CAverageFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AverageFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAverageFeaturesType::CAverageFeaturesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AverageFeature(*this)	// "AverageFeature"
{
}

CAverageFeaturesType::CAverageFeaturesType(CAverageFeaturesType const& other)
    : TypeBase(other.GetNode())
    , AverageFeature(*this)	// "AverageFeature"
{
}

void CAverageFeaturesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AverageFeaturesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAxialDifferentialScaleType::CAxialDifferentialScaleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XScaleFactor(*this)	// "XScaleFactor"
    , XaxisDirection(*this)	// "XaxisDirection"
    , YScaleFactor(*this)	// "YScaleFactor"
    , YaxisDirection(*this)	// "YaxisDirection"
    , ZScaleFactor(*this)	// "ZScaleFactor"
    , ZaxisDirection(*this)	// "ZaxisDirection"
{
}

CAxialDifferentialScaleType::CAxialDifferentialScaleType(CAxialDifferentialScaleType const& other)
    : TypeBase(other.GetNode())
    , XScaleFactor(*this)	// "XScaleFactor"
    , XaxisDirection(*this)	// "XaxisDirection"
    , YScaleFactor(*this)	// "YScaleFactor"
    , YaxisDirection(*this)	// "YaxisDirection"
    , ZScaleFactor(*this)	// "ZScaleFactor"
    , ZaxisDirection(*this)	// "ZaxisDirection"
{
}

void CAxialDifferentialScaleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AxialDifferentialScaleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAxisType::CAxisType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AxisPoint(*this)	// "AxisPoint"
    , Direction(*this)	// "Direction"
{
}

CAxisType::CAxisType(CAxisType const& other)
    : TypeBase(other.GetNode())
    , AxisPoint(*this)	// "AxisPoint"
    , Direction(*this)	// "Direction"
{
}

void CAxisType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AxisType"), _T("http://qifstandards.org/xsd/qif2"));
}

CB2Type::CB2Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CB2Type::CB2Type(CB2Type const& other)
    : TypeBase(other.GetNode())
{
}


CB89TestType::CB89TestType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCMMAccuracyTestBaseType(node)
    , XLinearAccuracy(*this)	// "XLinearAccuracy"
    , YLinearAccuracy(*this)	// "YLinearAccuracy"
    , ZLinearAccuracy(*this)	// "ZLinearAccuracy"
    , OffsetVolumetricPerformance(*this)	// "OffsetVolumetricPerformance"
    , VolumetricPerformance(*this)	// "VolumetricPerformance"
    , Repeatability(*this)	// "Repeatability"
{
}

CB89TestType::CB89TestType(CB89TestType const& other)
    : ::qif191::t::CCMMAccuracyTestBaseType(other.GetNode())
    , XLinearAccuracy(*this)	// "XLinearAccuracy"
    , YLinearAccuracy(*this)	// "YLinearAccuracy"
    , ZLinearAccuracy(*this)	// "ZLinearAccuracy"
    , OffsetVolumetricPerformance(*this)	// "OffsetVolumetricPerformance"
    , VolumetricPerformance(*this)	// "VolumetricPerformance"
    , Repeatability(*this)	// "Repeatability"
{
}

void CB89TestType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("B89TestType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBalloonType::CBalloonType(xercesc::DOMNode* const& node)
    : ::qif191::xs::CunsignedIntType(node)
    , Sub(*this)	// "@Sub"
{
}

CBalloonType::CBalloonType(CBalloonType const& other)
    : ::qif191::xs::CunsignedIntType(other.GetNode())
    , Sub(*this)	// "@Sub"
{
}

void CBalloonType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BalloonType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBaseFeaturePointListType::CBaseFeaturePointListType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BaseFeaturePointSet(*this)	// "BaseFeaturePointSet"
{
}

CBaseFeaturePointListType::CBaseFeaturePointListType(CBaseFeaturePointListType const& other)
    : TypeBase(other.GetNode())
    , BaseFeaturePointSet(*this)	// "BaseFeaturePointSet"
{
}

void CBaseFeaturePointListType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BaseFeaturePointListType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBaseFeaturePointSetType::CBaseFeaturePointSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureItemId(*this)	// "FeatureItemId"
    , PointIndex(*this)	// "PointIndex"
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

CBaseFeaturePointSetType::CBaseFeaturePointSetType(CBaseFeaturePointSetType const& other)
    : TypeBase(other.GetNode())
    , FeatureItemId(*this)	// "FeatureItemId"
    , PointIndex(*this)	// "PointIndex"
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

void CBaseFeaturePointSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BaseFeaturePointSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBaseFeatureType::CBaseFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , FeatureItemId(*this)	// "FeatureItemId"
{
}

CBaseFeatureType::CBaseFeatureType(CBaseFeatureType const& other)
    : TypeBase(other.GetNode())
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , FeatureItemId(*this)	// "FeatureItemId"
{
}

void CBaseFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BaseFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBestFitAlignmentOperationType::CBestFitAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , DegreesOfFreedom(*this)	// "DegreesOfFreedom"
    , BaseFeature(*this)	// "BaseFeature"
{
}

CBestFitAlignmentOperationType::CBestFitAlignmentOperationType(CBestFitAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , DegreesOfFreedom(*this)	// "DegreesOfFreedom"
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CBestFitAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BestFitAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBiasStudyPlanType::CBiasStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(node)
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

CBiasStudyPlanType::CBiasStudyPlanType(CBiasStudyPlanType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(other.GetNode())
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

void CBiasStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BiasStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBiasStudyResultsType::CBiasStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , SampleSize(*this)	// "SampleSize"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

CBiasStudyResultsType::CBiasStudyResultsType(CBiasStudyResultsType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , SampleSize(*this)	// "SampleSize"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

void CBiasStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BiasStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBinaryArithmeticExpressionBaseType::CBinaryArithmeticExpressionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , DividedBy(*this)	// "DividedBy"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureLength(*this)	// "FeatureLength"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , Plus(*this)	// "Plus"
    , Times(*this)	// "Times"
{
}

CBinaryArithmeticExpressionBaseType::CBinaryArithmeticExpressionBaseType(CBinaryArithmeticExpressionBaseType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , DividedBy(*this)	// "DividedBy"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureLength(*this)	// "FeatureLength"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , Plus(*this)	// "Plus"
    , Times(*this)	// "Times"
{
}

void CBinaryArithmeticExpressionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BinaryArithmeticExpressionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBinaryBooleanExpressionBaseType::CBinaryBooleanExpressionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

CBinaryBooleanExpressionBaseType::CBinaryBooleanExpressionBaseType(CBinaryBooleanExpressionBaseType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

void CBinaryBooleanExpressionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BinaryBooleanExpressionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBinaryDataType::CBinaryDataType(xercesc::DOMNode* const& node)
    : ::qif191::xs::Cbase64BinaryType(node)
    , N(*this)	// "@N"
{
}

CBinaryDataType::CBinaryDataType(CBinaryDataType const& other)
    : ::qif191::xs::Cbase64BinaryType(other.GetNode())
    , N(*this)	// "@N"
{
}

void CBinaryDataType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BinaryDataType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBodySetType::CBodySetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Body(*this)	// "Body"
{
}

CBodySetType::CBodySetType(CBodySetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Body(*this)	// "Body"
{
}

void CBodySetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BodySetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBodyType::CBodyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
    , Transform(*this)	// "Transform"
    , ShellIds(*this)	// "ShellIds"
    , FaceIds(*this)	// "FaceIds"
    , LoopIds(*this)	// "LoopIds"
    , EdgeIds(*this)	// "EdgeIds"
    , VertexIds(*this)	// "VertexIds"
{
}

CBodyType::CBodyType(CBodyType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
    , Transform(*this)	// "Transform"
    , ShellIds(*this)	// "ShellIds"
    , FaceIds(*this)	// "FaceIds"
    , LoopIds(*this)	// "LoopIds"
    , EdgeIds(*this)	// "EdgeIds"
    , VertexIds(*this)	// "VertexIds"
{
}

void CBodyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BodyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBooleanConstantEnumType::CBooleanConstantEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CBooleanConstantEnumType::CBooleanConstantEnumType(CBooleanConstantEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CBooleanEqualType::CBooleanEqualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBinaryBooleanExpressionBaseType(node)
{
}

CBooleanEqualType::CBooleanEqualType(CBooleanEqualType const& other)
    : ::qif191::t::CBinaryBooleanExpressionBaseType(other.GetNode())
{
}

void CBooleanEqualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BooleanEqualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBooleanExpressionBaseType::CBooleanExpressionBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CBooleanExpressionBaseType::CBooleanExpressionBaseType(CBooleanExpressionBaseType const& other)
    : TypeBase(other.GetNode())
{
}

void CBooleanExpressionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BooleanExpressionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBottomEnumType::CBottomEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CBottomEnumType::CBottomEnumType(CBottomEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CBottomType::CBottomType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BottomEnum(*this)	// "BottomEnum"
    , OtherBottom(*this)	// "OtherBottom"
{
}

CBottomType::CBottomType(CBottomType const& other)
    : TypeBase(other.GetNode())
    , BottomEnum(*this)	// "BottomEnum"
    , OtherBottom(*this)	// "OtherBottom"
{
}

void CBottomType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BottomType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBoundingBoxType::CBoundingBoxType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Length(*this)	// "Length"
    , Width(*this)	// "Width"
    , Height(*this)	// "Height"
{
}

CBoundingBoxType::CBoundingBoxType(CBoundingBoxType const& other)
    : TypeBase(other.GetNode())
    , Length(*this)	// "Length"
    , Width(*this)	// "Width"
    , Height(*this)	// "Height"
{
}

void CBoundingBoxType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BoundingBoxType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCADCoordinateSystemType::CCADCoordinateSystemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDrawableBaseType(node)
    , CoordinateSystemCore(*this)	// "CoordinateSystemCore"
{
}

CCADCoordinateSystemType::CCADCoordinateSystemType(CCADCoordinateSystemType const& other)
    : ::qif191::t::CDrawableBaseType(other.GetNode())
    , CoordinateSystemCore(*this)	// "CoordinateSystemCore"
{
}

void CCADCoordinateSystemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CADCoordinateSystemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMAccuracyTestBaseType::CCMMAccuracyTestBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCMMAccuracyTestBaseType::CCMMAccuracyTestBaseType(CCMMAccuracyTestBaseType const& other)
    : TypeBase(other.GetNode())
{
}

void CCMMAccuracyTestBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMAccuracyTestBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMAccuracyType::CCMMAccuracyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementDeviceAccuracyBaseType(node)
    , MinTemperature(*this)	// "MinTemperature"
    , MaxTemperature(*this)	// "MaxTemperature"
    , B89Test(*this)	// "B89Test"
    , FPSTest(*this)	// "FPSTest"
    , ISO10360Test(*this)	// "ISO10360Test"
    , PointAccuracyTest(*this)	// "PointAccuracyTest"
{
}

CCMMAccuracyType::CCMMAccuracyType(CCMMAccuracyType const& other)
    : ::qif191::t::CMeasurementDeviceAccuracyBaseType(other.GetNode())
    , MinTemperature(*this)	// "MinTemperature"
    , MaxTemperature(*this)	// "MaxTemperature"
    , B89Test(*this)	// "B89Test"
    , FPSTest(*this)	// "FPSTest"
    , ISO10360Test(*this)	// "ISO10360Test"
    , PointAccuracyTest(*this)	// "PointAccuracyTest"
{
}

void CCMMAccuracyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMAccuracyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMAxisDirectionsType::CCMMAxisDirectionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XAxisDirection(*this)	// "XAxisDirection"
    , YAxisDirection(*this)	// "YAxisDirection"
    , ZAxisDirection(*this)	// "ZAxisDirection"
{
}

CCMMAxisDirectionsType::CCMMAxisDirectionsType(CCMMAxisDirectionsType const& other)
    : TypeBase(other.GetNode())
    , XAxisDirection(*this)	// "XAxisDirection"
    , YAxisDirection(*this)	// "YAxisDirection"
    , ZAxisDirection(*this)	// "ZAxisDirection"
{
}

void CCMMAxisDirectionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMAxisDirectionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMDirectionEnumType::CCMMDirectionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCMMDirectionEnumType::CCMMDirectionEnumType(CCMMDirectionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCMMGeometryEnumType::CCMMGeometryEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCMMGeometryEnumType::CCMMGeometryEnumType(CCMMGeometryEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCMMGeometryType::CCMMGeometryType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CMMGeometryEnum(*this)	// "CMMGeometryEnum"
    , OtherCMMGeometry(*this)	// "OtherCMMGeometry"
{
}

CCMMGeometryType::CCMMGeometryType(CCMMGeometryType const& other)
    : TypeBase(other.GetNode())
    , CMMGeometryEnum(*this)	// "CMMGeometryEnum"
    , OtherCMMGeometry(*this)	// "OtherCMMGeometry"
{
}

void CCMMGeometryType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMGeometryType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMScaleType::CCMMScaleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ScaleMaterial(*this)	// "ScaleMaterial"
    , ScaleCoefficientOfExpansion(*this)	// "ScaleCoefficientOfExpansion"
    , ScaleCoefficientOfExpansionUncertainty(*this)	// "ScaleCoefficientOfExpansionUncertainty"
    , TypeOfScale(*this)	// "TypeOfScale"
    , ScaleResolution(*this)	// "ScaleResolution"
{
}

CCMMScaleType::CCMMScaleType(CCMMScaleType const& other)
    : TypeBase(other.GetNode())
    , ScaleMaterial(*this)	// "ScaleMaterial"
    , ScaleCoefficientOfExpansion(*this)	// "ScaleCoefficientOfExpansion"
    , ScaleCoefficientOfExpansionUncertainty(*this)	// "ScaleCoefficientOfExpansionUncertainty"
    , TypeOfScale(*this)	// "TypeOfScale"
    , ScaleResolution(*this)	// "ScaleResolution"
{
}

void CCMMScaleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMScaleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMScalesType::CCMMScalesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XScale(*this)	// "XScale"
    , YScale(*this)	// "YScale"
    , ZScale(*this)	// "ZScale"
{
}

CCMMScalesType::CCMMScalesType(CCMMScalesType const& other)
    : TypeBase(other.GetNode())
    , XScale(*this)	// "XScale"
    , YScale(*this)	// "YScale"
    , ZScale(*this)	// "ZScale"
{
}

void CCMMScalesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMScalesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMSpeedsType::CCMMSpeedsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxXTraverseSpeed(*this)	// "MaxXTraverseSpeed"
    , MaxYTraverseSpeed(*this)	// "MaxYTraverseSpeed"
    , MaxZTraverseSpeed(*this)	// "MaxZTraverseSpeed"
    , MaxXProbingSpeed(*this)	// "MaxXProbingSpeed"
    , MaxYProbingSpeed(*this)	// "MaxYProbingSpeed"
    , MaxZProbingSpeed(*this)	// "MaxZProbingSpeed"
{
}

CCMMSpeedsType::CCMMSpeedsType(CCMMSpeedsType const& other)
    : TypeBase(other.GetNode())
    , MaxXTraverseSpeed(*this)	// "MaxXTraverseSpeed"
    , MaxYTraverseSpeed(*this)	// "MaxYTraverseSpeed"
    , MaxZTraverseSpeed(*this)	// "MaxZTraverseSpeed"
    , MaxXProbingSpeed(*this)	// "MaxXProbingSpeed"
    , MaxYProbingSpeed(*this)	// "MaxYProbingSpeed"
    , MaxZProbingSpeed(*this)	// "MaxZProbingSpeed"
{
}

void CCMMSpeedsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMSpeedsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMType::CCMMType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProbingDeviceType(node)
    , HomeLocation(*this)	// "HomeLocation"
    , MachineGeometry(*this)	// "MachineGeometry"
    , AxisOrientation(*this)	// "AxisOrientation"
    , CMMScales(*this)	// "CMMScales"
    , MaxWorkpieceHeight(*this)	// "MaxWorkpieceHeight"
    , MaxWorkpieceMass(*this)	// "MaxWorkpieceMass"
    , JoystickSpeeds(*this)	// "JoystickSpeeds"
    , CNCSpeeds(*this)	// "CNCSpeeds"
    , RotaryTable(*this)	// "RotaryTable"
    , NominalAccuracy(*this)	// "NominalAccuracy"
    , ActualAccuracy(*this)	// "ActualAccuracy"
    , CarriageIds(*this)	// "CarriageIds"
    , ToolIds(*this)	// "ToolIds"
{
}

CCMMType::CCMMType(CCMMType const& other)
    : ::qif191::t::CProbingDeviceType(other.GetNode())
    , HomeLocation(*this)	// "HomeLocation"
    , MachineGeometry(*this)	// "MachineGeometry"
    , AxisOrientation(*this)	// "AxisOrientation"
    , CMMScales(*this)	// "CMMScales"
    , MaxWorkpieceHeight(*this)	// "MaxWorkpieceHeight"
    , MaxWorkpieceMass(*this)	// "MaxWorkpieceMass"
    , JoystickSpeeds(*this)	// "JoystickSpeeds"
    , CNCSpeeds(*this)	// "CNCSpeeds"
    , RotaryTable(*this)	// "RotaryTable"
    , NominalAccuracy(*this)	// "NominalAccuracy"
    , ActualAccuracy(*this)	// "ActualAccuracy"
    , CarriageIds(*this)	// "CarriageIds"
    , ToolIds(*this)	// "ToolIds"
{
}

void CCMMType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCalibrationMasterType::CCalibrationMasterType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SerialNumber(*this)	// "SerialNumber"
    , description(*this)	// "description"
{
}

CCalibrationMasterType::CCalibrationMasterType(CCalibrationMasterType const& other)
    : TypeBase(other.GetNode())
    , SerialNumber(*this)	// "SerialNumber"
    , description(*this)	// "description"
{
}

void CCalibrationMasterType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CalibrationMasterType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCalibrationType::CCalibrationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CalibrationMaster(*this)	// "CalibrationMaster"
    , Temperatures(*this)	// "Temperatures"
    , TimeStamp(*this)	// "TimeStamp"
{
}

CCalibrationType::CCalibrationType(CCalibrationType const& other)
    : TypeBase(other.GetNode())
    , CalibrationMaster(*this)	// "CalibrationMaster"
    , Temperatures(*this)	// "Temperatures"
    , TimeStamp(*this)	// "TimeStamp"
{
}

void CCalibrationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CalibrationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCalibrationsType::CCalibrationsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Calibration(*this)	// "Calibration"
{
}

CCalibrationsType::CCalibrationsType(CCalibrationsType const& other)
    : TypeBase(other.GetNode())
    , Calibration(*this)	// "Calibration"
{
}

void CCalibrationsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CalibrationsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCaliperType::CCaliperType(xercesc::DOMNode* const& node)
    : ::qif191::t::CManualDeviceType(node)
    , Resolution(*this)	// "Resolution"
    , Accuracy(*this)	// "Accuracy"
    , CanMeasureInnerD(*this)	// "CanMeasureInnerD"
    , CanMeasureOuterD(*this)	// "CanMeasureOuterD"
    , CanMeasureDepth(*this)	// "CanMeasureDepth"
{
}

CCaliperType::CCaliperType(CCaliperType const& other)
    : ::qif191::t::CManualDeviceType(other.GetNode())
    , Resolution(*this)	// "Resolution"
    , Accuracy(*this)	// "Accuracy"
    , CanMeasureInnerD(*this)	// "CanMeasureInnerD"
    , CanMeasureOuterD(*this)	// "CanMeasureOuterD"
    , CanMeasureDepth(*this)	// "CanMeasureDepth"
{
}

void CCaliperType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CaliperType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCameraBaseType::CCameraBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CViewBaseType(node)
    , ViewPlaneOrigin(*this)	// "ViewPlaneOrigin"
    , Orientation(*this)	// "Orientation"
    , Ratio(*this)	// "Ratio"
    , Near(*this)	// "Near"
    , Far(*this)	// "Far"
    , Height(*this)	// "Height"
{
}

CCameraBaseType::CCameraBaseType(CCameraBaseType const& other)
    : ::qif191::t::CViewBaseType(other.GetNode())
    , ViewPlaneOrigin(*this)	// "ViewPlaneOrigin"
    , Orientation(*this)	// "Orientation"
    , Ratio(*this)	// "Ratio"
    , Near(*this)	// "Near"
    , Far(*this)	// "Far"
    , Height(*this)	// "Height"
{
}

void CCameraBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CameraBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCameraFormEnumType::CCameraFormEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCameraFormEnumType::CCameraFormEnumType(CCameraFormEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCameraType::CCameraType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCameraBaseType(node)
    , Form(*this)	// "@Form"
{
}

CCameraType::CCameraType(CCameraType const& other)
    : ::qif191::t::CCameraBaseType(other.GetNode())
    , Form(*this)	// "@Form"
{
}

void CCameraType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CameraType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCapabilityStudyPlanType::CCapabilityStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(node)
    , CpkThreshold(*this)	// "CpkThreshold"
    , PpkThreshold(*this)	// "PpkThreshold"
{
}

CCapabilityStudyPlanType::CCapabilityStudyPlanType(CCapabilityStudyPlanType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(other.GetNode())
    , CpkThreshold(*this)	// "CpkThreshold"
    , PpkThreshold(*this)	// "PpkThreshold"
{
}

void CCapabilityStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CapabilityStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCapabilityStudyResultsType::CCapabilityStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyResultsBaseType(node)
{
}

CCapabilityStudyResultsType::CCapabilityStudyResultsType(CCapabilityStudyResultsType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyResultsBaseType(other.GetNode())
{
}

void CCapabilityStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CapabilityStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCarriageType::CCarriageType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementResourceBaseType(node)
    , ToolIds(*this)	// "ToolIds"
{
}

CCarriageType::CCarriageType(CCarriageType const& other)
    : ::qif191::t::CMeasurementResourceBaseType(other.GetNode())
    , ToolIds(*this)	// "ToolIds"
{
}

void CCarriageType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CarriageType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCarriagesType::CCarriagesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Carriage(*this)	// "Carriage"
{
}

CCarriagesType::CCarriagesType(CCarriagesType const& other)
    : TypeBase(other.GetNode())
    , Carriage(*this)	// "Carriage"
{
}

void CCarriagesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CarriagesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicActualBaseType::CCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicBaseType(node)
    , Status(*this)	// "Status"
    , CharacteristicItemId(*this)	// "CharacteristicItemId"
    , FeatureActualIds(*this)	// "FeatureActualIds"
    , ActualComponentId(*this)	// "ActualComponentId"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , NotedEventIds(*this)	// "NotedEventIds"
    , NonConformanceDesignator(*this)	// "NonConformanceDesignator"
{
}

CCharacteristicActualBaseType::CCharacteristicActualBaseType(CCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicBaseType(other.GetNode())
    , Status(*this)	// "Status"
    , CharacteristicItemId(*this)	// "CharacteristicItemId"
    , FeatureActualIds(*this)	// "FeatureActualIds"
    , ActualComponentId(*this)	// "ActualComponentId"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , NotedEventIds(*this)	// "NotedEventIds"
    , NonConformanceDesignator(*this)	// "NonConformanceDesignator"
{
}

void CCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicActualsType::CCharacteristicActualsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicActual(*this)	// "CharacteristicActual"
    , AngleBetweenCharacteristicActual(*this)	// "AngleBetweenCharacteristicActual"
    , AngleCharacteristicActual(*this)	// "AngleCharacteristicActual"
    , AngleFromCharacteristicActual(*this)	// "AngleFromCharacteristicActual"
    , AngularCoordinateCharacteristicActual(*this)	// "AngularCoordinateCharacteristicActual"
    , AngularityCharacteristicActual(*this)	// "AngularityCharacteristicActual"
    , ChordCharacteristicActual(*this)	// "ChordCharacteristicActual"
    , CircularRunoutCharacteristicActual(*this)	// "CircularRunoutCharacteristicActual"
    , CircularityCharacteristicActual(*this)	// "CircularityCharacteristicActual"
    , ConcentricityCharacteristicActual(*this)	// "ConcentricityCharacteristicActual"
    , CurveLengthCharacteristicActual(*this)	// "CurveLengthCharacteristicActual"
    , CylindricityCharacteristicActual(*this)	// "CylindricityCharacteristicActual"
    , DepthCharacteristicActual(*this)	// "DepthCharacteristicActual"
    , DiameterCharacteristicActual(*this)	// "DiameterCharacteristicActual"
    , DistanceBetweenCharacteristicActual(*this)	// "DistanceBetweenCharacteristicActual"
    , DistanceFromCharacteristicActual(*this)	// "DistanceFromCharacteristicActual"
    , FlatnessCharacteristicActual(*this)	// "FlatnessCharacteristicActual"
    , HeightCharacteristicActual(*this)	// "HeightCharacteristicActual"
    , LengthCharacteristicActual(*this)	// "LengthCharacteristicActual"
    , LineProfileCharacteristicActual(*this)	// "LineProfileCharacteristicActual"
    , LinearCoordinateCharacteristicActual(*this)	// "LinearCoordinateCharacteristicActual"
    , ParallelismCharacteristicActual(*this)	// "ParallelismCharacteristicActual"
    , PerpendicularityCharacteristicActual(*this)	// "PerpendicularityCharacteristicActual"
    , PointProfileCharacteristicActual(*this)	// "PointProfileCharacteristicActual"
    , PositionCharacteristicActual(*this)	// "PositionCharacteristicActual"
    , RadiusCharacteristicActual(*this)	// "RadiusCharacteristicActual"
    , SquareCharacteristicActual(*this)	// "SquareCharacteristicActual"
    , StraightnessCharacteristicActual(*this)	// "StraightnessCharacteristicActual"
    , SurfaceProfileCharacteristicActual(*this)	// "SurfaceProfileCharacteristicActual"
    , SurfaceProfileNonUniformCharacteristicActual(*this)	// "SurfaceProfileNonUniformCharacteristicActual"
    , SurfaceTextureCharacteristicActual(*this)	// "SurfaceTextureCharacteristicActual"
    , SymmetryCharacteristicActual(*this)	// "SymmetryCharacteristicActual"
    , ThicknessCharacteristicActual(*this)	// "ThicknessCharacteristicActual"
    , ThreadCharacteristicActual(*this)	// "ThreadCharacteristicActual"
    , TotalRunoutCharacteristicActual(*this)	// "TotalRunoutCharacteristicActual"
    , UserDefinedAngularCharacteristicActual(*this)	// "UserDefinedAngularCharacteristicActual"
    , UserDefinedAreaCharacteristicActual(*this)	// "UserDefinedAreaCharacteristicActual"
    , UserDefinedAttributeCharacteristicActual(*this)	// "UserDefinedAttributeCharacteristicActual"
    , UserDefinedForceCharacteristicActual(*this)	// "UserDefinedForceCharacteristicActual"
    , UserDefinedLinearCharacteristicActual(*this)	// "UserDefinedLinearCharacteristicActual"
    , UserDefinedMassCharacteristicActual(*this)	// "UserDefinedMassCharacteristicActual"
    , UserDefinedPressureCharacteristicActual(*this)	// "UserDefinedPressureCharacteristicActual"
    , UserDefinedSpeedCharacteristicActual(*this)	// "UserDefinedSpeedCharacteristicActual"
    , UserDefinedTemperatureCharacteristicActual(*this)	// "UserDefinedTemperatureCharacteristicActual"
    , UserDefinedTimeCharacteristicActual(*this)	// "UserDefinedTimeCharacteristicActual"
    , UserDefinedUnitCharacteristicActual(*this)	// "UserDefinedUnitCharacteristicActual"
    , WidthCharacteristicActual(*this)	// "WidthCharacteristicActual"
{
}

CCharacteristicActualsType::CCharacteristicActualsType(CCharacteristicActualsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicActual(*this)	// "CharacteristicActual"
    , AngleBetweenCharacteristicActual(*this)	// "AngleBetweenCharacteristicActual"
    , AngleCharacteristicActual(*this)	// "AngleCharacteristicActual"
    , AngleFromCharacteristicActual(*this)	// "AngleFromCharacteristicActual"
    , AngularCoordinateCharacteristicActual(*this)	// "AngularCoordinateCharacteristicActual"
    , AngularityCharacteristicActual(*this)	// "AngularityCharacteristicActual"
    , ChordCharacteristicActual(*this)	// "ChordCharacteristicActual"
    , CircularRunoutCharacteristicActual(*this)	// "CircularRunoutCharacteristicActual"
    , CircularityCharacteristicActual(*this)	// "CircularityCharacteristicActual"
    , ConcentricityCharacteristicActual(*this)	// "ConcentricityCharacteristicActual"
    , CurveLengthCharacteristicActual(*this)	// "CurveLengthCharacteristicActual"
    , CylindricityCharacteristicActual(*this)	// "CylindricityCharacteristicActual"
    , DepthCharacteristicActual(*this)	// "DepthCharacteristicActual"
    , DiameterCharacteristicActual(*this)	// "DiameterCharacteristicActual"
    , DistanceBetweenCharacteristicActual(*this)	// "DistanceBetweenCharacteristicActual"
    , DistanceFromCharacteristicActual(*this)	// "DistanceFromCharacteristicActual"
    , FlatnessCharacteristicActual(*this)	// "FlatnessCharacteristicActual"
    , HeightCharacteristicActual(*this)	// "HeightCharacteristicActual"
    , LengthCharacteristicActual(*this)	// "LengthCharacteristicActual"
    , LineProfileCharacteristicActual(*this)	// "LineProfileCharacteristicActual"
    , LinearCoordinateCharacteristicActual(*this)	// "LinearCoordinateCharacteristicActual"
    , ParallelismCharacteristicActual(*this)	// "ParallelismCharacteristicActual"
    , PerpendicularityCharacteristicActual(*this)	// "PerpendicularityCharacteristicActual"
    , PointProfileCharacteristicActual(*this)	// "PointProfileCharacteristicActual"
    , PositionCharacteristicActual(*this)	// "PositionCharacteristicActual"
    , RadiusCharacteristicActual(*this)	// "RadiusCharacteristicActual"
    , SquareCharacteristicActual(*this)	// "SquareCharacteristicActual"
    , StraightnessCharacteristicActual(*this)	// "StraightnessCharacteristicActual"
    , SurfaceProfileCharacteristicActual(*this)	// "SurfaceProfileCharacteristicActual"
    , SurfaceProfileNonUniformCharacteristicActual(*this)	// "SurfaceProfileNonUniformCharacteristicActual"
    , SurfaceTextureCharacteristicActual(*this)	// "SurfaceTextureCharacteristicActual"
    , SymmetryCharacteristicActual(*this)	// "SymmetryCharacteristicActual"
    , ThicknessCharacteristicActual(*this)	// "ThicknessCharacteristicActual"
    , ThreadCharacteristicActual(*this)	// "ThreadCharacteristicActual"
    , TotalRunoutCharacteristicActual(*this)	// "TotalRunoutCharacteristicActual"
    , UserDefinedAngularCharacteristicActual(*this)	// "UserDefinedAngularCharacteristicActual"
    , UserDefinedAreaCharacteristicActual(*this)	// "UserDefinedAreaCharacteristicActual"
    , UserDefinedAttributeCharacteristicActual(*this)	// "UserDefinedAttributeCharacteristicActual"
    , UserDefinedForceCharacteristicActual(*this)	// "UserDefinedForceCharacteristicActual"
    , UserDefinedLinearCharacteristicActual(*this)	// "UserDefinedLinearCharacteristicActual"
    , UserDefinedMassCharacteristicActual(*this)	// "UserDefinedMassCharacteristicActual"
    , UserDefinedPressureCharacteristicActual(*this)	// "UserDefinedPressureCharacteristicActual"
    , UserDefinedSpeedCharacteristicActual(*this)	// "UserDefinedSpeedCharacteristicActual"
    , UserDefinedTemperatureCharacteristicActual(*this)	// "UserDefinedTemperatureCharacteristicActual"
    , UserDefinedTimeCharacteristicActual(*this)	// "UserDefinedTimeCharacteristicActual"
    , UserDefinedUnitCharacteristicActual(*this)	// "UserDefinedUnitCharacteristicActual"
    , WidthCharacteristicActual(*this)	// "WidthCharacteristicActual"
{
}

void CCharacteristicActualsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicActualsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicAspectsListsType::CCharacteristicAspectsListsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FormalStandard(*this)	// "FormalStandard"
    , CharacteristicDefinitions(*this)	// "CharacteristicDefinitions"
    , DefaultCharacteristicDefinitions(*this)	// "DefaultCharacteristicDefinitions"
    , DefaultToleranceDefinitions(*this)	// "DefaultToleranceDefinitions"
    , CharacteristicNominals(*this)	// "CharacteristicNominals"
    , CharacteristicItems(*this)	// "CharacteristicItems"
    , CharacteristicGroups(*this)	// "CharacteristicGroups"
{
}

CCharacteristicAspectsListsType::CCharacteristicAspectsListsType(CCharacteristicAspectsListsType const& other)
    : TypeBase(other.GetNode())
    , FormalStandard(*this)	// "FormalStandard"
    , CharacteristicDefinitions(*this)	// "CharacteristicDefinitions"
    , DefaultCharacteristicDefinitions(*this)	// "DefaultCharacteristicDefinitions"
    , DefaultToleranceDefinitions(*this)	// "DefaultToleranceDefinitions"
    , CharacteristicNominals(*this)	// "CharacteristicNominals"
    , CharacteristicItems(*this)	// "CharacteristicItems"
    , CharacteristicGroups(*this)	// "CharacteristicGroups"
{
}

void CCharacteristicAspectsListsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicAspectsListsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicBaseType::CCharacteristicBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
{
}

CCharacteristicBaseType::CCharacteristicBaseType(CCharacteristicBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
{
}

void CCharacteristicBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicCircularZoneLimitType::CCharacteristicCircularZoneLimitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCircleType(node)
{
}

CCharacteristicCircularZoneLimitType::CCharacteristicCircularZoneLimitType(CCharacteristicCircularZoneLimitType const& other)
    : ::qif191::t::CCircleType(other.GetNode())
{
}

void CCharacteristicCircularZoneLimitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicCircularZoneLimitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicDefinitionBaseType::CCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicBaseType(node)
    , Name(*this)	// "Name"
    , KeyCharacteristic(*this)	// "KeyCharacteristic"
    , FreeState(*this)	// "FreeState"
    , StatisticalCharacteristic(*this)	// "StatisticalCharacteristic"
    , CommonZone(*this)	// "CommonZone"
    , UnitedFeature(*this)	// "UnitedFeature"
    , SeparateZone(*this)	// "SeparateZone"
{
}

CCharacteristicDefinitionBaseType::CCharacteristicDefinitionBaseType(CCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicBaseType(other.GetNode())
    , Name(*this)	// "Name"
    , KeyCharacteristic(*this)	// "KeyCharacteristic"
    , FreeState(*this)	// "FreeState"
    , StatisticalCharacteristic(*this)	// "StatisticalCharacteristic"
    , CommonZone(*this)	// "CommonZone"
    , UnitedFeature(*this)	// "UnitedFeature"
    , SeparateZone(*this)	// "SeparateZone"
{
}

void CCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicDefinitionsType::CCharacteristicDefinitionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicDefinition(*this)	// "CharacteristicDefinition"
    , AngleBetweenCharacteristicDefinition(*this)	// "AngleBetweenCharacteristicDefinition"
    , AngleCharacteristicDefinition(*this)	// "AngleCharacteristicDefinition"
    , AngleFromCharacteristicDefinition(*this)	// "AngleFromCharacteristicDefinition"
    , AngularCoordinateCharacteristicDefinition(*this)	// "AngularCoordinateCharacteristicDefinition"
    , AngularityCharacteristicDefinition(*this)	// "AngularityCharacteristicDefinition"
    , ChordCharacteristicDefinition(*this)	// "ChordCharacteristicDefinition"
    , CircularRunoutCharacteristicDefinition(*this)	// "CircularRunoutCharacteristicDefinition"
    , CircularityCharacteristicDefinition(*this)	// "CircularityCharacteristicDefinition"
    , ConcentricityCharacteristicDefinition(*this)	// "ConcentricityCharacteristicDefinition"
    , CurveLengthCharacteristicDefinition(*this)	// "CurveLengthCharacteristicDefinition"
    , CylindricityCharacteristicDefinition(*this)	// "CylindricityCharacteristicDefinition"
    , DepthCharacteristicDefinition(*this)	// "DepthCharacteristicDefinition"
    , DiameterCharacteristicDefinition(*this)	// "DiameterCharacteristicDefinition"
    , DistanceBetweenCharacteristicDefinition(*this)	// "DistanceBetweenCharacteristicDefinition"
    , DistanceFromCharacteristicDefinition(*this)	// "DistanceFromCharacteristicDefinition"
    , FlatnessCharacteristicDefinition(*this)	// "FlatnessCharacteristicDefinition"
    , HeightCharacteristicDefinition(*this)	// "HeightCharacteristicDefinition"
    , LengthCharacteristicDefinition(*this)	// "LengthCharacteristicDefinition"
    , LineProfileCharacteristicDefinition(*this)	// "LineProfileCharacteristicDefinition"
    , LinearCoordinateCharacteristicDefinition(*this)	// "LinearCoordinateCharacteristicDefinition"
    , ParallelismCharacteristicDefinition(*this)	// "ParallelismCharacteristicDefinition"
    , PerpendicularityCharacteristicDefinition(*this)	// "PerpendicularityCharacteristicDefinition"
    , PointProfileCharacteristicDefinition(*this)	// "PointProfileCharacteristicDefinition"
    , PositionCharacteristicDefinition(*this)	// "PositionCharacteristicDefinition"
    , RadiusCharacteristicDefinition(*this)	// "RadiusCharacteristicDefinition"
    , SquareCharacteristicDefinition(*this)	// "SquareCharacteristicDefinition"
    , StraightnessCharacteristicDefinition(*this)	// "StraightnessCharacteristicDefinition"
    , SurfaceProfileCharacteristicDefinition(*this)	// "SurfaceProfileCharacteristicDefinition"
    , SurfaceProfileNonUniformCharacteristicDefinition(*this)	// "SurfaceProfileNonUniformCharacteristicDefinition"
    , SurfaceTextureCharacteristicDefinition(*this)	// "SurfaceTextureCharacteristicDefinition"
    , SymmetryCharacteristicDefinition(*this)	// "SymmetryCharacteristicDefinition"
    , ThicknessCharacteristicDefinition(*this)	// "ThicknessCharacteristicDefinition"
    , ThreadCharacteristicDefinition(*this)	// "ThreadCharacteristicDefinition"
    , TotalRunoutCharacteristicDefinition(*this)	// "TotalRunoutCharacteristicDefinition"
    , UserDefinedAngularCharacteristicDefinition(*this)	// "UserDefinedAngularCharacteristicDefinition"
    , UserDefinedAreaCharacteristicDefinition(*this)	// "UserDefinedAreaCharacteristicDefinition"
    , UserDefinedAttributeCharacteristicDefinition(*this)	// "UserDefinedAttributeCharacteristicDefinition"
    , UserDefinedForceCharacteristicDefinition(*this)	// "UserDefinedForceCharacteristicDefinition"
    , UserDefinedLinearCharacteristicDefinition(*this)	// "UserDefinedLinearCharacteristicDefinition"
    , UserDefinedMassCharacteristicDefinition(*this)	// "UserDefinedMassCharacteristicDefinition"
    , UserDefinedPressureCharacteristicDefinition(*this)	// "UserDefinedPressureCharacteristicDefinition"
    , UserDefinedSpeedCharacteristicDefinition(*this)	// "UserDefinedSpeedCharacteristicDefinition"
    , UserDefinedTemperatureCharacteristicDefinition(*this)	// "UserDefinedTemperatureCharacteristicDefinition"
    , UserDefinedTimeCharacteristicDefinition(*this)	// "UserDefinedTimeCharacteristicDefinition"
    , UserDefinedUnitCharacteristicDefinition(*this)	// "UserDefinedUnitCharacteristicDefinition"
    , WidthCharacteristicDefinition(*this)	// "WidthCharacteristicDefinition"
{
}

CCharacteristicDefinitionsType::CCharacteristicDefinitionsType(CCharacteristicDefinitionsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicDefinition(*this)	// "CharacteristicDefinition"
    , AngleBetweenCharacteristicDefinition(*this)	// "AngleBetweenCharacteristicDefinition"
    , AngleCharacteristicDefinition(*this)	// "AngleCharacteristicDefinition"
    , AngleFromCharacteristicDefinition(*this)	// "AngleFromCharacteristicDefinition"
    , AngularCoordinateCharacteristicDefinition(*this)	// "AngularCoordinateCharacteristicDefinition"
    , AngularityCharacteristicDefinition(*this)	// "AngularityCharacteristicDefinition"
    , ChordCharacteristicDefinition(*this)	// "ChordCharacteristicDefinition"
    , CircularRunoutCharacteristicDefinition(*this)	// "CircularRunoutCharacteristicDefinition"
    , CircularityCharacteristicDefinition(*this)	// "CircularityCharacteristicDefinition"
    , ConcentricityCharacteristicDefinition(*this)	// "ConcentricityCharacteristicDefinition"
    , CurveLengthCharacteristicDefinition(*this)	// "CurveLengthCharacteristicDefinition"
    , CylindricityCharacteristicDefinition(*this)	// "CylindricityCharacteristicDefinition"
    , DepthCharacteristicDefinition(*this)	// "DepthCharacteristicDefinition"
    , DiameterCharacteristicDefinition(*this)	// "DiameterCharacteristicDefinition"
    , DistanceBetweenCharacteristicDefinition(*this)	// "DistanceBetweenCharacteristicDefinition"
    , DistanceFromCharacteristicDefinition(*this)	// "DistanceFromCharacteristicDefinition"
    , FlatnessCharacteristicDefinition(*this)	// "FlatnessCharacteristicDefinition"
    , HeightCharacteristicDefinition(*this)	// "HeightCharacteristicDefinition"
    , LengthCharacteristicDefinition(*this)	// "LengthCharacteristicDefinition"
    , LineProfileCharacteristicDefinition(*this)	// "LineProfileCharacteristicDefinition"
    , LinearCoordinateCharacteristicDefinition(*this)	// "LinearCoordinateCharacteristicDefinition"
    , ParallelismCharacteristicDefinition(*this)	// "ParallelismCharacteristicDefinition"
    , PerpendicularityCharacteristicDefinition(*this)	// "PerpendicularityCharacteristicDefinition"
    , PointProfileCharacteristicDefinition(*this)	// "PointProfileCharacteristicDefinition"
    , PositionCharacteristicDefinition(*this)	// "PositionCharacteristicDefinition"
    , RadiusCharacteristicDefinition(*this)	// "RadiusCharacteristicDefinition"
    , SquareCharacteristicDefinition(*this)	// "SquareCharacteristicDefinition"
    , StraightnessCharacteristicDefinition(*this)	// "StraightnessCharacteristicDefinition"
    , SurfaceProfileCharacteristicDefinition(*this)	// "SurfaceProfileCharacteristicDefinition"
    , SurfaceProfileNonUniformCharacteristicDefinition(*this)	// "SurfaceProfileNonUniformCharacteristicDefinition"
    , SurfaceTextureCharacteristicDefinition(*this)	// "SurfaceTextureCharacteristicDefinition"
    , SymmetryCharacteristicDefinition(*this)	// "SymmetryCharacteristicDefinition"
    , ThicknessCharacteristicDefinition(*this)	// "ThicknessCharacteristicDefinition"
    , ThreadCharacteristicDefinition(*this)	// "ThreadCharacteristicDefinition"
    , TotalRunoutCharacteristicDefinition(*this)	// "TotalRunoutCharacteristicDefinition"
    , UserDefinedAngularCharacteristicDefinition(*this)	// "UserDefinedAngularCharacteristicDefinition"
    , UserDefinedAreaCharacteristicDefinition(*this)	// "UserDefinedAreaCharacteristicDefinition"
    , UserDefinedAttributeCharacteristicDefinition(*this)	// "UserDefinedAttributeCharacteristicDefinition"
    , UserDefinedForceCharacteristicDefinition(*this)	// "UserDefinedForceCharacteristicDefinition"
    , UserDefinedLinearCharacteristicDefinition(*this)	// "UserDefinedLinearCharacteristicDefinition"
    , UserDefinedMassCharacteristicDefinition(*this)	// "UserDefinedMassCharacteristicDefinition"
    , UserDefinedPressureCharacteristicDefinition(*this)	// "UserDefinedPressureCharacteristicDefinition"
    , UserDefinedSpeedCharacteristicDefinition(*this)	// "UserDefinedSpeedCharacteristicDefinition"
    , UserDefinedTemperatureCharacteristicDefinition(*this)	// "UserDefinedTemperatureCharacteristicDefinition"
    , UserDefinedTimeCharacteristicDefinition(*this)	// "UserDefinedTimeCharacteristicDefinition"
    , UserDefinedUnitCharacteristicDefinition(*this)	// "UserDefinedUnitCharacteristicDefinition"
    , WidthCharacteristicDefinition(*this)	// "WidthCharacteristicDefinition"
{
}

void CCharacteristicDefinitionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicDefinitionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicDirectionalZoneLimitType::CCharacteristicDirectionalZoneLimitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FromPoint(*this)	// "FromPoint"
    , ToPoint(*this)	// "ToPoint"
    , StartDirection(*this)	// "StartDirection"
    , PlaneNormal(*this)	// "PlaneNormal"
{
}

CCharacteristicDirectionalZoneLimitType::CCharacteristicDirectionalZoneLimitType(CCharacteristicDirectionalZoneLimitType const& other)
    : TypeBase(other.GetNode())
    , FromPoint(*this)	// "FromPoint"
    , ToPoint(*this)	// "ToPoint"
    , StartDirection(*this)	// "StartDirection"
    , PlaneNormal(*this)	// "PlaneNormal"
{
}

void CCharacteristicDirectionalZoneLimitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicDirectionalZoneLimitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicGroupStatusType::CCharacteristicGroupStatusType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Status(*this)	// "Status"
    , GroupId(*this)	// "GroupId"
{
}

CCharacteristicGroupStatusType::CCharacteristicGroupStatusType(CCharacteristicGroupStatusType const& other)
    : TypeBase(other.GetNode())
    , Status(*this)	// "Status"
    , GroupId(*this)	// "GroupId"
{
}

void CCharacteristicGroupStatusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicGroupStatusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicGroupStatusesType::CCharacteristicGroupStatusesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicGroupStatus(*this)	// "CharacteristicGroupStatus"
{
}

CCharacteristicGroupStatusesType::CCharacteristicGroupStatusesType(CCharacteristicGroupStatusesType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicGroupStatus(*this)	// "CharacteristicGroupStatus"
{
}

void CCharacteristicGroupStatusesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicGroupStatusesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicGroupType::CCharacteristicGroupType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
    , Description(*this)	// "Description"
    , Name(*this)	// "Name"
    , TransformId(*this)	// "TransformId"
    , Units(*this)	// "Units"
    , Scale(*this)	// "Scale"
{
}

CCharacteristicGroupType::CCharacteristicGroupType(CCharacteristicGroupType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
    , Description(*this)	// "Description"
    , Name(*this)	// "Name"
    , TransformId(*this)	// "TransformId"
    , Units(*this)	// "Units"
    , Scale(*this)	// "Scale"
{
}

void CCharacteristicGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicGroupsType::CCharacteristicGroupsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicGroup(*this)	// "CharacteristicGroup"
    , CharacteristicManufacturingProcessGroup(*this)	// "CharacteristicManufacturingProcessGroup"
    , CharacteristicSimultaneityGroup(*this)	// "CharacteristicSimultaneityGroup"
{
}

CCharacteristicGroupsType::CCharacteristicGroupsType(CCharacteristicGroupsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicGroup(*this)	// "CharacteristicGroup"
    , CharacteristicManufacturingProcessGroup(*this)	// "CharacteristicManufacturingProcessGroup"
    , CharacteristicSimultaneityGroup(*this)	// "CharacteristicSimultaneityGroup"
{
}

void CCharacteristicGroupsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicGroupsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicIsType::CCharacteristicIsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , val(*this)	// "@val"
{
}

CCharacteristicIsType::CCharacteristicIsType(CCharacteristicIsType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , val(*this)	// "@val"
{
}

void CCharacteristicIsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicIsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicItemBaseType::CCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicBaseType(node)
    , Name(*this)	// "Name"
    , QPId(*this)	// "QPId"
    , KeyCharacteristic(*this)	// "KeyCharacteristic"
    , FeatureItemIds(*this)	// "FeatureItemIds"
    , NotableEventIds(*this)	// "NotableEventIds"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , CharacteristicNominalId(*this)	// "CharacteristicNominalId"
    , LocationOnDrawing(*this)	// "LocationOnDrawing"
{
}

CCharacteristicItemBaseType::CCharacteristicItemBaseType(CCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicBaseType(other.GetNode())
    , Name(*this)	// "Name"
    , QPId(*this)	// "QPId"
    , KeyCharacteristic(*this)	// "KeyCharacteristic"
    , FeatureItemIds(*this)	// "FeatureItemIds"
    , NotableEventIds(*this)	// "NotableEventIds"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , CharacteristicNominalId(*this)	// "CharacteristicNominalId"
    , LocationOnDrawing(*this)	// "LocationOnDrawing"
{
}

void CCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicItemsType::CCharacteristicItemsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicItem(*this)	// "CharacteristicItem"
    , AngleBetweenCharacteristicItem(*this)	// "AngleBetweenCharacteristicItem"
    , AngleCharacteristicItem(*this)	// "AngleCharacteristicItem"
    , AngleFromCharacteristicItem(*this)	// "AngleFromCharacteristicItem"
    , AngularCoordinateCharacteristicItem(*this)	// "AngularCoordinateCharacteristicItem"
    , AngularityCharacteristicItem(*this)	// "AngularityCharacteristicItem"
    , ChordCharacteristicItem(*this)	// "ChordCharacteristicItem"
    , CircularRunoutCharacteristicItem(*this)	// "CircularRunoutCharacteristicItem"
    , CircularityCharacteristicItem(*this)	// "CircularityCharacteristicItem"
    , ConcentricityCharacteristicItem(*this)	// "ConcentricityCharacteristicItem"
    , CurveLengthCharacteristicItem(*this)	// "CurveLengthCharacteristicItem"
    , CylindricityCharacteristicItem(*this)	// "CylindricityCharacteristicItem"
    , DepthCharacteristicItem(*this)	// "DepthCharacteristicItem"
    , DiameterCharacteristicItem(*this)	// "DiameterCharacteristicItem"
    , DistanceBetweenCharacteristicItem(*this)	// "DistanceBetweenCharacteristicItem"
    , DistanceFromCharacteristicItem(*this)	// "DistanceFromCharacteristicItem"
    , FlatnessCharacteristicItem(*this)	// "FlatnessCharacteristicItem"
    , HeightCharacteristicItem(*this)	// "HeightCharacteristicItem"
    , LengthCharacteristicItem(*this)	// "LengthCharacteristicItem"
    , LineProfileCharacteristicItem(*this)	// "LineProfileCharacteristicItem"
    , LinearCoordinateCharacteristicItem(*this)	// "LinearCoordinateCharacteristicItem"
    , ParallelismCharacteristicItem(*this)	// "ParallelismCharacteristicItem"
    , PerpendicularityCharacteristicItem(*this)	// "PerpendicularityCharacteristicItem"
    , PointProfileCharacteristicItem(*this)	// "PointProfileCharacteristicItem"
    , PositionCharacteristicItem(*this)	// "PositionCharacteristicItem"
    , RadiusCharacteristicItem(*this)	// "RadiusCharacteristicItem"
    , SquareCharacteristicItem(*this)	// "SquareCharacteristicItem"
    , StraightnessCharacteristicItem(*this)	// "StraightnessCharacteristicItem"
    , SurfaceProfileCharacteristicItem(*this)	// "SurfaceProfileCharacteristicItem"
    , SurfaceProfileNonUniformCharacteristicItem(*this)	// "SurfaceProfileNonUniformCharacteristicItem"
    , SurfaceTextureCharacteristicItem(*this)	// "SurfaceTextureCharacteristicItem"
    , SymmetryCharacteristicItem(*this)	// "SymmetryCharacteristicItem"
    , ThicknessCharacteristicItem(*this)	// "ThicknessCharacteristicItem"
    , ThreadCharacteristicItem(*this)	// "ThreadCharacteristicItem"
    , TotalRunoutCharacteristicItem(*this)	// "TotalRunoutCharacteristicItem"
    , UserDefinedAngularCharacteristicItem(*this)	// "UserDefinedAngularCharacteristicItem"
    , UserDefinedAreaCharacteristicItem(*this)	// "UserDefinedAreaCharacteristicItem"
    , UserDefinedAttributeCharacteristicItem(*this)	// "UserDefinedAttributeCharacteristicItem"
    , UserDefinedForceCharacteristicItem(*this)	// "UserDefinedForceCharacteristicItem"
    , UserDefinedLinearCharacteristicItem(*this)	// "UserDefinedLinearCharacteristicItem"
    , UserDefinedMassCharacteristicItem(*this)	// "UserDefinedMassCharacteristicItem"
    , UserDefinedPressureCharacteristicItem(*this)	// "UserDefinedPressureCharacteristicItem"
    , UserDefinedSpeedCharacteristicItem(*this)	// "UserDefinedSpeedCharacteristicItem"
    , UserDefinedTemperatureCharacteristicItem(*this)	// "UserDefinedTemperatureCharacteristicItem"
    , UserDefinedTimeCharacteristicItem(*this)	// "UserDefinedTimeCharacteristicItem"
    , UserDefinedUnitCharacteristicItem(*this)	// "UserDefinedUnitCharacteristicItem"
    , WidthCharacteristicItem(*this)	// "WidthCharacteristicItem"
{
}

CCharacteristicItemsType::CCharacteristicItemsType(CCharacteristicItemsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicItem(*this)	// "CharacteristicItem"
    , AngleBetweenCharacteristicItem(*this)	// "AngleBetweenCharacteristicItem"
    , AngleCharacteristicItem(*this)	// "AngleCharacteristicItem"
    , AngleFromCharacteristicItem(*this)	// "AngleFromCharacteristicItem"
    , AngularCoordinateCharacteristicItem(*this)	// "AngularCoordinateCharacteristicItem"
    , AngularityCharacteristicItem(*this)	// "AngularityCharacteristicItem"
    , ChordCharacteristicItem(*this)	// "ChordCharacteristicItem"
    , CircularRunoutCharacteristicItem(*this)	// "CircularRunoutCharacteristicItem"
    , CircularityCharacteristicItem(*this)	// "CircularityCharacteristicItem"
    , ConcentricityCharacteristicItem(*this)	// "ConcentricityCharacteristicItem"
    , CurveLengthCharacteristicItem(*this)	// "CurveLengthCharacteristicItem"
    , CylindricityCharacteristicItem(*this)	// "CylindricityCharacteristicItem"
    , DepthCharacteristicItem(*this)	// "DepthCharacteristicItem"
    , DiameterCharacteristicItem(*this)	// "DiameterCharacteristicItem"
    , DistanceBetweenCharacteristicItem(*this)	// "DistanceBetweenCharacteristicItem"
    , DistanceFromCharacteristicItem(*this)	// "DistanceFromCharacteristicItem"
    , FlatnessCharacteristicItem(*this)	// "FlatnessCharacteristicItem"
    , HeightCharacteristicItem(*this)	// "HeightCharacteristicItem"
    , LengthCharacteristicItem(*this)	// "LengthCharacteristicItem"
    , LineProfileCharacteristicItem(*this)	// "LineProfileCharacteristicItem"
    , LinearCoordinateCharacteristicItem(*this)	// "LinearCoordinateCharacteristicItem"
    , ParallelismCharacteristicItem(*this)	// "ParallelismCharacteristicItem"
    , PerpendicularityCharacteristicItem(*this)	// "PerpendicularityCharacteristicItem"
    , PointProfileCharacteristicItem(*this)	// "PointProfileCharacteristicItem"
    , PositionCharacteristicItem(*this)	// "PositionCharacteristicItem"
    , RadiusCharacteristicItem(*this)	// "RadiusCharacteristicItem"
    , SquareCharacteristicItem(*this)	// "SquareCharacteristicItem"
    , StraightnessCharacteristicItem(*this)	// "StraightnessCharacteristicItem"
    , SurfaceProfileCharacteristicItem(*this)	// "SurfaceProfileCharacteristicItem"
    , SurfaceProfileNonUniformCharacteristicItem(*this)	// "SurfaceProfileNonUniformCharacteristicItem"
    , SurfaceTextureCharacteristicItem(*this)	// "SurfaceTextureCharacteristicItem"
    , SymmetryCharacteristicItem(*this)	// "SymmetryCharacteristicItem"
    , ThicknessCharacteristicItem(*this)	// "ThicknessCharacteristicItem"
    , ThreadCharacteristicItem(*this)	// "ThreadCharacteristicItem"
    , TotalRunoutCharacteristicItem(*this)	// "TotalRunoutCharacteristicItem"
    , UserDefinedAngularCharacteristicItem(*this)	// "UserDefinedAngularCharacteristicItem"
    , UserDefinedAreaCharacteristicItem(*this)	// "UserDefinedAreaCharacteristicItem"
    , UserDefinedAttributeCharacteristicItem(*this)	// "UserDefinedAttributeCharacteristicItem"
    , UserDefinedForceCharacteristicItem(*this)	// "UserDefinedForceCharacteristicItem"
    , UserDefinedLinearCharacteristicItem(*this)	// "UserDefinedLinearCharacteristicItem"
    , UserDefinedMassCharacteristicItem(*this)	// "UserDefinedMassCharacteristicItem"
    , UserDefinedPressureCharacteristicItem(*this)	// "UserDefinedPressureCharacteristicItem"
    , UserDefinedSpeedCharacteristicItem(*this)	// "UserDefinedSpeedCharacteristicItem"
    , UserDefinedTemperatureCharacteristicItem(*this)	// "UserDefinedTemperatureCharacteristicItem"
    , UserDefinedTimeCharacteristicItem(*this)	// "UserDefinedTimeCharacteristicItem"
    , UserDefinedUnitCharacteristicItem(*this)	// "UserDefinedUnitCharacteristicItem"
    , WidthCharacteristicItem(*this)	// "WidthCharacteristicItem"
{
}

void CCharacteristicItemsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicItemsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicManufacturingProcessGroupType::CCharacteristicManufacturingProcessGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicGroupType(node)
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
{
}

CCharacteristicManufacturingProcessGroupType::CCharacteristicManufacturingProcessGroupType(CCharacteristicManufacturingProcessGroupType const& other)
    : ::qif191::t::CCharacteristicGroupType(other.GetNode())
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
{
}

void CCharacteristicManufacturingProcessGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicManufacturingProcessGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicNominalBaseType::CCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicBaseType(node)
    , CharacteristicDefinitionId(*this)	// "CharacteristicDefinitionId"
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
    , EntityInternalIds(*this)	// "EntityInternalIds"
    , EntityExternalIds(*this)	// "EntityExternalIds"
    , KeyCharacteristic(*this)	// "KeyCharacteristic"
{
}

CCharacteristicNominalBaseType::CCharacteristicNominalBaseType(CCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicBaseType(other.GetNode())
    , CharacteristicDefinitionId(*this)	// "CharacteristicDefinitionId"
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
    , EntityInternalIds(*this)	// "EntityInternalIds"
    , EntityExternalIds(*this)	// "EntityExternalIds"
    , KeyCharacteristic(*this)	// "KeyCharacteristic"
{
}

void CCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicNominalsType::CCharacteristicNominalsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicNominal(*this)	// "CharacteristicNominal"
    , AngleBetweenCharacteristicNominal(*this)	// "AngleBetweenCharacteristicNominal"
    , AngleCharacteristicNominal(*this)	// "AngleCharacteristicNominal"
    , AngleFromCharacteristicNominal(*this)	// "AngleFromCharacteristicNominal"
    , AngularCoordinateCharacteristicNominal(*this)	// "AngularCoordinateCharacteristicNominal"
    , AngularityCharacteristicNominal(*this)	// "AngularityCharacteristicNominal"
    , ChordCharacteristicNominal(*this)	// "ChordCharacteristicNominal"
    , CircularRunoutCharacteristicNominal(*this)	// "CircularRunoutCharacteristicNominal"
    , CircularityCharacteristicNominal(*this)	// "CircularityCharacteristicNominal"
    , ConcentricityCharacteristicNominal(*this)	// "ConcentricityCharacteristicNominal"
    , CurveLengthCharacteristicNominal(*this)	// "CurveLengthCharacteristicNominal"
    , CylindricityCharacteristicNominal(*this)	// "CylindricityCharacteristicNominal"
    , DepthCharacteristicNominal(*this)	// "DepthCharacteristicNominal"
    , DiameterCharacteristicNominal(*this)	// "DiameterCharacteristicNominal"
    , DistanceBetweenCharacteristicNominal(*this)	// "DistanceBetweenCharacteristicNominal"
    , DistanceFromCharacteristicNominal(*this)	// "DistanceFromCharacteristicNominal"
    , FlatnessCharacteristicNominal(*this)	// "FlatnessCharacteristicNominal"
    , HeightCharacteristicNominal(*this)	// "HeightCharacteristicNominal"
    , LengthCharacteristicNominal(*this)	// "LengthCharacteristicNominal"
    , LineProfileCharacteristicNominal(*this)	// "LineProfileCharacteristicNominal"
    , LinearCoordinateCharacteristicNominal(*this)	// "LinearCoordinateCharacteristicNominal"
    , ParallelismCharacteristicNominal(*this)	// "ParallelismCharacteristicNominal"
    , PerpendicularityCharacteristicNominal(*this)	// "PerpendicularityCharacteristicNominal"
    , PointProfileCharacteristicNominal(*this)	// "PointProfileCharacteristicNominal"
    , PositionCharacteristicNominal(*this)	// "PositionCharacteristicNominal"
    , RadiusCharacteristicNominal(*this)	// "RadiusCharacteristicNominal"
    , SquareCharacteristicNominal(*this)	// "SquareCharacteristicNominal"
    , StraightnessCharacteristicNominal(*this)	// "StraightnessCharacteristicNominal"
    , SurfaceProfileCharacteristicNominal(*this)	// "SurfaceProfileCharacteristicNominal"
    , SurfaceProfileNonUniformCharacteristicNominal(*this)	// "SurfaceProfileNonUniformCharacteristicNominal"
    , SurfaceTextureCharacteristicNominal(*this)	// "SurfaceTextureCharacteristicNominal"
    , SymmetryCharacteristicNominal(*this)	// "SymmetryCharacteristicNominal"
    , ThicknessCharacteristicNominal(*this)	// "ThicknessCharacteristicNominal"
    , ThreadCharacteristicNominal(*this)	// "ThreadCharacteristicNominal"
    , TotalRunoutCharacteristicNominal(*this)	// "TotalRunoutCharacteristicNominal"
    , UserDefinedAngularCharacteristicNominal(*this)	// "UserDefinedAngularCharacteristicNominal"
    , UserDefinedAreaCharacteristicNominal(*this)	// "UserDefinedAreaCharacteristicNominal"
    , UserDefinedAttributeCharacteristicNominal(*this)	// "UserDefinedAttributeCharacteristicNominal"
    , UserDefinedForceCharacteristicNominal(*this)	// "UserDefinedForceCharacteristicNominal"
    , UserDefinedLinearCharacteristicNominal(*this)	// "UserDefinedLinearCharacteristicNominal"
    , UserDefinedMassCharacteristicNominal(*this)	// "UserDefinedMassCharacteristicNominal"
    , UserDefinedPressureCharacteristicNominal(*this)	// "UserDefinedPressureCharacteristicNominal"
    , UserDefinedSpeedCharacteristicNominal(*this)	// "UserDefinedSpeedCharacteristicNominal"
    , UserDefinedTemperatureCharacteristicNominal(*this)	// "UserDefinedTemperatureCharacteristicNominal"
    , UserDefinedTimeCharacteristicNominal(*this)	// "UserDefinedTimeCharacteristicNominal"
    , UserDefinedUnitCharacteristicNominal(*this)	// "UserDefinedUnitCharacteristicNominal"
    , WidthCharacteristicNominal(*this)	// "WidthCharacteristicNominal"
{
}

CCharacteristicNominalsType::CCharacteristicNominalsType(CCharacteristicNominalsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicNominal(*this)	// "CharacteristicNominal"
    , AngleBetweenCharacteristicNominal(*this)	// "AngleBetweenCharacteristicNominal"
    , AngleCharacteristicNominal(*this)	// "AngleCharacteristicNominal"
    , AngleFromCharacteristicNominal(*this)	// "AngleFromCharacteristicNominal"
    , AngularCoordinateCharacteristicNominal(*this)	// "AngularCoordinateCharacteristicNominal"
    , AngularityCharacteristicNominal(*this)	// "AngularityCharacteristicNominal"
    , ChordCharacteristicNominal(*this)	// "ChordCharacteristicNominal"
    , CircularRunoutCharacteristicNominal(*this)	// "CircularRunoutCharacteristicNominal"
    , CircularityCharacteristicNominal(*this)	// "CircularityCharacteristicNominal"
    , ConcentricityCharacteristicNominal(*this)	// "ConcentricityCharacteristicNominal"
    , CurveLengthCharacteristicNominal(*this)	// "CurveLengthCharacteristicNominal"
    , CylindricityCharacteristicNominal(*this)	// "CylindricityCharacteristicNominal"
    , DepthCharacteristicNominal(*this)	// "DepthCharacteristicNominal"
    , DiameterCharacteristicNominal(*this)	// "DiameterCharacteristicNominal"
    , DistanceBetweenCharacteristicNominal(*this)	// "DistanceBetweenCharacteristicNominal"
    , DistanceFromCharacteristicNominal(*this)	// "DistanceFromCharacteristicNominal"
    , FlatnessCharacteristicNominal(*this)	// "FlatnessCharacteristicNominal"
    , HeightCharacteristicNominal(*this)	// "HeightCharacteristicNominal"
    , LengthCharacteristicNominal(*this)	// "LengthCharacteristicNominal"
    , LineProfileCharacteristicNominal(*this)	// "LineProfileCharacteristicNominal"
    , LinearCoordinateCharacteristicNominal(*this)	// "LinearCoordinateCharacteristicNominal"
    , ParallelismCharacteristicNominal(*this)	// "ParallelismCharacteristicNominal"
    , PerpendicularityCharacteristicNominal(*this)	// "PerpendicularityCharacteristicNominal"
    , PointProfileCharacteristicNominal(*this)	// "PointProfileCharacteristicNominal"
    , PositionCharacteristicNominal(*this)	// "PositionCharacteristicNominal"
    , RadiusCharacteristicNominal(*this)	// "RadiusCharacteristicNominal"
    , SquareCharacteristicNominal(*this)	// "SquareCharacteristicNominal"
    , StraightnessCharacteristicNominal(*this)	// "StraightnessCharacteristicNominal"
    , SurfaceProfileCharacteristicNominal(*this)	// "SurfaceProfileCharacteristicNominal"
    , SurfaceProfileNonUniformCharacteristicNominal(*this)	// "SurfaceProfileNonUniformCharacteristicNominal"
    , SurfaceTextureCharacteristicNominal(*this)	// "SurfaceTextureCharacteristicNominal"
    , SymmetryCharacteristicNominal(*this)	// "SymmetryCharacteristicNominal"
    , ThicknessCharacteristicNominal(*this)	// "ThicknessCharacteristicNominal"
    , ThreadCharacteristicNominal(*this)	// "ThreadCharacteristicNominal"
    , TotalRunoutCharacteristicNominal(*this)	// "TotalRunoutCharacteristicNominal"
    , UserDefinedAngularCharacteristicNominal(*this)	// "UserDefinedAngularCharacteristicNominal"
    , UserDefinedAreaCharacteristicNominal(*this)	// "UserDefinedAreaCharacteristicNominal"
    , UserDefinedAttributeCharacteristicNominal(*this)	// "UserDefinedAttributeCharacteristicNominal"
    , UserDefinedForceCharacteristicNominal(*this)	// "UserDefinedForceCharacteristicNominal"
    , UserDefinedLinearCharacteristicNominal(*this)	// "UserDefinedLinearCharacteristicNominal"
    , UserDefinedMassCharacteristicNominal(*this)	// "UserDefinedMassCharacteristicNominal"
    , UserDefinedPressureCharacteristicNominal(*this)	// "UserDefinedPressureCharacteristicNominal"
    , UserDefinedSpeedCharacteristicNominal(*this)	// "UserDefinedSpeedCharacteristicNominal"
    , UserDefinedTemperatureCharacteristicNominal(*this)	// "UserDefinedTemperatureCharacteristicNominal"
    , UserDefinedTimeCharacteristicNominal(*this)	// "UserDefinedTimeCharacteristicNominal"
    , UserDefinedUnitCharacteristicNominal(*this)	// "UserDefinedUnitCharacteristicNominal"
    , WidthCharacteristicNominal(*this)	// "WidthCharacteristicNominal"
{
}

void CCharacteristicNominalsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicNominalsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicRectangularZoneLimitType::CCharacteristicRectangularZoneLimitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRectangleType(node)
{
}

CCharacteristicRectangularZoneLimitType::CCharacteristicRectangularZoneLimitType(CCharacteristicRectangularZoneLimitType const& other)
    : ::qif191::t::CRectangleType(other.GetNode())
{
}

void CCharacteristicRectangularZoneLimitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicRectangularZoneLimitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicSimultaneityGroupType::CCharacteristicSimultaneityGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicGroupType(node)
{
}

CCharacteristicSimultaneityGroupType::CCharacteristicSimultaneityGroupType(CCharacteristicSimultaneityGroupType const& other)
    : ::qif191::t::CCharacteristicGroupType(other.GetNode())
{
}

void CCharacteristicSimultaneityGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicSimultaneityGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicStatsEvalBaseType::CCharacteristicStatsEvalBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Attributes(*this)	// "Attributes"
    , ActualIds(*this)	// "ActualIds"
    , Subgroup(*this)	// "Subgroup"
    , Status(*this)	// "Status"
    , StudyIssue(*this)	// "StudyIssue"
    , DistributionTransformation(*this)	// "DistributionTransformation"
{
}

CCharacteristicStatsEvalBaseType::CCharacteristicStatsEvalBaseType(CCharacteristicStatsEvalBaseType const& other)
    : TypeBase(other.GetNode())
    , Attributes(*this)	// "Attributes"
    , ActualIds(*this)	// "ActualIds"
    , Subgroup(*this)	// "Subgroup"
    , Status(*this)	// "Status"
    , StudyIssue(*this)	// "StudyIssue"
    , DistributionTransformation(*this)	// "DistributionTransformation"
{
}

void CCharacteristicStatsEvalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicStatsEvalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicStatusEnumType::CCharacteristicStatusEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCharacteristicStatusEnumType::CCharacteristicStatusEnumType(CCharacteristicStatusEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCharacteristicStatusType::CCharacteristicStatusType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicStatusEnum(*this)	// "CharacteristicStatusEnum"
    , OtherCharacteristicStatus(*this)	// "OtherCharacteristicStatus"
{
}

CCharacteristicStatusType::CCharacteristicStatusType(CCharacteristicStatusType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicStatusEnum(*this)	// "CharacteristicStatusEnum"
    , OtherCharacteristicStatus(*this)	// "OtherCharacteristicStatus"
{
}

void CCharacteristicStatusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicStatusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicTypeEnumType::CCharacteristicTypeEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCharacteristicTypeEnumType::CCharacteristicTypeEnumType(CCharacteristicTypeEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCharacteristicsStatsType::CCharacteristicsStatsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicStats(*this)	// "CharacteristicStats"
    , AngleBetweenCharacteristicStats(*this)	// "AngleBetweenCharacteristicStats"
    , AngleCharacteristicStats(*this)	// "AngleCharacteristicStats"
    , AngleFromCharacteristicStats(*this)	// "AngleFromCharacteristicStats"
    , AngularCharacteristicStats(*this)	// "AngularCharacteristicStats"
    , AngularCoordinateCharacteristicStats(*this)	// "AngularCoordinateCharacteristicStats"
    , AngularityCharacteristicStats(*this)	// "AngularityCharacteristicStats"
    , ChordCharacteristicStats(*this)	// "ChordCharacteristicStats"
    , CircularRunoutCharacteristicStats(*this)	// "CircularRunoutCharacteristicStats"
    , CircularityCharacteristicStats(*this)	// "CircularityCharacteristicStats"
    , ConcentricityCharacteristicStats(*this)	// "ConcentricityCharacteristicStats"
    , CurveLengthCharacteristicStats(*this)	// "CurveLengthCharacteristicStats"
    , CylindricityCharacteristicStats(*this)	// "CylindricityCharacteristicStats"
    , DepthCharacteristicStats(*this)	// "DepthCharacteristicStats"
    , DiameterCharacteristicStats(*this)	// "DiameterCharacteristicStats"
    , DistanceBetweenCharacteristicStats(*this)	// "DistanceBetweenCharacteristicStats"
    , DistanceFromCharacteristicStats(*this)	// "DistanceFromCharacteristicStats"
    , FlatnessCharacteristicStats(*this)	// "FlatnessCharacteristicStats"
    , GeometricCharacteristicStats(*this)	// "GeometricCharacteristicStats"
    , HeightCharacteristicStats(*this)	// "HeightCharacteristicStats"
    , LengthCharacteristicStats(*this)	// "LengthCharacteristicStats"
    , LineProfileCharacteristicStats(*this)	// "LineProfileCharacteristicStats"
    , LinearCharacteristicStats(*this)	// "LinearCharacteristicStats"
    , LinearCoordinateCharacteristicStats(*this)	// "LinearCoordinateCharacteristicStats"
    , LocationCharacteristicStats(*this)	// "LocationCharacteristicStats"
    , OrientationCharacteristicStats(*this)	// "OrientationCharacteristicStats"
    , ParallelismCharacteristicStats(*this)	// "ParallelismCharacteristicStats"
    , PerpendicularityCharacteristicStats(*this)	// "PerpendicularityCharacteristicStats"
    , PointProfileCharacteristicStats(*this)	// "PointProfileCharacteristicStats"
    , PositionCharacteristicStats(*this)	// "PositionCharacteristicStats"
    , RadiusCharacteristicStats(*this)	// "RadiusCharacteristicStats"
    , SquareCharacteristicStats(*this)	// "SquareCharacteristicStats"
    , StraightnessCharacteristicStats(*this)	// "StraightnessCharacteristicStats"
    , SurfaceProfileCharacteristicStats(*this)	// "SurfaceProfileCharacteristicStats"
    , SurfaceProfileNonUniformCharacteristicStats(*this)	// "SurfaceProfileNonUniformCharacteristicStats"
    , SurfaceTextureCharacteristicStats(*this)	// "SurfaceTextureCharacteristicStats"
    , SymmetryCharacteristicStats(*this)	// "SymmetryCharacteristicStats"
    , ThicknessCharacteristicStats(*this)	// "ThicknessCharacteristicStats"
    , ThreadCharacteristicStats(*this)	// "ThreadCharacteristicStats"
    , TotalRunoutCharacteristicStats(*this)	// "TotalRunoutCharacteristicStats"
    , UserDefinedAngularCharacteristicStats(*this)	// "UserDefinedAngularCharacteristicStats"
    , UserDefinedAreaCharacteristicStats(*this)	// "UserDefinedAreaCharacteristicStats"
    , UserDefinedAttributeCharacteristicStats(*this)	// "UserDefinedAttributeCharacteristicStats"
    , UserDefinedForceCharacteristicStats(*this)	// "UserDefinedForceCharacteristicStats"
    , UserDefinedLinearCharacteristicStats(*this)	// "UserDefinedLinearCharacteristicStats"
    , UserDefinedMassCharacteristicStats(*this)	// "UserDefinedMassCharacteristicStats"
    , UserDefinedPressureCharacteristicStats(*this)	// "UserDefinedPressureCharacteristicStats"
    , UserDefinedSpeedCharacteristicStats(*this)	// "UserDefinedSpeedCharacteristicStats"
    , UserDefinedTemperatureCharacteristicStats(*this)	// "UserDefinedTemperatureCharacteristicStats"
    , UserDefinedTimeCharacteristicStats(*this)	// "UserDefinedTimeCharacteristicStats"
    , UserDefinedUnitCharacteristicStats(*this)	// "UserDefinedUnitCharacteristicStats"
    , WidthCharacteristicStats(*this)	// "WidthCharacteristicStats"
{
}

CCharacteristicsStatsType::CCharacteristicsStatsType(CCharacteristicsStatsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicStats(*this)	// "CharacteristicStats"
    , AngleBetweenCharacteristicStats(*this)	// "AngleBetweenCharacteristicStats"
    , AngleCharacteristicStats(*this)	// "AngleCharacteristicStats"
    , AngleFromCharacteristicStats(*this)	// "AngleFromCharacteristicStats"
    , AngularCharacteristicStats(*this)	// "AngularCharacteristicStats"
    , AngularCoordinateCharacteristicStats(*this)	// "AngularCoordinateCharacteristicStats"
    , AngularityCharacteristicStats(*this)	// "AngularityCharacteristicStats"
    , ChordCharacteristicStats(*this)	// "ChordCharacteristicStats"
    , CircularRunoutCharacteristicStats(*this)	// "CircularRunoutCharacteristicStats"
    , CircularityCharacteristicStats(*this)	// "CircularityCharacteristicStats"
    , ConcentricityCharacteristicStats(*this)	// "ConcentricityCharacteristicStats"
    , CurveLengthCharacteristicStats(*this)	// "CurveLengthCharacteristicStats"
    , CylindricityCharacteristicStats(*this)	// "CylindricityCharacteristicStats"
    , DepthCharacteristicStats(*this)	// "DepthCharacteristicStats"
    , DiameterCharacteristicStats(*this)	// "DiameterCharacteristicStats"
    , DistanceBetweenCharacteristicStats(*this)	// "DistanceBetweenCharacteristicStats"
    , DistanceFromCharacteristicStats(*this)	// "DistanceFromCharacteristicStats"
    , FlatnessCharacteristicStats(*this)	// "FlatnessCharacteristicStats"
    , GeometricCharacteristicStats(*this)	// "GeometricCharacteristicStats"
    , HeightCharacteristicStats(*this)	// "HeightCharacteristicStats"
    , LengthCharacteristicStats(*this)	// "LengthCharacteristicStats"
    , LineProfileCharacteristicStats(*this)	// "LineProfileCharacteristicStats"
    , LinearCharacteristicStats(*this)	// "LinearCharacteristicStats"
    , LinearCoordinateCharacteristicStats(*this)	// "LinearCoordinateCharacteristicStats"
    , LocationCharacteristicStats(*this)	// "LocationCharacteristicStats"
    , OrientationCharacteristicStats(*this)	// "OrientationCharacteristicStats"
    , ParallelismCharacteristicStats(*this)	// "ParallelismCharacteristicStats"
    , PerpendicularityCharacteristicStats(*this)	// "PerpendicularityCharacteristicStats"
    , PointProfileCharacteristicStats(*this)	// "PointProfileCharacteristicStats"
    , PositionCharacteristicStats(*this)	// "PositionCharacteristicStats"
    , RadiusCharacteristicStats(*this)	// "RadiusCharacteristicStats"
    , SquareCharacteristicStats(*this)	// "SquareCharacteristicStats"
    , StraightnessCharacteristicStats(*this)	// "StraightnessCharacteristicStats"
    , SurfaceProfileCharacteristicStats(*this)	// "SurfaceProfileCharacteristicStats"
    , SurfaceProfileNonUniformCharacteristicStats(*this)	// "SurfaceProfileNonUniformCharacteristicStats"
    , SurfaceTextureCharacteristicStats(*this)	// "SurfaceTextureCharacteristicStats"
    , SymmetryCharacteristicStats(*this)	// "SymmetryCharacteristicStats"
    , ThicknessCharacteristicStats(*this)	// "ThicknessCharacteristicStats"
    , ThreadCharacteristicStats(*this)	// "ThreadCharacteristicStats"
    , TotalRunoutCharacteristicStats(*this)	// "TotalRunoutCharacteristicStats"
    , UserDefinedAngularCharacteristicStats(*this)	// "UserDefinedAngularCharacteristicStats"
    , UserDefinedAreaCharacteristicStats(*this)	// "UserDefinedAreaCharacteristicStats"
    , UserDefinedAttributeCharacteristicStats(*this)	// "UserDefinedAttributeCharacteristicStats"
    , UserDefinedForceCharacteristicStats(*this)	// "UserDefinedForceCharacteristicStats"
    , UserDefinedLinearCharacteristicStats(*this)	// "UserDefinedLinearCharacteristicStats"
    , UserDefinedMassCharacteristicStats(*this)	// "UserDefinedMassCharacteristicStats"
    , UserDefinedPressureCharacteristicStats(*this)	// "UserDefinedPressureCharacteristicStats"
    , UserDefinedSpeedCharacteristicStats(*this)	// "UserDefinedSpeedCharacteristicStats"
    , UserDefinedTemperatureCharacteristicStats(*this)	// "UserDefinedTemperatureCharacteristicStats"
    , UserDefinedTimeCharacteristicStats(*this)	// "UserDefinedTimeCharacteristicStats"
    , UserDefinedUnitCharacteristicStats(*this)	// "UserDefinedUnitCharacteristicStats"
    , WidthCharacteristicStats(*this)	// "WidthCharacteristicStats"
{
}

void CCharacteristicsStatsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicsStatsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CChordCharacteristicActualType::CChordCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CChordCharacteristicActualType::CChordCharacteristicActualType(CChordCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CChordCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ChordCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CChordCharacteristicDefinitionType::CChordCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CChordCharacteristicDefinitionType::CChordCharacteristicDefinitionType(CChordCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CChordCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ChordCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CChordCharacteristicItemType::CChordCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CChordCharacteristicItemType::CChordCharacteristicItemType(CChordCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CChordCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ChordCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CChordCharacteristicNominalType::CChordCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CChordCharacteristicNominalType::CChordCharacteristicNominalType(CChordCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CChordCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ChordCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CChordCharacteristicStatsEvalType::CChordCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CChordCharacteristicStatsEvalType::CChordCharacteristicStatsEvalType(CChordCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CChordCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ChordCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleActualDeterminationType::CCircleActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CCircleActualDeterminationType::CCircleActualDeterminationType(CCircleActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CCircleActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleBestFitType::CCircleBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCircleBestFitType::CCircleBestFitType(CCircleBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCircleBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleCastType::CCircleCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCircleCastType::CCircleCastType(CCircleCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCircleCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleCheckedFeatureType::CCircleCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CCircleCheckedFeatureType::CCircleCheckedFeatureType(CCircleCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CCircleCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleCheckedType::CCircleCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CCircleCheckedType::CCircleCheckedType(CCircleCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CCircleCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleConstructionMethodType::CCircleConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Tangent(*this)	// "Tangent"
    , TangentThrough(*this)	// "TangentThrough"
    , Transform(*this)	// "Transform"
    , FromCone(*this)	// "FromCone"
    , FromScan(*this)	// "FromScan"
{
}

CCircleConstructionMethodType::CCircleConstructionMethodType(CCircleConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Tangent(*this)	// "Tangent"
    , TangentThrough(*this)	// "TangentThrough"
    , Transform(*this)	// "Transform"
    , FromCone(*this)	// "FromCone"
    , FromScan(*this)	// "FromScan"
{
}

void CCircleConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleCopyType::CCircleCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCircle(*this)	// "BaseCircle"
{
}

CCircleCopyType::CCircleCopyType(CCircleCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCircle(*this)	// "BaseCircle"
{
}

void CCircleCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleFeatureActualType::CCircleFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , Form(*this)	// "Form"
{
}

CCircleFeatureActualType::CCircleFeatureActualType(CCircleFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , Form(*this)	// "Form"
{
}

void CCircleFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleFeatureDefinitionType::CCircleFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
{
}

CCircleFeatureDefinitionType::CCircleFeatureDefinitionType(CCircleFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
{
}

void CCircleFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleFeatureItemType::CCircleFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CCircleFeatureItemType::CCircleFeatureItemType(CCircleFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CCircleFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleFeatureNominalType::CCircleFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
{
}

CCircleFeatureNominalType::CCircleFeatureNominalType(CCircleFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
{
}

void CCircleFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleFromConeType::CCircleFromConeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , Diameter(*this)	// "Diameter"
    , Distance(*this)	// "Distance"
{
}

CCircleFromConeType::CCircleFromConeType(CCircleFromConeType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , Diameter(*this)	// "Diameter"
    , Distance(*this)	// "Distance"
{
}

void CCircleFromConeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleFromConeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleFromScanType::CCircleFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

CCircleFromScanType::CCircleFromScanType(CCircleFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

void CCircleFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleIntersectionType::CCircleIntersectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , IntersectionPlane(*this)	// "IntersectionPlane"
    , IntersectionFeature(*this)	// "IntersectionFeature"
{
}

CCircleIntersectionType::CCircleIntersectionType(CCircleIntersectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , IntersectionPlane(*this)	// "IntersectionPlane"
    , IntersectionFeature(*this)	// "IntersectionFeature"
{
}

void CCircleIntersectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleIntersectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCirclePointSamplingStrategyType::CCirclePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CCirclePointSamplingStrategyType::CCirclePointSamplingStrategyType(CCirclePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CCirclePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CirclePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleProjectionType::CCircleProjectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ProjectionCircle(*this)	// "ProjectionCircle"
    , ProjectionPlane(*this)	// "ProjectionPlane"
{
}

CCircleProjectionType::CCircleProjectionType(CCircleProjectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ProjectionCircle(*this)	// "ProjectionCircle"
    , ProjectionPlane(*this)	// "ProjectionPlane"
{
}

void CCircleProjectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleProjectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleRecompType::CCircleRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CCircleRecompType::CCircleRecompType(CCircleRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CCircleRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleTangentThroughType::CCircleTangentThroughType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , TangentFeature(*this)	// "TangentFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CCircleTangentThroughType::CCircleTangentThroughType(CCircleTangentThroughType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , TangentFeature(*this)	// "TangentFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CCircleTangentThroughType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleTangentThroughType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleTangentType::CCircleTangentType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , TangentFeature(*this)	// "TangentFeature"
{
}

CCircleTangentType::CCircleTangentType(CCircleTangentType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , TangentFeature(*this)	// "TangentFeature"
{
}

void CCircleTangentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleTangentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleTransformType::CCircleTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCircle(*this)	// "BaseCircle"
    , Transformation(*this)	// "Transformation"
{
}

CCircleTransformType::CCircleTransformType(CCircleTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCircle(*this)	// "BaseCircle"
    , Transformation(*this)	// "Transformation"
{
}

void CCircleTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircleType::CCircleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CenterPoint(*this)	// "CenterPoint"
    , Diameter(*this)	// "Diameter"
    , Normal(*this)	// "Normal"
{
}

CCircleType::CCircleType(CCircleType const& other)
    : TypeBase(other.GetNode())
    , CenterPoint(*this)	// "CenterPoint"
    , Diameter(*this)	// "Diameter"
    , Normal(*this)	// "Normal"
{
}

void CCircleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularRunoutCharacteristicActualType::CCircularRunoutCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicActualBaseType(node)
{
}

CCircularRunoutCharacteristicActualType::CCircularRunoutCharacteristicActualType(CCircularRunoutCharacteristicActualType const& other)
    : ::qif191::t::CRunoutCharacteristicActualBaseType(other.GetNode())
{
}

void CCircularRunoutCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularRunoutCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularRunoutCharacteristicDefinitionType::CCircularRunoutCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicDefinitionBaseType(node)
{
}

CCircularRunoutCharacteristicDefinitionType::CCircularRunoutCharacteristicDefinitionType(CCircularRunoutCharacteristicDefinitionType const& other)
    : ::qif191::t::CRunoutCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CCircularRunoutCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularRunoutCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularRunoutCharacteristicItemType::CCircularRunoutCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicItemBaseType(node)
{
}

CCircularRunoutCharacteristicItemType::CCircularRunoutCharacteristicItemType(CCircularRunoutCharacteristicItemType const& other)
    : ::qif191::t::CRunoutCharacteristicItemBaseType(other.GetNode())
{
}

void CCircularRunoutCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularRunoutCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularRunoutCharacteristicNominalType::CCircularRunoutCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicNominalBaseType(node)
    , ZoneDirection(*this)	// "ZoneDirection"
{
}

CCircularRunoutCharacteristicNominalType::CCircularRunoutCharacteristicNominalType(CCircularRunoutCharacteristicNominalType const& other)
    : ::qif191::t::CRunoutCharacteristicNominalBaseType(other.GetNode())
    , ZoneDirection(*this)	// "ZoneDirection"
{
}

void CCircularRunoutCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularRunoutCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularRunoutCharacteristicStatsEvalType::CCircularRunoutCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicStatsEvalBaseType(node)
{
}

CCircularRunoutCharacteristicStatsEvalType::CCircularRunoutCharacteristicStatsEvalType(CCircularRunoutCharacteristicStatsEvalType const& other)
    : ::qif191::t::CRunoutCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CCircularRunoutCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularRunoutCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularUnitAreaType::CCircularUnitAreaType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CircularUnitAreaDiameter(*this)	// "CircularUnitAreaDiameter"
{
}

CCircularUnitAreaType::CCircularUnitAreaType(CCircularUnitAreaType const& other)
    : TypeBase(other.GetNode())
    , CircularUnitAreaDiameter(*this)	// "CircularUnitAreaDiameter"
{
}

void CCircularUnitAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularUnitAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularityCharacteristicActualType::CCircularityCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicActualBaseType(node)
    , MaxCircularity(*this)	// "MaxCircularity"
    , ZoneRadii(*this)	// "ZoneRadii"
    , ZonePlane(*this)	// "ZonePlane"
{
}

CCircularityCharacteristicActualType::CCircularityCharacteristicActualType(CCircularityCharacteristicActualType const& other)
    : ::qif191::t::CFormCharacteristicActualBaseType(other.GetNode())
    , MaxCircularity(*this)	// "MaxCircularity"
    , ZoneRadii(*this)	// "ZoneRadii"
    , ZonePlane(*this)	// "ZonePlane"
{
}

void CCircularityCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularityCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularityCharacteristicDefinitionType::CCircularityCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , ToleranceValue(*this)	// "ToleranceValue"
    , ToleranceZonePerUnitAngle(*this)	// "ToleranceZonePerUnitAngle"
{
}

CCircularityCharacteristicDefinitionType::CCircularityCharacteristicDefinitionType(CCircularityCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , ToleranceValue(*this)	// "ToleranceValue"
    , ToleranceZonePerUnitAngle(*this)	// "ToleranceZonePerUnitAngle"
{
}

void CCircularityCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularityCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularityCharacteristicItemType::CCircularityCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicItemBaseType(node)
{
}

CCircularityCharacteristicItemType::CCircularityCharacteristicItemType(CCircularityCharacteristicItemType const& other)
    : ::qif191::t::CFormCharacteristicItemBaseType(other.GetNode())
{
}

void CCircularityCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularityCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularityCharacteristicNominalType::CCircularityCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CCircularityCharacteristicNominalType::CCircularityCharacteristicNominalType(CCircularityCharacteristicNominalType const& other)
    : ::qif191::t::CFormCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CCircularityCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularityCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCircularityCharacteristicStatsEvalType::CCircularityCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(node)
{
}

CCircularityCharacteristicStatsEvalType::CCircularityCharacteristicStatsEvalType(CCircularityCharacteristicStatsEvalType const& other)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CCircularityCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CircularityCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CClosedCurvePointSamplingStrategyEnumType::CClosedCurvePointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CClosedCurvePointSamplingStrategyEnumType::CClosedCurvePointSamplingStrategyEnumType(CClosedCurvePointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCoEdgeMeshType::CCoEdgeMeshType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , EdgeOriented(*this)	// "EdgeOriented"
    , CurveMesh(*this)	// "CurveMesh"
{
}

CCoEdgeMeshType::CCoEdgeMeshType(CCoEdgeMeshType const& other)
    : TypeBase(other.GetNode())
    , EdgeOriented(*this)	// "EdgeOriented"
    , CurveMesh(*this)	// "CurveMesh"
{
}

void CCoEdgeMeshType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoEdgeMeshType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoEdgeType::CCoEdgeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , EdgeOriented(*this)	// "EdgeOriented"
    , Curve12(*this)	// "Curve12"
{
}

CCoEdgeType::CCoEdgeType(CCoEdgeType const& other)
    : TypeBase(other.GetNode())
    , EdgeOriented(*this)	// "EdgeOriented"
    , Curve12(*this)	// "Curve12"
{
}

void CCoEdgeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoEdgeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoEdgesMeshType::CCoEdgesMeshType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , CoEdgeMesh(*this)	// "CoEdgeMesh"
{
}

CCoEdgesMeshType::CCoEdgesMeshType(CCoEdgesMeshType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , CoEdgeMesh(*this)	// "CoEdgeMesh"
{
}

void CCoEdgesMeshType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoEdgesMeshType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoEdgesType::CCoEdgesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , CoEdge(*this)	// "CoEdge"
{
}

CCoEdgesType::CCoEdgesType(CCoEdgesType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , CoEdge(*this)	// "CoEdge"
{
}

void CCoEdgesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoEdgesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CColorType::CColorType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CColorType::CColorType(CColorType const& other)
    : TypeBase(other.GetNode())
{
}


CCommonFileSpecEnumType::CCommonFileSpecEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCommonFileSpecEnumType::CCommonFileSpecEnumType(CCommonFileSpecEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CComparatorType::CComparatorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProbingDeviceType(node)
{
}

CComparatorType::CComparatorType(CComparatorType const& other)
    : ::qif191::t::CProbingDeviceType(other.GetNode())
{
}

void CComparatorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ComparatorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CComponentSetType::CComponentSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Component(*this)	// "Component"
{
}

CComponentSetType::CComponentSetType(CComponentSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Component(*this)	// "Component"
{
}

void CComponentSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ComponentSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CComponentType::CComponentType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , QPId(*this)	// "QPId"
    , Transform(*this)	// "Transform"
    , Traceability(*this)	// "Traceability"
    , Part(*this)	// "Part"
    , Assembly(*this)	// "Assembly"
    , DefinitionInternal(*this)	// "DefinitionInternal"
{
}

CComponentType::CComponentType(CComponentType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , QPId(*this)	// "QPId"
    , Transform(*this)	// "Transform"
    , Traceability(*this)	// "Traceability"
    , Part(*this)	// "Part"
    , Assembly(*this)	// "Assembly"
    , DefinitionInternal(*this)	// "DefinitionInternal"
{
}

void CComponentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ComponentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeFeatureActualBaseType::CCompositeFeatureActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
{
}

CCompositeFeatureActualBaseType::CCompositeFeatureActualBaseType(CCompositeFeatureActualBaseType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
{
}

void CCompositeFeatureActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeFeatureActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeFeatureDefinitionBaseType::CCompositeFeatureDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CCompositeFeatureDefinitionBaseType::CCompositeFeatureDefinitionBaseType(CCompositeFeatureDefinitionBaseType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CCompositeFeatureDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeFeatureDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeFeatureItemBaseType::CCompositeFeatureItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
{
}

CCompositeFeatureItemBaseType::CCompositeFeatureItemBaseType(CCompositeFeatureItemBaseType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
{
}

void CCompositeFeatureItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeFeatureItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeFeatureNominalBaseType::CCompositeFeatureNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
{
}

CCompositeFeatureNominalBaseType::CCompositeFeatureNominalBaseType(CCompositeFeatureNominalBaseType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
{
}

void CCompositeFeatureNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeFeatureNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentActualBaseType::CCompositeSegmentActualBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , Status(*this)	// "Status"
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
    , ZoneData(*this)	// "ZoneData"
{
}

CCompositeSegmentActualBaseType::CCompositeSegmentActualBaseType(CCompositeSegmentActualBaseType const& other)
    : TypeBase(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , Status(*this)	// "Status"
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
    , ZoneData(*this)	// "ZoneData"
{
}

void CCompositeSegmentActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentDefinitionBaseType::CCompositeSegmentDefinitionBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , ToleranceValue(*this)	// "ToleranceValue"
{
}

CCompositeSegmentDefinitionBaseType::CCompositeSegmentDefinitionBaseType(CCompositeSegmentDefinitionBaseType const& other)
    : TypeBase(other.GetNode())
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , ToleranceValue(*this)	// "ToleranceValue"
{
}

void CCompositeSegmentDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentPositionActualType::CCompositeSegmentPositionActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentActualBaseType(node)
{
}

CCompositeSegmentPositionActualType::CCompositeSegmentPositionActualType(CCompositeSegmentPositionActualType const& other)
    : ::qif191::t::CCompositeSegmentActualBaseType(other.GetNode())
{
}

void CCompositeSegmentPositionActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentPositionActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentPositionDefinitionType::CCompositeSegmentPositionDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentDefinitionBaseType(node)
    , MaterialCondition(*this)	// "MaterialCondition"
    , ProjectedToleranceZone(*this)	// "ProjectedToleranceZone"
{
}

CCompositeSegmentPositionDefinitionType::CCompositeSegmentPositionDefinitionType(CCompositeSegmentPositionDefinitionType const& other)
    : ::qif191::t::CCompositeSegmentDefinitionBaseType(other.GetNode())
    , MaterialCondition(*this)	// "MaterialCondition"
    , ProjectedToleranceZone(*this)	// "ProjectedToleranceZone"
{
}

void CCompositeSegmentPositionDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentPositionDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentPositionStatsEvalType::CCompositeSegmentPositionStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentStatsEvalBaseType(node)
{
}

CCompositeSegmentPositionStatsEvalType::CCompositeSegmentPositionStatsEvalType(CCompositeSegmentPositionStatsEvalType const& other)
    : ::qif191::t::CCompositeSegmentStatsEvalBaseType(other.GetNode())
{
}

void CCompositeSegmentPositionStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentPositionStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentProfileActualType::CCompositeSegmentProfileActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentActualBaseType(node)
{
}

CCompositeSegmentProfileActualType::CCompositeSegmentProfileActualType(CCompositeSegmentProfileActualType const& other)
    : ::qif191::t::CCompositeSegmentActualBaseType(other.GetNode())
{
}

void CCompositeSegmentProfileActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentProfileActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentProfileDefinitionType::CCompositeSegmentProfileDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentDefinitionBaseType(node)
    , OuterDisposition(*this)	// "OuterDisposition"
{
}

CCompositeSegmentProfileDefinitionType::CCompositeSegmentProfileDefinitionType(CCompositeSegmentProfileDefinitionType const& other)
    : ::qif191::t::CCompositeSegmentDefinitionBaseType(other.GetNode())
    , OuterDisposition(*this)	// "OuterDisposition"
{
}

void CCompositeSegmentProfileDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentProfileDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentProfileStatsEvalType::CCompositeSegmentProfileStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentStatsEvalBaseType(node)
{
}

CCompositeSegmentProfileStatsEvalType::CCompositeSegmentProfileStatsEvalType(CCompositeSegmentProfileStatsEvalType const& other)
    : ::qif191::t::CCompositeSegmentStatsEvalBaseType(other.GetNode())
{
}

void CCompositeSegmentProfileStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentProfileStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentStatsEvalBaseType::CCompositeSegmentStatsEvalBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
{
}

CCompositeSegmentStatsEvalBaseType::CCompositeSegmentStatsEvalBaseType(CCompositeSegmentStatsEvalBaseType const& other)
    : TypeBase(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
{
}

void CCompositeSegmentStatsEvalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentStatsEvalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentSymmetryActualType::CCompositeSegmentSymmetryActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentActualBaseType(node)
{
}

CCompositeSegmentSymmetryActualType::CCompositeSegmentSymmetryActualType(CCompositeSegmentSymmetryActualType const& other)
    : ::qif191::t::CCompositeSegmentActualBaseType(other.GetNode())
{
}

void CCompositeSegmentSymmetryActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentSymmetryActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentSymmetryDefinitionType::CCompositeSegmentSymmetryDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentDefinitionBaseType(node)
{
}

CCompositeSegmentSymmetryDefinitionType::CCompositeSegmentSymmetryDefinitionType(CCompositeSegmentSymmetryDefinitionType const& other)
    : ::qif191::t::CCompositeSegmentDefinitionBaseType(other.GetNode())
{
}

void CCompositeSegmentSymmetryDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentSymmetryDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentSymmetryStatsEvalType::CCompositeSegmentSymmetryStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeSegmentStatsEvalBaseType(node)
{
}

CCompositeSegmentSymmetryStatsEvalType::CCompositeSegmentSymmetryStatsEvalType(CCompositeSegmentSymmetryStatsEvalType const& other)
    : ::qif191::t::CCompositeSegmentStatsEvalBaseType(other.GetNode())
{
}

void CCompositeSegmentSymmetryStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentSymmetryStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentsPositionStatsEvalType::CCompositeSegmentsPositionStatsEvalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SecondCompositeSegmentPositionStats(*this)	// "SecondCompositeSegmentPositionStats"
    , ThirdCompositeSegmentPositionStats(*this)	// "ThirdCompositeSegmentPositionStats"
    , FourthCompositeSegmentPositionStats(*this)	// "FourthCompositeSegmentPositionStats"
{
}

CCompositeSegmentsPositionStatsEvalType::CCompositeSegmentsPositionStatsEvalType(CCompositeSegmentsPositionStatsEvalType const& other)
    : TypeBase(other.GetNode())
    , SecondCompositeSegmentPositionStats(*this)	// "SecondCompositeSegmentPositionStats"
    , ThirdCompositeSegmentPositionStats(*this)	// "ThirdCompositeSegmentPositionStats"
    , FourthCompositeSegmentPositionStats(*this)	// "FourthCompositeSegmentPositionStats"
{
}

void CCompositeSegmentsPositionStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentsPositionStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentsProfileStatsEvalType::CCompositeSegmentsProfileStatsEvalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SecondCompositeSegmentProfileStats(*this)	// "SecondCompositeSegmentProfileStats"
    , ThirdCompositeSegmentProfileStats(*this)	// "ThirdCompositeSegmentProfileStats"
    , FourthCompositeSegmentProfileStats(*this)	// "FourthCompositeSegmentProfileStats"
{
}

CCompositeSegmentsProfileStatsEvalType::CCompositeSegmentsProfileStatsEvalType(CCompositeSegmentsProfileStatsEvalType const& other)
    : TypeBase(other.GetNode())
    , SecondCompositeSegmentProfileStats(*this)	// "SecondCompositeSegmentProfileStats"
    , ThirdCompositeSegmentProfileStats(*this)	// "ThirdCompositeSegmentProfileStats"
    , FourthCompositeSegmentProfileStats(*this)	// "FourthCompositeSegmentProfileStats"
{
}

void CCompositeSegmentsProfileStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentsProfileStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompositeSegmentsSymmetryStatsEvalType::CCompositeSegmentsSymmetryStatsEvalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SecondCompositeSegmentSymmetryStats(*this)	// "SecondCompositeSegmentSymmetryStats"
    , ThirdCompositeSegmentSymmetryStats(*this)	// "ThirdCompositeSegmentSymmetryStats"
{
}

CCompositeSegmentsSymmetryStatsEvalType::CCompositeSegmentsSymmetryStatsEvalType(CCompositeSegmentsSymmetryStatsEvalType const& other)
    : TypeBase(other.GetNode())
    , SecondCompositeSegmentSymmetryStats(*this)	// "SecondCompositeSegmentSymmetryStats"
    , ThirdCompositeSegmentSymmetryStats(*this)	// "ThirdCompositeSegmentSymmetryStats"
{
}

void CCompositeSegmentsSymmetryStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompositeSegmentsSymmetryStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompoundDatumType::CCompoundDatumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Datum(*this)	// "Datum"
{
}

CCompoundDatumType::CCompoundDatumType(CCompoundDatumType const& other)
    : TypeBase(other.GetNode())
    , Datum(*this)	// "Datum"
{
}

void CCompoundDatumType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompoundDatumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompoundFeatureActualType::CCompoundFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
{
}

CCompoundFeatureActualType::CCompoundFeatureActualType(CCompoundFeatureActualType const& other)
    : ::qif191::t::CCompositeFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
{
}

void CCompoundFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompoundFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompoundFeatureDefinitionType::CCompoundFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(node)
{
}

CCompoundFeatureDefinitionType::CCompoundFeatureDefinitionType(CCompoundFeatureDefinitionType const& other)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(other.GetNode())
{
}

void CCompoundFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompoundFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompoundFeatureGeometryEnumType::CCompoundFeatureGeometryEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCompoundFeatureGeometryEnumType::CCompoundFeatureGeometryEnumType(CCompoundFeatureGeometryEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCompoundFeatureItemType::CCompoundFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureItemBaseType(node)
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CCompoundFeatureItemType::CCompoundFeatureItemType(CCompoundFeatureItemType const& other)
    : ::qif191::t::CCompositeFeatureItemBaseType(other.GetNode())
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CCompoundFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompoundFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompoundFeatureNominalType::CCompoundFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
    , CompoundFeatureForm(*this)	// "CompoundFeatureForm"
{
}

CCompoundFeatureNominalType::CCompoundFeatureNominalType(CCompoundFeatureNominalType const& other)
    : ::qif191::t::CCompositeFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
    , CompoundFeatureForm(*this)	// "CompoundFeatureForm"
{
}

void CCompoundFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompoundFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityCharacteristicActualType::CConcentricityCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicActualBaseType(node)
{
}

CConcentricityCharacteristicActualType::CConcentricityCharacteristicActualType(CConcentricityCharacteristicActualType const& other)
    : ::qif191::t::CLocationCharacteristicActualBaseType(other.GetNode())
{
}

void CConcentricityCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityCharacteristicDefinitionType::CConcentricityCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicDefinitionBaseType(node)
    , ZoneShape(*this)	// "ZoneShape"
{
}

CConcentricityCharacteristicDefinitionType::CConcentricityCharacteristicDefinitionType(CConcentricityCharacteristicDefinitionType const& other)
    : ::qif191::t::CLocationCharacteristicDefinitionBaseType(other.GetNode())
    , ZoneShape(*this)	// "ZoneShape"
{
}

void CConcentricityCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityCharacteristicItemType::CConcentricityCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicItemBaseType(node)
{
}

CConcentricityCharacteristicItemType::CConcentricityCharacteristicItemType(CConcentricityCharacteristicItemType const& other)
    : ::qif191::t::CLocationCharacteristicItemBaseType(other.GetNode())
{
}

void CConcentricityCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityCharacteristicNominalType::CConcentricityCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CConcentricityCharacteristicNominalType::CConcentricityCharacteristicNominalType(CConcentricityCharacteristicNominalType const& other)
    : ::qif191::t::CLocationCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CConcentricityCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityCharacteristicStatsEvalType::CConcentricityCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
{
}

CConcentricityCharacteristicStatsEvalType::CConcentricityCharacteristicStatsEvalType(CConcentricityCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLocationCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
{
}

void CConcentricityCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityDiametricalZoneType::CConcentricityDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CConcentricityDiametricalZoneType::CConcentricityDiametricalZoneType(CConcentricityDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
{
}

void CConcentricityDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityNonDiametricalZoneType::CConcentricityNonDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CConcentricityNonDiametricalZoneType::CConcentricityNonDiametricalZoneType(CConcentricityNonDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
{
}

void CConcentricityNonDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityNonDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricitySphericalZoneType::CConcentricitySphericalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CConcentricitySphericalZoneType::CConcentricitySphericalZoneType(CConcentricitySphericalZoneType const& other)
    : TypeBase(other.GetNode())
{
}

void CConcentricitySphericalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricitySphericalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConcentricityZoneShapeType::CConcentricityZoneShapeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SphericalZone(*this)	// "SphericalZone"
    , DiametricalZone(*this)	// "DiametricalZone"
    , NonDiametricalZone(*this)	// "NonDiametricalZone"
{
}

CConcentricityZoneShapeType::CConcentricityZoneShapeType(CConcentricityZoneShapeType const& other)
    : TypeBase(other.GetNode())
    , SphericalZone(*this)	// "SphericalZone"
    , DiametricalZone(*this)	// "DiametricalZone"
    , NonDiametricalZone(*this)	// "NonDiametricalZone"
{
}

void CConcentricityZoneShapeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConcentricityZoneShapeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCone23CoreType::CCone23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , TurnedV(*this)	// "@TurnedV"
    , ScaleV(*this)	// "@ScaleV"
    , DiameterBottom(*this)	// "DiameterBottom"
    , DiameterTop(*this)	// "DiameterTop"
    , Length(*this)	// "Length"
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

CCone23CoreType::CCone23CoreType(CCone23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , TurnedV(*this)	// "@TurnedV"
    , ScaleV(*this)	// "@ScaleV"
    , DiameterBottom(*this)	// "DiameterBottom"
    , DiameterTop(*this)	// "DiameterTop"
    , Length(*this)	// "Length"
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

void CCone23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Cone23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCone23Type::CCone23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Cone23Core(*this)	// "Cone23Core"
    , Transform(*this)	// "Transform"
{
}

CCone23Type::CCone23Type(CCone23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Cone23Core(*this)	// "Cone23Core"
    , Transform(*this)	// "Transform"
{
}

void CCone23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Cone23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeActualDeterminationType::CConeActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CConeActualDeterminationType::CConeActualDeterminationType(CConeActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CConeActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeBestFitType::CConeBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CConeBestFitType::CConeBestFitType(CConeBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CConeBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeCastType::CConeCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CConeCastType::CConeCastType(CConeCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CConeCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeCheckedFeatureType::CConeCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CConeCheckedFeatureType::CConeCheckedFeatureType(CConeCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CConeCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeCheckedType::CConeCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CConeCheckedType::CConeCheckedType(CConeCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CConeCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeConstructionMethodType::CConeConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

CConeConstructionMethodType::CConeConstructionMethodType(CConeConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void CConeConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeCopyType::CConeCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCone(*this)	// "BaseCone"
{
}

CConeCopyType::CConeCopyType(CConeCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCone(*this)	// "BaseCone"
{
}

void CConeCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeFeatureActualType::CConeFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , HalfAngle(*this)	// "HalfAngle"
    , FullAngle(*this)	// "FullAngle"
    , StartLength(*this)	// "StartLength"
    , EndLength(*this)	// "EndLength"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

CConeFeatureActualType::CConeFeatureActualType(CConeFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , HalfAngle(*this)	// "HalfAngle"
    , FullAngle(*this)	// "FullAngle"
    , StartLength(*this)	// "StartLength"
    , EndLength(*this)	// "EndLength"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

void CConeFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeFeatureDefinitionType::CConeFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , ConeDiameterDistance(*this)	// "ConeDiameterDistance"
    , EndLength(*this)	// "EndLength"
    , StartLength(*this)	// "StartLength"
{
}

CConeFeatureDefinitionType::CConeFeatureDefinitionType(CConeFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , ConeDiameterDistance(*this)	// "ConeDiameterDistance"
    , EndLength(*this)	// "EndLength"
    , StartLength(*this)	// "StartLength"
{
}

void CConeFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeFeatureItemType::CConeFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CConeFeatureItemType::CConeFeatureItemType(CConeFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CConeFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeFeatureNominalType::CConeFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

CConeFeatureNominalType::CConeFeatureNominalType(CConeFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

void CConeFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeFromScanType::CConeFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

CConeFromScanType::CConeFromScanType(CConeFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

void CConeFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConePointSamplingStrategyEnumType::CConePointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CConePointSamplingStrategyEnumType::CConePointSamplingStrategyEnumType(CConePointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CConePointSamplingStrategyType::CConePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CConePointSamplingStrategyType::CConePointSamplingStrategyType(CConePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CConePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeRecompType::CConeRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CConeRecompType::CConeRecompType(CConeRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CConeRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConeTransformType::CConeTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCone(*this)	// "BaseCone"
    , Transformation(*this)	// "Transformation"
{
}

CConeTransformType::CConeTransformType(CConeTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCone(*this)	// "BaseCone"
    , Transformation(*this)	// "Transformation"
{
}

void CConeTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConeTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentActualDeterminationType::CConicalSegmentActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CConicalSegmentActualDeterminationType::CConicalSegmentActualDeterminationType(CConicalSegmentActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CConicalSegmentActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentBestFitType::CConicalSegmentBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CConicalSegmentBestFitType::CConicalSegmentBestFitType(CConicalSegmentBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CConicalSegmentBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentCastType::CConicalSegmentCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CConicalSegmentCastType::CConicalSegmentCastType(CConicalSegmentCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CConicalSegmentCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentCheckedFeatureType::CConicalSegmentCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CConicalSegmentCheckedFeatureType::CConicalSegmentCheckedFeatureType(CConicalSegmentCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CConicalSegmentCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentCheckedType::CConicalSegmentCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CConicalSegmentCheckedType::CConicalSegmentCheckedType(CConicalSegmentCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CConicalSegmentCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentConstructionMethodType::CConicalSegmentConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CConicalSegmentConstructionMethodType::CConicalSegmentConstructionMethodType(CConicalSegmentConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CConicalSegmentConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentCopyType::CConicalSegmentCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseConicalSegment(*this)	// "BaseConicalSegment"
{
}

CConicalSegmentCopyType::CConicalSegmentCopyType(CConicalSegmentCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseConicalSegment(*this)	// "BaseConicalSegment"
{
}

void CConicalSegmentCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentFeatureActualType::CConicalSegmentFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , HalfAngle(*this)	// "HalfAngle"
    , FullAngle(*this)	// "FullAngle"
    , StartLength(*this)	// "StartLength"
    , EndLength(*this)	// "EndLength"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

CConicalSegmentFeatureActualType::CConicalSegmentFeatureActualType(CConicalSegmentFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , HalfAngle(*this)	// "HalfAngle"
    , FullAngle(*this)	// "FullAngle"
    , StartLength(*this)	// "StartLength"
    , EndLength(*this)	// "EndLength"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

void CConicalSegmentFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentFeatureDefinitionType::CConicalSegmentFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , EndLength(*this)	// "EndLength"
    , StartLength(*this)	// "StartLength"
{
}

CConicalSegmentFeatureDefinitionType::CConicalSegmentFeatureDefinitionType(CConicalSegmentFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , EndLength(*this)	// "EndLength"
    , StartLength(*this)	// "StartLength"
{
}

void CConicalSegmentFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentFeatureItemType::CConicalSegmentFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CConicalSegmentFeatureItemType::CConicalSegmentFeatureItemType(CConicalSegmentFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CConicalSegmentFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentFeatureNominalType::CConicalSegmentFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

CConicalSegmentFeatureNominalType::CConicalSegmentFeatureNominalType(CConicalSegmentFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

void CConicalSegmentFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentPointSamplingStrategyType::CConicalSegmentPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CConicalSegmentPointSamplingStrategyType::CConicalSegmentPointSamplingStrategyType(CConicalSegmentPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CConicalSegmentPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentRecompType::CConicalSegmentRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CConicalSegmentRecompType::CConicalSegmentRecompType(CConicalSegmentRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CConicalSegmentRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConicalSegmentTransformType::CConicalSegmentTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseConicalSegment(*this)	// "BaseConicalSegment"
    , Transformation(*this)	// "Transformation"
{
}

CConicalSegmentTransformType::CConicalSegmentTransformType(CConicalSegmentTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseConicalSegment(*this)	// "BaseConicalSegment"
    , Transformation(*this)	// "Transformation"
{
}

void CConicalSegmentTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConicalSegmentTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConstantIsType::CConstantIsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , val(*this)	// "@val"
{
}

CConstantIsType::CConstantIsType(CConstantIsType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , val(*this)	// "@val"
{
}

void CConstantIsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConstantIsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConstructionMethodBaseType::CConstructionMethodBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , NominalsCalculated(*this)	// "NominalsCalculated"
{
}

CConstructionMethodBaseType::CConstructionMethodBaseType(CConstructionMethodBaseType const& other)
    : TypeBase(other.GetNode())
    , NominalsCalculated(*this)	// "NominalsCalculated"
{
}

void CConstructionMethodBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConstructionMethodBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CControlIssueDetailsType::CControlIssueDetailsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ControlIssue(*this)	// "ControlIssue"
    , ControlMethodId(*this)	// "ControlMethodId"
    , StudyIssueId(*this)	// "StudyIssueId"
{
}

CControlIssueDetailsType::CControlIssueDetailsType(CControlIssueDetailsType const& other)
    : TypeBase(other.GetNode())
    , ControlIssue(*this)	// "ControlIssue"
    , ControlMethodId(*this)	// "ControlMethodId"
    , StudyIssueId(*this)	// "StudyIssueId"
{
}

void CControlIssueDetailsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ControlIssueDetailsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CControlIssueEnumType::CControlIssueEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CControlIssueEnumType::CControlIssueEnumType(CControlIssueEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CControlIssueType::CControlIssueType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ControlIssueEnum(*this)	// "ControlIssueEnum"
    , OtherControlIssue(*this)	// "OtherControlIssue"
{
}

CControlIssueType::CControlIssueType(CControlIssueType const& other)
    : TypeBase(other.GetNode())
    , ControlIssueEnum(*this)	// "ControlIssueEnum"
    , OtherControlIssue(*this)	// "OtherControlIssue"
{
}

void CControlIssueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ControlIssueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CControlMethodType::CControlMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , AssignableCauseId(*this)	// "AssignableCauseId"
    , NumOutOfTolerance(*this)	// "NumOutOfTolerance"
    , CpThreshold(*this)	// "CpThreshold"
    , CpkThreshold(*this)	// "CpkThreshold"
    , PpThreshold(*this)	// "PpThreshold"
    , PpkThreshold(*this)	// "PpkThreshold"
    , NumOutOfControl(*this)	// "NumOutOfControl"
    , TrendGrouping(*this)	// "TrendGrouping"
    , SkewGrouping(*this)	// "SkewGrouping"
    , OneThirdGrouping(*this)	// "OneThirdGrouping"
    , TwoThirdsGrouping(*this)	// "TwoThirdsGrouping"
    , Oscillation(*this)	// "Oscillation"
    , Stratification(*this)	// "Stratification"
    , NumOutOfControlRng(*this)	// "NumOutOfControlRng"
{
}

CControlMethodType::CControlMethodType(CControlMethodType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , AssignableCauseId(*this)	// "AssignableCauseId"
    , NumOutOfTolerance(*this)	// "NumOutOfTolerance"
    , CpThreshold(*this)	// "CpThreshold"
    , CpkThreshold(*this)	// "CpkThreshold"
    , PpThreshold(*this)	// "PpThreshold"
    , PpkThreshold(*this)	// "PpkThreshold"
    , NumOutOfControl(*this)	// "NumOutOfControl"
    , TrendGrouping(*this)	// "TrendGrouping"
    , SkewGrouping(*this)	// "SkewGrouping"
    , OneThirdGrouping(*this)	// "OneThirdGrouping"
    , TwoThirdsGrouping(*this)	// "TwoThirdsGrouping"
    , Oscillation(*this)	// "Oscillation"
    , Stratification(*this)	// "Stratification"
    , NumOutOfControlRng(*this)	// "NumOutOfControlRng"
{
}

void CControlMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ControlMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateCharacteristicActualBaseType::CCoordinateCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicActualBaseType(node)
    , TypeOfCoordinates(*this)	// "TypeOfCoordinates"
{
}

CCoordinateCharacteristicActualBaseType::CCoordinateCharacteristicActualBaseType(CCoordinateCharacteristicActualBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicActualBaseType(other.GetNode())
    , TypeOfCoordinates(*this)	// "TypeOfCoordinates"
{
}

void CCoordinateCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateCharacteristicDefinitionBaseType::CCoordinateCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicDefinitionBaseType(node)
{
}

CCoordinateCharacteristicDefinitionBaseType::CCoordinateCharacteristicDefinitionBaseType(CCoordinateCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CCoordinateCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateCharacteristicItemBaseType::CCoordinateCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicItemBaseType(node)
{
}

CCoordinateCharacteristicItemBaseType::CCoordinateCharacteristicItemBaseType(CCoordinateCharacteristicItemBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicItemBaseType(other.GetNode())
{
}

void CCoordinateCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateCharacteristicNominalBaseType::CCoordinateCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicNominalBaseType(node)
{
}

CCoordinateCharacteristicNominalBaseType::CCoordinateCharacteristicNominalBaseType(CCoordinateCharacteristicNominalBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicNominalBaseType(other.GetNode())
{
}

void CCoordinateCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateEnumType::CCoordinateEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCoordinateEnumType::CCoordinateEnumType(CCoordinateEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCoordinateMeasureFeatureMethodType::CCoordinateMeasureFeatureMethodType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasureFeatureMethodBaseType(node)
    , NumberOfMeasurementPoints(*this)	// "NumberOfMeasurementPoints"
{
}

CCoordinateMeasureFeatureMethodType::CCoordinateMeasureFeatureMethodType(CCoordinateMeasureFeatureMethodType const& other)
    : ::qif191::t::CMeasureFeatureMethodBaseType(other.GetNode())
    , NumberOfMeasurementPoints(*this)	// "NumberOfMeasurementPoints"
{
}

void CCoordinateMeasureFeatureMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateMeasureFeatureMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateSystemActualTransformType::CCoordinateSystemActualTransformType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ActualTransform(*this)	// "ActualTransform"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

CCoordinateSystemActualTransformType::CCoordinateSystemActualTransformType(CCoordinateSystemActualTransformType const& other)
    : TypeBase(other.GetNode())
    , ActualTransform(*this)	// "ActualTransform"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

void CCoordinateSystemActualTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateSystemActualTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateSystemActualTransformsType::CCoordinateSystemActualTransformsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Transform(*this)	// "Transform"
{
}

CCoordinateSystemActualTransformsType::CCoordinateSystemActualTransformsType(CCoordinateSystemActualTransformsType const& other)
    : TypeBase(other.GetNode())
    , Transform(*this)	// "Transform"
{
}

void CCoordinateSystemActualTransformsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateSystemActualTransformsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateSystemCoreType::CCoordinateSystemCoreType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Rotation(*this)	// "Rotation"
    , Origin(*this)	// "Origin"
{
}

CCoordinateSystemCoreType::CCoordinateSystemCoreType(CCoordinateSystemCoreType const& other)
    : TypeBase(other.GetNode())
    , Rotation(*this)	// "Rotation"
    , Origin(*this)	// "Origin"
{
}

void CCoordinateSystemCoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateSystemCoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateSystemListType::CCoordinateSystemListType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CoordinateSystem(*this)	// "CoordinateSystem"
    , CommonCoordinateSystemId(*this)	// "CommonCoordinateSystemId"
    , MachineCoordinateSystemId(*this)	// "MachineCoordinateSystemId"
{
}

CCoordinateSystemListType::CCoordinateSystemListType(CCoordinateSystemListType const& other)
    : TypeBase(other.GetNode())
    , CoordinateSystem(*this)	// "CoordinateSystem"
    , CommonCoordinateSystemId(*this)	// "CommonCoordinateSystemId"
    , MachineCoordinateSystemId(*this)	// "MachineCoordinateSystemId"
{
}

void CCoordinateSystemListType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateSystemListType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateSystemSetType::CCoordinateSystemSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , CoordinateSystem(*this)	// "CoordinateSystem"
{
}

CCoordinateSystemSetType::CCoordinateSystemSetType(CCoordinateSystemSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , CoordinateSystem(*this)	// "CoordinateSystem"
{
}

void CCoordinateSystemSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateSystemSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateSystemType::CCoordinateSystemType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Name(*this)	// "Name"
    , NominalTransform(*this)	// "NominalTransform"
    , InternalCADCoordinateSystemId(*this)	// "InternalCADCoordinateSystemId"
    , ExternalCADCoordinateSystemId(*this)	// "ExternalCADCoordinateSystemId"
    , AlignmentOperations(*this)	// "AlignmentOperations"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

CCoordinateSystemType::CCoordinateSystemType(CCoordinateSystemType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Name(*this)	// "Name"
    , NominalTransform(*this)	// "NominalTransform"
    , InternalCADCoordinateSystemId(*this)	// "InternalCADCoordinateSystemId"
    , ExternalCADCoordinateSystemId(*this)	// "ExternalCADCoordinateSystemId"
    , AlignmentOperations(*this)	// "AlignmentOperations"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

void CCoordinateSystemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateSystemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCorrectiveActionPlanType::CCorrectiveActionPlanType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , AssignableCauses(*this)	// "AssignableCauses"
    , CorrectiveActions(*this)	// "CorrectiveActions"
{
}

CCorrectiveActionPlanType::CCorrectiveActionPlanType(CCorrectiveActionPlanType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , AssignableCauses(*this)	// "AssignableCauses"
    , CorrectiveActions(*this)	// "CorrectiveActions"
{
}

void CCorrectiveActionPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CorrectiveActionPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCorrectiveActionPlansType::CCorrectiveActionPlansType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CorrectiveActionPlan(*this)	// "CorrectiveActionPlan"
{
}

CCorrectiveActionPlansType::CCorrectiveActionPlansType(CCorrectiveActionPlansType const& other)
    : TypeBase(other.GetNode())
    , CorrectiveActionPlan(*this)	// "CorrectiveActionPlan"
{
}

void CCorrectiveActionPlansType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CorrectiveActionPlansType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCorrectiveActionType::CCorrectiveActionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , ActionToTake(*this)	// "ActionToTake"
    , ActionToTakeEnum(*this)	// "ActionToTakeEnum"
{
}

CCorrectiveActionType::CCorrectiveActionType(CCorrectiveActionType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , ActionToTake(*this)	// "ActionToTake"
    , ActionToTakeEnum(*this)	// "ActionToTakeEnum"
{
}

void CCorrectiveActionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CorrectiveActionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCorrectiveActionsType::CCorrectiveActionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CorrectiveAction(*this)	// "CorrectiveAction"
{
}

CCorrectiveActionsType::CCorrectiveActionsType(CCorrectiveActionsType const& other)
    : TypeBase(other.GetNode())
    , CorrectiveAction(*this)	// "CorrectiveAction"
{
}

void CCorrectiveActionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CorrectiveActionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionAngularType::CCriterionAngularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CCriterionAngularType::CCriterionAngularType(CCriterionAngularType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CCriterionAngularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionAngularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionAreaType::CCriterionAreaType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , areaUnit(*this)	// "@areaUnit"
{
}

CCriterionAreaType::CCriterionAreaType(CCriterionAreaType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , areaUnit(*this)	// "@areaUnit"
{
}

void CCriterionAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionDecimalType::CCriterionDecimalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Limit(*this)	// "Limit"
    , NumberAllowedExceptions(*this)	// "NumberAllowedExceptions"
    , ExtremeLimit(*this)	// "ExtremeLimit"
{
}

CCriterionDecimalType::CCriterionDecimalType(CCriterionDecimalType const& other)
    : TypeBase(other.GetNode())
    , Limit(*this)	// "Limit"
    , NumberAllowedExceptions(*this)	// "NumberAllowedExceptions"
    , ExtremeLimit(*this)	// "ExtremeLimit"
{
}

void CCriterionDecimalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionDecimalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionForceType::CCriterionForceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , forceUnit(*this)	// "@forceUnit"
{
}

CCriterionForceType::CCriterionForceType(CCriterionForceType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , forceUnit(*this)	// "@forceUnit"
{
}

void CCriterionForceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionForceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionIntegerType::CCriterionIntegerType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Limit(*this)	// "Limit"
    , NumberAllowedExceptions(*this)	// "NumberAllowedExceptions"
    , ExtremeLimit(*this)	// "ExtremeLimit"
{
}

CCriterionIntegerType::CCriterionIntegerType(CCriterionIntegerType const& other)
    : TypeBase(other.GetNode())
    , Limit(*this)	// "Limit"
    , NumberAllowedExceptions(*this)	// "NumberAllowedExceptions"
    , ExtremeLimit(*this)	// "ExtremeLimit"
{
}

void CCriterionIntegerType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionIntegerType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionLinearType::CCriterionLinearType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , linearUnit(*this)	// "@linearUnit"
{
}

CCriterionLinearType::CCriterionLinearType(CCriterionLinearType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
{
}

void CCriterionLinearType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionLinearType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionMassType::CCriterionMassType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , massUnit(*this)	// "@massUnit"
{
}

CCriterionMassType::CCriterionMassType(CCriterionMassType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , massUnit(*this)	// "@massUnit"
{
}

void CCriterionMassType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionMassType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionOutOfType::CCriterionOutOfType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Numerator(*this)	// "Numerator"
    , Denominator(*this)	// "Denominator"
    , NumberAllowedExceptions(*this)	// "NumberAllowedExceptions"
{
}

CCriterionOutOfType::CCriterionOutOfType(CCriterionOutOfType const& other)
    : TypeBase(other.GetNode())
    , Numerator(*this)	// "Numerator"
    , Denominator(*this)	// "Denominator"
    , NumberAllowedExceptions(*this)	// "NumberAllowedExceptions"
{
}

void CCriterionOutOfType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionOutOfType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionPressureType::CCriterionPressureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , pressureUnit(*this)	// "@pressureUnit"
{
}

CCriterionPressureType::CCriterionPressureType(CCriterionPressureType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , pressureUnit(*this)	// "@pressureUnit"
{
}

void CCriterionPressureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionPressureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionSpeedType::CCriterionSpeedType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , speedUnit(*this)	// "@speedUnit"
{
}

CCriterionSpeedType::CCriterionSpeedType(CCriterionSpeedType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , speedUnit(*this)	// "@speedUnit"
{
}

void CCriterionSpeedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionSpeedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionTemperatureType::CCriterionTemperatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

CCriterionTemperatureType::CCriterionTemperatureType(CCriterionTemperatureType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

void CCriterionTemperatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionTemperatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionTimeType::CCriterionTimeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , timeUnit(*this)	// "@timeUnit"
{
}

CCriterionTimeType::CCriterionTimeType(CCriterionTimeType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , timeUnit(*this)	// "@timeUnit"
{
}

void CCriterionTimeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionTimeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCriterionUserDefinedUnitType::CCriterionUserDefinedUnitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCriterionDecimalType(node)
    , unitName(*this)	// "@unitName"
{
}

CCriterionUserDefinedUnitType::CCriterionUserDefinedUnitType(CCriterionUserDefinedUnitType const& other)
    : ::qif191::t::CCriterionDecimalType(other.GetNode())
    , unitName(*this)	// "@unitName"
{
}

void CCriterionUserDefinedUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CriterionUserDefinedUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidActualDeterminationType::CCuboidActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CCuboidActualDeterminationType::CCuboidActualDeterminationType(CCuboidActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CCuboidActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidBestFitType::CCuboidBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCuboidBestFitType::CCuboidBestFitType(CCuboidBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCuboidBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidCastType::CCuboidCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCuboidCastType::CCuboidCastType(CCuboidCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCuboidCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidCheckedFeatureType::CCuboidCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CCuboidCheckedFeatureType::CCuboidCheckedFeatureType(CCuboidCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CCuboidCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidCheckedType::CCuboidCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CCuboidCheckedType::CCuboidCheckedType(CCuboidCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CCuboidCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidConstructionMethodType::CCuboidConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CCuboidConstructionMethodType::CCuboidConstructionMethodType(CCuboidConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CCuboidConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidCopyType::CCuboidCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCuboid(*this)	// "BaseCuboid"
{
}

CCuboidCopyType::CCuboidCopyType(CCuboidCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCuboid(*this)	// "BaseCuboid"
{
}

void CCuboidCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidFeatureActualType::CCuboidFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Length(*this)	// "Length"
    , LengthMax(*this)	// "LengthMax"
    , LengthMin(*this)	// "LengthMin"
    , LengthVector(*this)	// "LengthVector"
    , Width(*this)	// "Width"
    , WidthMax(*this)	// "WidthMax"
    , WidthMin(*this)	// "WidthMin"
    , Height(*this)	// "Height"
    , HeightMax(*this)	// "HeightMax"
    , HeightMin(*this)	// "HeightMin"
    , HeightVector(*this)	// "HeightVector"
    , Form(*this)	// "Form"
{
}

CCuboidFeatureActualType::CCuboidFeatureActualType(CCuboidFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Length(*this)	// "Length"
    , LengthMax(*this)	// "LengthMax"
    , LengthMin(*this)	// "LengthMin"
    , LengthVector(*this)	// "LengthVector"
    , Width(*this)	// "Width"
    , WidthMax(*this)	// "WidthMax"
    , WidthMin(*this)	// "WidthMin"
    , Height(*this)	// "Height"
    , HeightMax(*this)	// "HeightMax"
    , HeightMin(*this)	// "HeightMin"
    , HeightVector(*this)	// "HeightVector"
    , Form(*this)	// "Form"
{
}

void CCuboidFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidFeatureDefinitionType::CCuboidFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Length(*this)	// "Length"
    , Width(*this)	// "Width"
    , Height(*this)	// "Height"
{
}

CCuboidFeatureDefinitionType::CCuboidFeatureDefinitionType(CCuboidFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Length(*this)	// "Length"
    , Width(*this)	// "Width"
    , Height(*this)	// "Height"
{
}

void CCuboidFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidFeatureItemType::CCuboidFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CCuboidFeatureItemType::CCuboidFeatureItemType(CCuboidFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CCuboidFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidFeatureNominalType::CCuboidFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , LengthVector(*this)	// "LengthVector"
    , HeightVector(*this)	// "HeightVector"
{
}

CCuboidFeatureNominalType::CCuboidFeatureNominalType(CCuboidFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , LengthVector(*this)	// "LengthVector"
    , HeightVector(*this)	// "HeightVector"
{
}

void CCuboidFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidPointSamplingStrategyType::CCuboidPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CCuboidPointSamplingStrategyType::CCuboidPointSamplingStrategyType(CCuboidPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CCuboidPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidRecompType::CCuboidRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CCuboidRecompType::CCuboidRecompType(CCuboidRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CCuboidRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCuboidTransformType::CCuboidTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCuboid(*this)	// "BaseCuboid"
    , Transformation(*this)	// "Transformation"
{
}

CCuboidTransformType::CCuboidTransformType(CCuboidTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCuboid(*this)	// "BaseCuboid"
    , Transformation(*this)	// "Transformation"
{
}

void CCuboidTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CuboidTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve12BaseType::CCurve12BaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometryBaseType(node)
{
}

CCurve12BaseType::CCurve12BaseType(CCurve12BaseType const& other)
    : ::qif191::t::CGeometryBaseType(other.GetNode())
{
}

void CCurve12BaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve12BaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve12OrientedType::CCurve12OrientedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Turned(*this)	// "@Turned"
    , Curve12Core(*this)	// "Curve12Core"
    , Aggregate12Core(*this)	// "Aggregate12Core"
    , ArcCircular12Core(*this)	// "ArcCircular12Core"
    , ArcConic12Core(*this)	// "ArcConic12Core"
    , Nurbs12Core(*this)	// "Nurbs12Core"
    , Polyline12Core(*this)	// "Polyline12Core"
    , Segment12Core(*this)	// "Segment12Core"
    , Spline12Core(*this)	// "Spline12Core"
{
}

CCurve12OrientedType::CCurve12OrientedType(CCurve12OrientedType const& other)
    : TypeBase(other.GetNode())
    , Turned(*this)	// "@Turned"
    , Curve12Core(*this)	// "Curve12Core"
    , Aggregate12Core(*this)	// "Aggregate12Core"
    , ArcCircular12Core(*this)	// "ArcCircular12Core"
    , ArcConic12Core(*this)	// "ArcConic12Core"
    , Nurbs12Core(*this)	// "Nurbs12Core"
    , Polyline12Core(*this)	// "Polyline12Core"
    , Segment12Core(*this)	// "Segment12Core"
    , Spline12Core(*this)	// "Spline12Core"
{
}

void CCurve12OrientedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve12OrientedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve12SetType::CCurve12SetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Curve12(*this)	// "Curve12"
    , Aggregate12(*this)	// "Aggregate12"
    , ArcCircular12(*this)	// "ArcCircular12"
    , ArcConic12(*this)	// "ArcConic12"
    , Nurbs12(*this)	// "Nurbs12"
    , Polyline12(*this)	// "Polyline12"
    , Segment12(*this)	// "Segment12"
    , Spline12(*this)	// "Spline12"
{
}

CCurve12SetType::CCurve12SetType(CCurve12SetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Curve12(*this)	// "Curve12"
    , Aggregate12(*this)	// "Aggregate12"
    , ArcCircular12(*this)	// "ArcCircular12"
    , ArcConic12(*this)	// "ArcConic12"
    , Nurbs12(*this)	// "Nurbs12"
    , Polyline12(*this)	// "Polyline12"
    , Segment12(*this)	// "Segment12"
    , Spline12(*this)	// "Spline12"
{
}

void CCurve12SetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve12SetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve13BaseType::CCurve13BaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometryBaseType(node)
{
}

CCurve13BaseType::CCurve13BaseType(CCurve13BaseType const& other)
    : ::qif191::t::CGeometryBaseType(other.GetNode())
{
}

void CCurve13BaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve13BaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve13CoreType::CCurve13CoreType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Curve13Core(*this)	// "Curve13Core"
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Polyline13Core(*this)	// "Polyline13Core"
    , Segment13Core(*this)	// "Segment13Core"
    , Spline13Core(*this)	// "Spline13Core"
{
}

CCurve13CoreType::CCurve13CoreType(CCurve13CoreType const& other)
    : TypeBase(other.GetNode())
    , Curve13Core(*this)	// "Curve13Core"
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Polyline13Core(*this)	// "Polyline13Core"
    , Segment13Core(*this)	// "Segment13Core"
    , Spline13Core(*this)	// "Spline13Core"
{
}

void CCurve13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve13OrientedType::CCurve13OrientedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Turned(*this)	// "@Turned"
    , Curve13Core(*this)	// "Curve13Core"
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Polyline13Core(*this)	// "Polyline13Core"
    , Segment13Core(*this)	// "Segment13Core"
    , Spline13Core(*this)	// "Spline13Core"
{
}

CCurve13OrientedType::CCurve13OrientedType(CCurve13OrientedType const& other)
    : TypeBase(other.GetNode())
    , Turned(*this)	// "@Turned"
    , Curve13Core(*this)	// "Curve13Core"
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Polyline13Core(*this)	// "Polyline13Core"
    , Segment13Core(*this)	// "Segment13Core"
    , Spline13Core(*this)	// "Spline13Core"
{
}

void CCurve13OrientedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve13OrientedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurve13SetType::CCurve13SetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Curve13(*this)	// "Curve13"
    , Aggregate13(*this)	// "Aggregate13"
    , ArcCircular13(*this)	// "ArcCircular13"
    , ArcConic13(*this)	// "ArcConic13"
    , Nurbs13(*this)	// "Nurbs13"
    , Polyline13(*this)	// "Polyline13"
    , Segment13(*this)	// "Segment13"
    , Spline13(*this)	// "Spline13"
{
}

CCurve13SetType::CCurve13SetType(CCurve13SetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Curve13(*this)	// "Curve13"
    , Aggregate13(*this)	// "Aggregate13"
    , ArcCircular13(*this)	// "ArcCircular13"
    , ArcConic13(*this)	// "ArcConic13"
    , Nurbs13(*this)	// "Nurbs13"
    , Polyline13(*this)	// "Polyline13"
    , Segment13(*this)	// "Segment13"
    , Spline13(*this)	// "Spline13"
{
}

void CCurve13SetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Curve13SetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveCoreBaseType::CCurveCoreBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Domain(*this)	// "@Domain"
{
}

CCurveCoreBaseType::CCurveCoreBaseType(CCurveCoreBaseType const& other)
    : TypeBase(other.GetNode())
    , Domain(*this)	// "@Domain"
{
}

void CCurveCoreBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveCoreBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveLengthCharacteristicActualType::CCurveLengthCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CCurveLengthCharacteristicActualType::CCurveLengthCharacteristicActualType(CCurveLengthCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CCurveLengthCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveLengthCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveLengthCharacteristicDefinitionType::CCurveLengthCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CCurveLengthCharacteristicDefinitionType::CCurveLengthCharacteristicDefinitionType(CCurveLengthCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CCurveLengthCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveLengthCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveLengthCharacteristicItemType::CCurveLengthCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CCurveLengthCharacteristicItemType::CCurveLengthCharacteristicItemType(CCurveLengthCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CCurveLengthCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveLengthCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveLengthCharacteristicNominalType::CCurveLengthCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CCurveLengthCharacteristicNominalType::CCurveLengthCharacteristicNominalType(CCurveLengthCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CCurveLengthCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveLengthCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveLengthCharacteristicStatsEvalType::CCurveLengthCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CCurveLengthCharacteristicStatsEvalType::CCurveLengthCharacteristicStatsEvalType(CCurveLengthCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CCurveLengthCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveLengthCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveMeshSetType::CCurveMeshSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , PathTriangulation(*this)	// "PathTriangulation"
{
}

CCurveMeshSetType::CCurveMeshSetType(CCurveMeshSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , PathTriangulation(*this)	// "PathTriangulation"
{
}

void CCurveMeshSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveMeshSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveSubstituteFeatureAlgorithmEnumType::CCurveSubstituteFeatureAlgorithmEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCurveSubstituteFeatureAlgorithmEnumType::CCurveSubstituteFeatureAlgorithmEnumType(CCurveSubstituteFeatureAlgorithmEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CCurveSubstituteFeatureAlgorithmType::CCurveSubstituteFeatureAlgorithmType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(node)
    , CurveSubstituteFeatureAlgorithmEnum(*this)	// "CurveSubstituteFeatureAlgorithmEnum"
    , OtherCurveSubstituteFeatureAlgorithm(*this)	// "OtherCurveSubstituteFeatureAlgorithm"
{
}

CCurveSubstituteFeatureAlgorithmType::CCurveSubstituteFeatureAlgorithmType(CCurveSubstituteFeatureAlgorithmType const& other)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(other.GetNode())
    , CurveSubstituteFeatureAlgorithmEnum(*this)	// "CurveSubstituteFeatureAlgorithmEnum"
    , OtherCurveSubstituteFeatureAlgorithm(*this)	// "OtherCurveSubstituteFeatureAlgorithm"
{
}

void CCurveSubstituteFeatureAlgorithmType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveSubstituteFeatureAlgorithmType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCustomerOrganizationType::CCustomerOrganizationType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrganizationType(node)
    , CustomerNumber(*this)	// "CustomerNumber"
{
}

CCustomerOrganizationType::CCustomerOrganizationType(CCustomerOrganizationType const& other)
    : ::qif191::t::COrganizationType(other.GetNode())
    , CustomerNumber(*this)	// "CustomerNumber"
{
}

void CCustomerOrganizationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CustomerOrganizationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinder23CoreType::CCylinder23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , TurnedV(*this)	// "@TurnedV"
    , ScaleV(*this)	// "@ScaleV"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

CCylinder23CoreType::CCylinder23CoreType(CCylinder23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , TurnedV(*this)	// "@TurnedV"
    , ScaleV(*this)	// "@ScaleV"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

void CCylinder23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Cylinder23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinder23Type::CCylinder23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Cylinder23Core(*this)	// "Cylinder23Core"
    , Transform(*this)	// "Transform"
{
}

CCylinder23Type::CCylinder23Type(CCylinder23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Cylinder23Core(*this)	// "Cylinder23Core"
    , Transform(*this)	// "Transform"
{
}

void CCylinder23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Cylinder23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderActualDeterminationType::CCylinderActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CCylinderActualDeterminationType::CCylinderActualDeterminationType(CCylinderActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CCylinderActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderBestFitType::CCylinderBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCylinderBestFitType::CCylinderBestFitType(CCylinderBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCylinderBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderCastType::CCylinderCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCylinderCastType::CCylinderCastType(CCylinderCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCylinderCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderCheckedFeatureType::CCylinderCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CCylinderCheckedFeatureType::CCylinderCheckedFeatureType(CCylinderCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CCylinderCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderCheckedType::CCylinderCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CCylinderCheckedType::CCylinderCheckedType(CCylinderCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CCylinderCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderConstructionMethodType::CCylinderConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

CCylinderConstructionMethodType::CCylinderConstructionMethodType(CCylinderConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void CCylinderConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderCopyType::CCylinderCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCylinder(*this)	// "BaseCylinder"
{
}

CCylinderCopyType::CCylinderCopyType(CCylinderCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCylinder(*this)	// "BaseCylinder"
{
}

void CCylinderCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderFeatureActualType::CCylinderFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

CCylinderFeatureActualType::CCylinderFeatureActualType(CCylinderFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

void CCylinderFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderFeatureDefinitionType::CCylinderFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Bottom(*this)	// "Bottom"
{
}

CCylinderFeatureDefinitionType::CCylinderFeatureDefinitionType(CCylinderFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Bottom(*this)	// "Bottom"
{
}

void CCylinderFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderFeatureItemType::CCylinderFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CCylinderFeatureItemType::CCylinderFeatureItemType(CCylinderFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CCylinderFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderFeatureNominalType::CCylinderFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

CCylinderFeatureNominalType::CCylinderFeatureNominalType(CCylinderFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

void CCylinderFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderFromScanType::CCylinderFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

CCylinderFromScanType::CCylinderFromScanType(CCylinderFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

void CCylinderFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderPointSamplingStrategyType::CCylinderPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CCylinderPointSamplingStrategyType::CCylinderPointSamplingStrategyType(CCylinderPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CCylinderPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderRecompType::CCylinderRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CCylinderRecompType::CCylinderRecompType(CCylinderRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CCylinderRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderTransformType::CCylinderTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCylinder(*this)	// "BaseCylinder"
    , Transformation(*this)	// "Transformation"
{
}

CCylinderTransformType::CCylinderTransformType(CCylinderTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCylinder(*this)	// "BaseCylinder"
    , Transformation(*this)	// "Transformation"
{
}

void CCylinderTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylinderType::CCylinderType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CenterPoint(*this)	// "CenterPoint"
    , Diameter(*this)	// "Diameter"
    , Axis(*this)	// "Axis"
    , Length(*this)	// "Length"
{
}

CCylinderType::CCylinderType(CCylinderType const& other)
    : TypeBase(other.GetNode())
    , CenterPoint(*this)	// "CenterPoint"
    , Diameter(*this)	// "Diameter"
    , Axis(*this)	// "Axis"
    , Length(*this)	// "Length"
{
}

void CCylinderType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylinderType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentActualDeterminationType::CCylindricalSegmentActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CCylindricalSegmentActualDeterminationType::CCylindricalSegmentActualDeterminationType(CCylindricalSegmentActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CCylindricalSegmentActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentBestFitType::CCylindricalSegmentBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCylindricalSegmentBestFitType::CCylindricalSegmentBestFitType(CCylindricalSegmentBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCylindricalSegmentBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentCastType::CCylindricalSegmentCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CCylindricalSegmentCastType::CCylindricalSegmentCastType(CCylindricalSegmentCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CCylindricalSegmentCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentCheckedFeatureType::CCylindricalSegmentCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CCylindricalSegmentCheckedFeatureType::CCylindricalSegmentCheckedFeatureType(CCylindricalSegmentCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CCylindricalSegmentCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentCheckedType::CCylindricalSegmentCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CCylindricalSegmentCheckedType::CCylindricalSegmentCheckedType(CCylindricalSegmentCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CCylindricalSegmentCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentConstructionMethodType::CCylindricalSegmentConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CCylindricalSegmentConstructionMethodType::CCylindricalSegmentConstructionMethodType(CCylindricalSegmentConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CCylindricalSegmentConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentCopyType::CCylindricalSegmentCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCylindricalSegment(*this)	// "BaseCylindricalSegment"
{
}

CCylindricalSegmentCopyType::CCylindricalSegmentCopyType(CCylindricalSegmentCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCylindricalSegment(*this)	// "BaseCylindricalSegment"
{
}

void CCylindricalSegmentCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentFeatureActualType::CCylindricalSegmentFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

CCylindricalSegmentFeatureActualType::CCylindricalSegmentFeatureActualType(CCylindricalSegmentFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , Sweep(*this)	// "Sweep"
    , Form(*this)	// "Form"
{
}

void CCylindricalSegmentFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentFeatureDefinitionType::CCylindricalSegmentFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Bottom(*this)	// "Bottom"
{
}

CCylindricalSegmentFeatureDefinitionType::CCylindricalSegmentFeatureDefinitionType(CCylindricalSegmentFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Bottom(*this)	// "Bottom"
{
}

void CCylindricalSegmentFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentFeatureItemType::CCylindricalSegmentFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CCylindricalSegmentFeatureItemType::CCylindricalSegmentFeatureItemType(CCylindricalSegmentFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CCylindricalSegmentFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentFeatureNominalType::CCylindricalSegmentFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

CCylindricalSegmentFeatureNominalType::CCylindricalSegmentFeatureNominalType(CCylindricalSegmentFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
{
}

void CCylindricalSegmentFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentPointSamplingStrategyType::CCylindricalSegmentPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CCylindricalSegmentPointSamplingStrategyType::CCylindricalSegmentPointSamplingStrategyType(CCylindricalSegmentPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CCylindricalSegmentPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentRecompType::CCylindricalSegmentRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CCylindricalSegmentRecompType::CCylindricalSegmentRecompType(CCylindricalSegmentRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CCylindricalSegmentRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricalSegmentTransformType::CCylindricalSegmentTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCylindricalSegment(*this)	// "BaseCylindricalSegment"
    , Transformation(*this)	// "Transformation"
{
}

CCylindricalSegmentTransformType::CCylindricalSegmentTransformType(CCylindricalSegmentTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCylindricalSegment(*this)	// "BaseCylindricalSegment"
    , Transformation(*this)	// "Transformation"
{
}

void CCylindricalSegmentTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricalSegmentTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricityCharacteristicActualType::CCylindricityCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicActualBaseType(node)
    , ZoneRadii(*this)	// "ZoneRadii"
    , ZoneAxis(*this)	// "ZoneAxis"
{
}

CCylindricityCharacteristicActualType::CCylindricityCharacteristicActualType(CCylindricityCharacteristicActualType const& other)
    : ::qif191::t::CFormCharacteristicActualBaseType(other.GetNode())
    , ZoneRadii(*this)	// "ZoneRadii"
    , ZoneAxis(*this)	// "ZoneAxis"
{
}

void CCylindricityCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricityCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricityCharacteristicDefinitionType::CCylindricityCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicDefinitionBaseType(node)
{
}

CCylindricityCharacteristicDefinitionType::CCylindricityCharacteristicDefinitionType(CCylindricityCharacteristicDefinitionType const& other)
    : ::qif191::t::CFormCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CCylindricityCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricityCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricityCharacteristicItemType::CCylindricityCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicItemBaseType(node)
{
}

CCylindricityCharacteristicItemType::CCylindricityCharacteristicItemType(CCylindricityCharacteristicItemType const& other)
    : ::qif191::t::CFormCharacteristicItemBaseType(other.GetNode())
{
}

void CCylindricityCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricityCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricityCharacteristicNominalType::CCylindricityCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CCylindricityCharacteristicNominalType::CCylindricityCharacteristicNominalType(CCylindricityCharacteristicNominalType const& other)
    : ::qif191::t::CFormCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CCylindricityCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricityCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCylindricityCharacteristicStatsEvalType::CCylindricityCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(node)
{
}

CCylindricityCharacteristicStatsEvalType::CCylindricityCharacteristicStatsEvalType(CCylindricityCharacteristicStatsEvalType const& other)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CCylindricityCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CylindricityCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CD3Type::CD3Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CD3Type::CD3Type(CD3Type const& other)
    : TypeBase(other.GetNode())
{
}


CD4Type::CD4Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CD4Type::CD4Type(CD4Type const& other)
    : TypeBase(other.GetNode())
{
}


CDMESelectionRuleType::CDMESelectionRuleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDMESelectionRuleType::CDMESelectionRuleType(CDMESelectionRuleType const& other)
    : TypeBase(other.GetNode())
{
}

void CDMESelectionRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DMESelectionRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDMESelectionRulesType::CDMESelectionRulesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DMESelectionRule(*this)	// "DMESelectionRule"
{
}

CDMESelectionRulesType::CDMESelectionRulesType(CDMESelectionRulesType const& other)
    : TypeBase(other.GetNode())
    , DMESelectionRule(*this)	// "DMESelectionRule"
{
}

void CDMESelectionRulesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DMESelectionRulesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumDefinitionType::CDatumDefinitionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , DatumLabel(*this)	// "DatumLabel"
    , DatumTargetIds(*this)	// "DatumTargetIds"
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
{
}

CDatumDefinitionType::CDatumDefinitionType(CDatumDefinitionType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , DatumLabel(*this)	// "DatumLabel"
    , DatumTargetIds(*this)	// "DatumTargetIds"
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
{
}

void CDatumDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumDefinitionsType::CDatumDefinitionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumDefinition(*this)	// "DatumDefinition"
{
}

CDatumDefinitionsType::CDatumDefinitionsType(CDatumDefinitionsType const& other)
    : TypeBase(other.GetNode())
    , DatumDefinition(*this)	// "DatumDefinition"
{
}

void CDatumDefinitionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumDefinitionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumFeatureBaseType::CDatumFeatureBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureItemId(*this)	// "FeatureItemId"
{
}

CDatumFeatureBaseType::CDatumFeatureBaseType(CDatumFeatureBaseType const& other)
    : TypeBase(other.GetNode())
    , FeatureItemId(*this)	// "FeatureItemId"
{
}

void CDatumFeatureBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumFeatureBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumFeatureSimulatorModifierType::CDatumFeatureSimulatorModifierType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , LinearSize(*this)	// "LinearSize"
    , DiametricalSize(*this)	// "DiametricalSize"
    , BasicSize(*this)	// "BasicSize"
{
}

CDatumFeatureSimulatorModifierType::CDatumFeatureSimulatorModifierType(CDatumFeatureSimulatorModifierType const& other)
    : TypeBase(other.GetNode())
    , LinearSize(*this)	// "LinearSize"
    , DiametricalSize(*this)	// "DiametricalSize"
    , BasicSize(*this)	// "BasicSize"
{
}

void CDatumFeatureSimulatorModifierType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumFeatureSimulatorModifierType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumPrecedenceAlignmentOperationType::CDatumPrecedenceAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , PrimaryAxis(*this)	// "PrimaryAxis"
    , SecondaryAxis(*this)	// "SecondaryAxis"
{
}

CDatumPrecedenceAlignmentOperationType::CDatumPrecedenceAlignmentOperationType(CDatumPrecedenceAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , PrimaryAxis(*this)	// "PrimaryAxis"
    , SecondaryAxis(*this)	// "SecondaryAxis"
{
}

void CDatumPrecedenceAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumPrecedenceAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumReferenceFrameType::CDatumReferenceFrameType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Datum(*this)	// "Datum"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

CDatumReferenceFrameType::CDatumReferenceFrameType(CDatumReferenceFrameType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Datum(*this)	// "Datum"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

void CDatumReferenceFrameType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumReferenceFrameType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumReferenceFramesType::CDatumReferenceFramesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumReferenceFrame(*this)	// "DatumReferenceFrame"
{
}

CDatumReferenceFramesType::CDatumReferenceFramesType(CDatumReferenceFramesType const& other)
    : TypeBase(other.GetNode())
    , DatumReferenceFrame(*this)	// "DatumReferenceFrame"
{
}

void CDatumReferenceFramesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumReferenceFramesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetCircularAreaDefinitionType::CDatumTargetCircularAreaDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Circle(*this)	// "Circle"
{
}

CDatumTargetCircularAreaDefinitionType::CDatumTargetCircularAreaDefinitionType(CDatumTargetCircularAreaDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Circle(*this)	// "Circle"
{
}

void CDatumTargetCircularAreaDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetCircularAreaDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetCircularLineDefinitionType::CDatumTargetCircularLineDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Circle(*this)	// "Circle"
{
}

CDatumTargetCircularLineDefinitionType::CDatumTargetCircularLineDefinitionType(CDatumTargetCircularLineDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Circle(*this)	// "Circle"
{
}

void CDatumTargetCircularLineDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetCircularLineDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetCylindricalAreaDefinitionType::CDatumTargetCylindricalAreaDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Cylinder(*this)	// "Cylinder"
{
}

CDatumTargetCylindricalAreaDefinitionType::CDatumTargetCylindricalAreaDefinitionType(CDatumTargetCylindricalAreaDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Cylinder(*this)	// "Cylinder"
{
}

void CDatumTargetCylindricalAreaDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetCylindricalAreaDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetDefinitionBaseType::CDatumTargetDefinitionBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , DatumTargetLabel(*this)	// "DatumTargetLabel"
    , FeatureNominalId(*this)	// "FeatureNominalId"
    , MovableDatumTarget(*this)	// "MovableDatumTarget"
{
}

CDatumTargetDefinitionBaseType::CDatumTargetDefinitionBaseType(CDatumTargetDefinitionBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , DatumTargetLabel(*this)	// "DatumTargetLabel"
    , FeatureNominalId(*this)	// "FeatureNominalId"
    , MovableDatumTarget(*this)	// "MovableDatumTarget"
{
}

void CDatumTargetDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetDefinitionsType::CDatumTargetDefinitionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , DatumTarget(*this)	// "DatumTarget"
    , DatumTargetCircularAreaDefinition(*this)	// "DatumTargetCircularAreaDefinition"
    , DatumTargetCircularLineDefinition(*this)	// "DatumTargetCircularLineDefinition"
    , DatumTargetCylindricalAreaDefinition(*this)	// "DatumTargetCylindricalAreaDefinition"
    , DatumTargetIrregularAreaDefinition(*this)	// "DatumTargetIrregularAreaDefinition"
    , DatumTargetLineDefinition(*this)	// "DatumTargetLineDefinition"
    , DatumTargetPointDefinition(*this)	// "DatumTargetPointDefinition"
    , DatumTargetRectangularAreaDefinition(*this)	// "DatumTargetRectangularAreaDefinition"
    , DatumTargetSphereDefinition(*this)	// "DatumTargetSphereDefinition"
{
}

CDatumTargetDefinitionsType::CDatumTargetDefinitionsType(CDatumTargetDefinitionsType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , DatumTarget(*this)	// "DatumTarget"
    , DatumTargetCircularAreaDefinition(*this)	// "DatumTargetCircularAreaDefinition"
    , DatumTargetCircularLineDefinition(*this)	// "DatumTargetCircularLineDefinition"
    , DatumTargetCylindricalAreaDefinition(*this)	// "DatumTargetCylindricalAreaDefinition"
    , DatumTargetIrregularAreaDefinition(*this)	// "DatumTargetIrregularAreaDefinition"
    , DatumTargetLineDefinition(*this)	// "DatumTargetLineDefinition"
    , DatumTargetPointDefinition(*this)	// "DatumTargetPointDefinition"
    , DatumTargetRectangularAreaDefinition(*this)	// "DatumTargetRectangularAreaDefinition"
    , DatumTargetSphereDefinition(*this)	// "DatumTargetSphereDefinition"
{
}

void CDatumTargetDefinitionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetDefinitionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetIrregularAreaDefinitionType::CDatumTargetIrregularAreaDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Boundary(*this)	// "Boundary"
{
}

CDatumTargetIrregularAreaDefinitionType::CDatumTargetIrregularAreaDefinitionType(CDatumTargetIrregularAreaDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Boundary(*this)	// "Boundary"
{
}

void CDatumTargetIrregularAreaDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetIrregularAreaDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetLineDefinitionType::CDatumTargetLineDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Line(*this)	// "Line"
{
}

CDatumTargetLineDefinitionType::CDatumTargetLineDefinitionType(CDatumTargetLineDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Line(*this)	// "Line"
{
}

void CDatumTargetLineDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetLineDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetPointDefinitionType::CDatumTargetPointDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Point(*this)	// "Point"
{
}

CDatumTargetPointDefinitionType::CDatumTargetPointDefinitionType(CDatumTargetPointDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Point(*this)	// "Point"
{
}

void CDatumTargetPointDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetPointDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetRectangularAreaDefinitionType::CDatumTargetRectangularAreaDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Rectangle(*this)	// "Rectangle"
{
}

CDatumTargetRectangularAreaDefinitionType::CDatumTargetRectangularAreaDefinitionType(CDatumTargetRectangularAreaDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Rectangle(*this)	// "Rectangle"
{
}

void CDatumTargetRectangularAreaDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetRectangularAreaDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTargetSphereDefinitionType::CDatumTargetSphereDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumTargetDefinitionBaseType(node)
    , Sphere(*this)	// "Sphere"
{
}

CDatumTargetSphereDefinitionType::CDatumTargetSphereDefinitionType(CDatumTargetSphereDefinitionType const& other)
    : ::qif191::t::CDatumTargetDefinitionBaseType(other.GetNode())
    , Sphere(*this)	// "Sphere"
{
}

void CDatumTargetSphereDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTargetSphereDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumTranslationType::CDatumTranslationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumTranslationAllowed(*this)	// "DatumTranslationAllowed"
{
}

CDatumTranslationType::CDatumTranslationType(CDatumTranslationType const& other)
    : TypeBase(other.GetNode())
    , DatumTranslationAllowed(*this)	// "DatumTranslationAllowed"
{
}

void CDatumTranslationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumTranslationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumType::CDatumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
    , MaterialModifier(*this)	// "MaterialModifier"
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , DatumFeatureSimulatorModifier(*this)	// "DatumFeatureSimulatorModifier"
    , DatumTranslation(*this)	// "DatumTranslation"
    , DegreesOfFreedom(*this)	// "DegreesOfFreedom"
    , ProjectedDatum(*this)	// "ProjectedDatum"
    , DiameterModifier(*this)	// "DiameterModifier"
    , SectionModifier(*this)	// "SectionModifier"
    , ContactingFeature(*this)	// "ContactingFeature"
    , DistanceVariable(*this)	// "DistanceVariable"
    , DatumFixed(*this)	// "DatumFixed"
    , ReducedDatum(*this)	// "ReducedDatum"
    , ConstrainOrientation(*this)	// "ConstrainOrientation"
    , ConstrainSubsequent(*this)	// "ConstrainSubsequent"
{
}

CDatumType::CDatumType(CDatumType const& other)
    : TypeBase(other.GetNode())
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
    , MaterialModifier(*this)	// "MaterialModifier"
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , DatumFeatureSimulatorModifier(*this)	// "DatumFeatureSimulatorModifier"
    , DatumTranslation(*this)	// "DatumTranslation"
    , DegreesOfFreedom(*this)	// "DegreesOfFreedom"
    , ProjectedDatum(*this)	// "ProjectedDatum"
    , DiameterModifier(*this)	// "DiameterModifier"
    , SectionModifier(*this)	// "SectionModifier"
    , ContactingFeature(*this)	// "ContactingFeature"
    , DistanceVariable(*this)	// "DistanceVariable"
    , DatumFixed(*this)	// "DatumFixed"
    , ReducedDatum(*this)	// "ReducedDatum"
    , ConstrainOrientation(*this)	// "ConstrainOrientation"
    , ConstrainSubsequent(*this)	// "ConstrainSubsequent"
{
}

void CDatumType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDatumWithPrecedenceType::CDatumWithPrecedenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SimpleDatum(*this)	// "SimpleDatum"
    , NominalDatumFeature(*this)	// "NominalDatumFeature"
    , ActualDatumFeature(*this)	// "ActualDatumFeature"
    , CompoundDatum(*this)	// "CompoundDatum"
    , Precedence(*this)	// "Precedence"
{
}

CDatumWithPrecedenceType::CDatumWithPrecedenceType(CDatumWithPrecedenceType const& other)
    : TypeBase(other.GetNode())
    , SimpleDatum(*this)	// "SimpleDatum"
    , NominalDatumFeature(*this)	// "NominalDatumFeature"
    , ActualDatumFeature(*this)	// "ActualDatumFeature"
    , CompoundDatum(*this)	// "CompoundDatum"
    , Precedence(*this)	// "Precedence"
{
}

void CDatumWithPrecedenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DatumWithPrecedenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDefinitionExternalType::CDefinitionExternalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , PrintedDrawing(*this)	// "PrintedDrawing"
    , DigitalDrawing(*this)	// "DigitalDrawing"
    , DigitalModel(*this)	// "DigitalModel"
    , PhysicalModel(*this)	// "PhysicalModel"
{
}

CDefinitionExternalType::CDefinitionExternalType(CDefinitionExternalType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , PrintedDrawing(*this)	// "PrintedDrawing"
    , DigitalDrawing(*this)	// "DigitalDrawing"
    , DigitalModel(*this)	// "DigitalModel"
    , PhysicalModel(*this)	// "PhysicalModel"
{
}

void CDefinitionExternalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DefinitionExternalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDegreeOfFreedomEnumType::CDegreeOfFreedomEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDegreeOfFreedomEnumType::CDegreeOfFreedomEnumType(CDegreeOfFreedomEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDegreesOfFreedomType::CDegreesOfFreedomType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DegreeOfFreedom(*this)	// "DegreeOfFreedom"
    , ISODegreeOfFreedom(*this)	// "ISODegreeOfFreedom"
{
}

CDegreesOfFreedomType::CDegreesOfFreedomType(CDegreesOfFreedomType const& other)
    : TypeBase(other.GetNode())
    , DegreeOfFreedom(*this)	// "DegreeOfFreedom"
    , ISODegreeOfFreedom(*this)	// "ISODegreeOfFreedom"
{
}

void CDegreesOfFreedomType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DegreesOfFreedomType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDepthCharacteristicActualType::CDepthCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CDepthCharacteristicActualType::CDepthCharacteristicActualType(CDepthCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CDepthCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DepthCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDepthCharacteristicDefinitionType::CDepthCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CDepthCharacteristicDefinitionType::CDepthCharacteristicDefinitionType(CDepthCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CDepthCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DepthCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDepthCharacteristicItemType::CDepthCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CDepthCharacteristicItemType::CDepthCharacteristicItemType(CDepthCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CDepthCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DepthCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDepthCharacteristicNominalType::CDepthCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CDepthCharacteristicNominalType::CDepthCharacteristicNominalType(CDepthCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CDepthCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DepthCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDepthCharacteristicStatsEvalType::CDepthCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CDepthCharacteristicStatsEvalType::CDepthCharacteristicStatsEvalType(CDepthCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CDepthCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DepthCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterCharacteristicActualType::CDiameterCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CDiameterCharacteristicActualType::CDiameterCharacteristicActualType(CDiameterCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CDiameterCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DiameterCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterCharacteristicDefinitionType::CDiameterCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CDiameterCharacteristicDefinitionType::CDiameterCharacteristicDefinitionType(CDiameterCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CDiameterCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DiameterCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterCharacteristicItemType::CDiameterCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CDiameterCharacteristicItemType::CDiameterCharacteristicItemType(CDiameterCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CDiameterCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DiameterCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterCharacteristicNominalType::CDiameterCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CDiameterCharacteristicNominalType::CDiameterCharacteristicNominalType(CDiameterCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CDiameterCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DiameterCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterCharacteristicStatsEvalType::CDiameterCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CDiameterCharacteristicStatsEvalType::CDiameterCharacteristicStatsEvalType(CDiameterCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CDiameterCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DiameterCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterModifierEnumType::CDiameterModifierEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDiameterModifierEnumType::CDiameterModifierEnumType(CDiameterModifierEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDigitalDrawingType::CDigitalDrawingType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , File(*this)	// "File"
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Entities(*this)	// "Entities"
{
}

CDigitalDrawingType::CDigitalDrawingType(CDigitalDrawingType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , File(*this)	// "File"
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Entities(*this)	// "Entities"
{
}

void CDigitalDrawingType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DigitalDrawingType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDigitalModelFormatEnumType::CDigitalModelFormatEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDigitalModelFormatEnumType::CDigitalModelFormatEnumType(CDigitalModelFormatEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDigitalModelFormatType::CDigitalModelFormatType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DigitalModelFormatEnum(*this)	// "DigitalModelFormatEnum"
    , OtherDigitalModelFormat(*this)	// "OtherDigitalModelFormat"
{
}

CDigitalModelFormatType::CDigitalModelFormatType(CDigitalModelFormatType const& other)
    : TypeBase(other.GetNode())
    , DigitalModelFormatEnum(*this)	// "DigitalModelFormatEnum"
    , OtherDigitalModelFormat(*this)	// "OtherDigitalModelFormat"
{
}

void CDigitalModelFormatType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DigitalModelFormatType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDigitalModelType::CDigitalModelType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , File(*this)	// "File"
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Units(*this)	// "Units"
    , GDT(*this)	// "GDT"
    , Topology(*this)	// "Topology"
    , Entities(*this)	// "Entities"
{
}

CDigitalModelType::CDigitalModelType(CDigitalModelType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , File(*this)	// "File"
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Units(*this)	// "Units"
    , GDT(*this)	// "GDT"
    , Topology(*this)	// "Topology"
    , Entities(*this)	// "Entities"
{
}

void CDigitalModelType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DigitalModelType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDimensionCountEnumType::CDimensionCountEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDimensionCountEnumType::CDimensionCountEnumType(CDimensionCountEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDimensionModifierEnumType::CDimensionModifierEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDimensionModifierEnumType::CDimensionModifierEnumType(CDimensionModifierEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDimensionalCharacteristicActualBaseType::CDimensionalCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
{
}

CDimensionalCharacteristicActualBaseType::CDimensionalCharacteristicActualBaseType(CDimensionalCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
{
}

void CDimensionalCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DimensionalCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDimensionalCharacteristicDefinitionBaseType::CDimensionalCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , DimensionType(*this)	// "DimensionType"
{
}

CDimensionalCharacteristicDefinitionBaseType::CDimensionalCharacteristicDefinitionBaseType(CDimensionalCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , DimensionType(*this)	// "DimensionType"
{
}

void CDimensionalCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DimensionalCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDimensionalCharacteristicItemBaseType::CDimensionalCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CDimensionalCharacteristicItemBaseType::CDimensionalCharacteristicItemBaseType(CDimensionalCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CDimensionalCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DimensionalCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDimensionalCharacteristicNominalBaseType::CDimensionalCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
{
}

CDimensionalCharacteristicNominalBaseType::CDimensionalCharacteristicNominalBaseType(CDimensionalCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
{
}

void CDimensionalCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DimensionalCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDirectionalOffsetType::CDirectionalOffsetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Offset(*this)	// "Offset"
    , NominalDirection(*this)	// "NominalDirection"
    , FeatureDirection(*this)	// "FeatureDirection"
{
}

CDirectionalOffsetType::CDirectionalOffsetType(CDirectionalOffsetType const& other)
    : TypeBase(other.GetNode())
    , Offset(*this)	// "Offset"
    , NominalDirection(*this)	// "NominalDirection"
    , FeatureDirection(*this)	// "FeatureDirection"
{
}

void CDirectionalOffsetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DirectionalOffsetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceBetweenAnalysisModeEnumType::CDistanceBetweenAnalysisModeEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDistanceBetweenAnalysisModeEnumType::CDistanceBetweenAnalysisModeEnumType(CDistanceBetweenAnalysisModeEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDistanceBetweenCharacteristicActualType::CDistanceBetweenCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
    , AnalysisVector(*this)	// "AnalysisVector"
{
}

CDistanceBetweenCharacteristicActualType::CDistanceBetweenCharacteristicActualType(CDistanceBetweenCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
    , AnalysisVector(*this)	// "AnalysisVector"
{
}

void CDistanceBetweenCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceBetweenCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceBetweenCharacteristicDefinitionType::CDistanceBetweenCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CDistanceBetweenCharacteristicDefinitionType::CDistanceBetweenCharacteristicDefinitionType(CDistanceBetweenCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CDistanceBetweenCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceBetweenCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceBetweenCharacteristicItemType::CDistanceBetweenCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CDistanceBetweenCharacteristicItemType::CDistanceBetweenCharacteristicItemType(CDistanceBetweenCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CDistanceBetweenCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceBetweenCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceBetweenCharacteristicNominalType::CDistanceBetweenCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CDistanceBetweenCharacteristicNominalType::CDistanceBetweenCharacteristicNominalType(CDistanceBetweenCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CDistanceBetweenCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceBetweenCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceBetweenCharacteristicStatsEvalType::CDistanceBetweenCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CDistanceBetweenCharacteristicStatsEvalType::CDistanceBetweenCharacteristicStatsEvalType(CDistanceBetweenCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CDistanceBetweenCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceBetweenCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceFromCharacteristicActualType::CDistanceFromCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
    , AnalysisVector(*this)	// "AnalysisVector"
{
}

CDistanceFromCharacteristicActualType::CDistanceFromCharacteristicActualType(CDistanceFromCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
    , AnalysisVector(*this)	// "AnalysisVector"
{
}

void CDistanceFromCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceFromCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceFromCharacteristicDefinitionType::CDistanceFromCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CDistanceFromCharacteristicDefinitionType::CDistanceFromCharacteristicDefinitionType(CDistanceFromCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CDistanceFromCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceFromCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceFromCharacteristicItemType::CDistanceFromCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CDistanceFromCharacteristicItemType::CDistanceFromCharacteristicItemType(CDistanceFromCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CDistanceFromCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceFromCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceFromCharacteristicNominalType::CDistanceFromCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
    , OriginReference(*this)	// "OriginReference"
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CDistanceFromCharacteristicNominalType::CDistanceFromCharacteristicNominalType(CDistanceFromCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
    , OriginReference(*this)	// "OriginReference"
    , AnalysisVector(*this)	// "AnalysisVector"
    , AnalysisMode(*this)	// "AnalysisMode"
    , MeasurementDirective(*this)	// "MeasurementDirective"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CDistanceFromCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceFromCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceFromCharacteristicStatsEvalType::CDistanceFromCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CDistanceFromCharacteristicStatsEvalType::CDistanceFromCharacteristicStatsEvalType(CDistanceFromCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CDistanceFromCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceFromCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistributionTransformationEnumType::CDistributionTransformationEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDistributionTransformationEnumType::CDistributionTransformationEnumType(CDistributionTransformationEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CDistributionTransformationType::CDistributionTransformationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DistributionTransformationEnum(*this)	// "DistributionTransformationEnum"
    , BoxCoxTransformation(*this)	// "BoxCoxTransformation"
    , OtherDistributionTransformation(*this)	// "OtherDistributionTransformation"
{
}

CDistributionTransformationType::CDistributionTransformationType(CDistributionTransformationType const& other)
    : TypeBase(other.GetNode())
    , DistributionTransformationEnum(*this)	// "DistributionTransformationEnum"
    , BoxCoxTransformation(*this)	// "BoxCoxTransformation"
    , OtherDistributionTransformation(*this)	// "OtherDistributionTransformation"
{
}

void CDistributionTransformationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistributionTransformationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDividedByType::CDividedByType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(node)
{
}

CDividedByType::CDividedByType(CDividedByType const& other)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(other.GetNode())
{
}

void CDividedByType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DividedByType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDocumentFileInstructionType::CDocumentFileInstructionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CWorkInstructionBaseType(node)
    , ExternalFile(*this)	// "ExternalFile"
{
}

CDocumentFileInstructionType::CDocumentFileInstructionType(CDocumentFileInstructionType const& other)
    : ::qif191::t::CWorkInstructionBaseType(other.GetNode())
    , ExternalFile(*this)	// "ExternalFile"
{
}

void CDocumentFileInstructionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DocumentFileInstructionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDoublePositiveType::CDoublePositiveType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDoublePositiveType::CDoublePositiveType(CDoublePositiveType const& other)
    : TypeBase(other.GetNode())
{
}


CDrawableBaseType::CDrawableBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CNodeWithIdBaseType(node)
    , Color(*this)	// "@Color"
    , Transparency(*this)	// "@Transparency"
    , Hidden(*this)	// "@Hidden"
    , Size(*this)	// "@Size"
{
}

CDrawableBaseType::CDrawableBaseType(CDrawableBaseType const& other)
    : ::qif191::t::CNodeWithIdBaseType(other.GetNode())
    , Color(*this)	// "@Color"
    , Transparency(*this)	// "@Transparency"
    , Hidden(*this)	// "@Hidden"
    , Size(*this)	// "@Size"
{
}

void CDrawableBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DrawableBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgeOrientedType::CEdgeOrientedType(xercesc::DOMNode* const& node)
    : ::qif191::t::CElementReferenceType(node)
    , Turned(*this)	// "@Turned"
{
}

CEdgeOrientedType::CEdgeOrientedType(CEdgeOrientedType const& other)
    : ::qif191::t::CElementReferenceType(other.GetNode())
    , Turned(*this)	// "@Turned"
{
}

void CEdgeOrientedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgeOrientedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointActualDeterminationType::CEdgePointActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CEdgePointActualDeterminationType::CEdgePointActualDeterminationType(CEdgePointActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CEdgePointActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointCastType::CEdgePointCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CEdgePointCastType::CEdgePointCastType(CEdgePointCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CEdgePointCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointCheckedFeatureType::CEdgePointCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CEdgePointCheckedFeatureType::CEdgePointCheckedFeatureType(CEdgePointCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CEdgePointCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointCheckedType::CEdgePointCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CEdgePointCheckedType::CEdgePointCheckedType(CEdgePointCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CEdgePointCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointConstructionMethodType::CEdgePointConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

CEdgePointConstructionMethodType::CEdgePointConstructionMethodType(CEdgePointConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void CEdgePointConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointCopyType::CEdgePointCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseEdgePoint(*this)	// "BaseEdgePoint"
{
}

CEdgePointCopyType::CEdgePointCopyType(CEdgePointCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseEdgePoint(*this)	// "BaseEdgePoint"
{
}

void CEdgePointCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointFeatureActualType::CEdgePointFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , AdjacentNormal(*this)	// "AdjacentNormal"
{
}

CEdgePointFeatureActualType::CEdgePointFeatureActualType(CEdgePointFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , AdjacentNormal(*this)	// "AdjacentNormal"
{
}

void CEdgePointFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointFeatureDefinitionType::CEdgePointFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CEdgePointFeatureDefinitionType::CEdgePointFeatureDefinitionType(CEdgePointFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CEdgePointFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointFeatureItemType::CEdgePointFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
{
}

CEdgePointFeatureItemType::CEdgePointFeatureItemType(CEdgePointFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
{
}

void CEdgePointFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointFeatureNominalType::CEdgePointFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , AdjacentNormal(*this)	// "AdjacentNormal"
{
}

CEdgePointFeatureNominalType::CEdgePointFeatureNominalType(CEdgePointFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , AdjacentNormal(*this)	// "AdjacentNormal"
{
}

void CEdgePointFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointFromScanType::CEdgePointFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , PatchRadius(*this)	// "PatchRadius"
    , Distance(*this)	// "Distance"
    , Depth(*this)	// "Depth"
    , RetrievalMethod(*this)	// "RetrievalMethod"
{
}

CEdgePointFromScanType::CEdgePointFromScanType(CEdgePointFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , PatchRadius(*this)	// "PatchRadius"
    , Distance(*this)	// "Distance"
    , Depth(*this)	// "Depth"
    , RetrievalMethod(*this)	// "RetrievalMethod"
{
}

void CEdgePointFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgePointTransformType::CEdgePointTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseEdgePoint(*this)	// "BaseEdgePoint"
    , Transformation(*this)	// "Transformation"
{
}

CEdgePointTransformType::CEdgePointTransformType(CEdgePointTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseEdgePoint(*this)	// "BaseEdgePoint"
    , Transformation(*this)	// "Transformation"
{
}

void CEdgePointTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgePointTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgeSetType::CEdgeSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Edge(*this)	// "Edge"
{
}

CEdgeSetType::CEdgeSetType(CEdgeSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Edge(*this)	// "Edge"
{
}

void CEdgeSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgeSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEdgeType::CEdgeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
    , Tolerance(*this)	// "@Tolerance"
    , Curve(*this)	// "Curve"
    , VertexBeg(*this)	// "VertexBeg"
    , VertexEnd(*this)	// "VertexEnd"
{
}

CEdgeType::CEdgeType(CEdgeType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
    , Tolerance(*this)	// "@Tolerance"
    , Curve(*this)	// "Curve"
    , VertexBeg(*this)	// "VertexBeg"
    , VertexEnd(*this)	// "VertexEnd"
{
}

void CEdgeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EdgeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEffectiveWorkingVolumeType::CEffectiveWorkingVolumeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MinPoint(*this)	// "MinPoint"
    , MaxPoint(*this)	// "MaxPoint"
{
}

CEffectiveWorkingVolumeType::CEffectiveWorkingVolumeType(CEffectiveWorkingVolumeType const& other)
    : TypeBase(other.GetNode())
    , MinPoint(*this)	// "MinPoint"
    , MaxPoint(*this)	// "MaxPoint"
{
}

void CEffectiveWorkingVolumeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EffectiveWorkingVolumeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElementReferenceFullType::CElementReferenceFullType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Id(*this)	// "Id"
{
}

CElementReferenceFullType::CElementReferenceFullType(CElementReferenceFullType const& other)
    : TypeBase(other.GetNode())
    , Id(*this)	// "Id"
{
}

void CElementReferenceFullType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElementReferenceFullType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElementReferenceType::CElementReferenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Id(*this)	// "Id"
{
}

CElementReferenceType::CElementReferenceType(CElementReferenceType const& other)
    : TypeBase(other.GetNode())
    , Id(*this)	// "Id"
{
}

void CElementReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElementReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseActualDeterminationType::CEllipseActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CEllipseActualDeterminationType::CEllipseActualDeterminationType(CEllipseActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CEllipseActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseBestFitType::CEllipseBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CEllipseBestFitType::CEllipseBestFitType(CEllipseBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CEllipseBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseCastType::CEllipseCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CEllipseCastType::CEllipseCastType(CEllipseCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CEllipseCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseCheckedFeatureType::CEllipseCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CEllipseCheckedFeatureType::CEllipseCheckedFeatureType(CEllipseCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CEllipseCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseCheckedType::CEllipseCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CEllipseCheckedType::CEllipseCheckedType(CEllipseCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CEllipseCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseConstructionMethodType::CEllipseConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

CEllipseConstructionMethodType::CEllipseConstructionMethodType(CEllipseConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void CEllipseConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseCopyType::CEllipseCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseEllipse(*this)	// "BaseEllipse"
{
}

CEllipseCopyType::CEllipseCopyType(CEllipseCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseEllipse(*this)	// "BaseEllipse"
{
}

void CEllipseCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseFeatureActualType::CEllipseFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , Normal(*this)	// "Normal"
    , MajorDiameter(*this)	// "MajorDiameter"
    , MinorDiameter(*this)	// "MinorDiameter"
    , Form(*this)	// "Form"
{
}

CEllipseFeatureActualType::CEllipseFeatureActualType(CEllipseFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Normal(*this)	// "Normal"
    , MajorDiameter(*this)	// "MajorDiameter"
    , MinorDiameter(*this)	// "MinorDiameter"
    , Form(*this)	// "Form"
{
}

void CEllipseFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseFeatureDefinitionType::CEllipseFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , MajorDiameter(*this)	// "MajorDiameter"
    , MinorDiameter(*this)	// "MinorDiameter"
{
}

CEllipseFeatureDefinitionType::CEllipseFeatureDefinitionType(CEllipseFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , MajorDiameter(*this)	// "MajorDiameter"
    , MinorDiameter(*this)	// "MinorDiameter"
{
}

void CEllipseFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseFeatureItemType::CEllipseFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CEllipseFeatureItemType::CEllipseFeatureItemType(CEllipseFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CEllipseFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseFeatureNominalType::CEllipseFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
    , Normal(*this)	// "Normal"
{
}

CEllipseFeatureNominalType::CEllipseFeatureNominalType(CEllipseFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Normal(*this)	// "Normal"
{
}

void CEllipseFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseFromScanType::CEllipseFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

CEllipseFromScanType::CEllipseFromScanType(CEllipseFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

void CEllipseFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseIntersectionType::CEllipseIntersectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , IntersectionPlane(*this)	// "IntersectionPlane"
    , IntersectionFeature(*this)	// "IntersectionFeature"
{
}

CEllipseIntersectionType::CEllipseIntersectionType(CEllipseIntersectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , IntersectionPlane(*this)	// "IntersectionPlane"
    , IntersectionFeature(*this)	// "IntersectionFeature"
{
}

void CEllipseIntersectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseIntersectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipsePointSamplingStrategyType::CEllipsePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CEllipsePointSamplingStrategyType::CEllipsePointSamplingStrategyType(CEllipsePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CEllipsePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipsePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseProjectionType::CEllipseProjectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ProjectionFeature(*this)	// "ProjectionFeature"
    , ProjectionPlane(*this)	// "ProjectionPlane"
{
}

CEllipseProjectionType::CEllipseProjectionType(CEllipseProjectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ProjectionFeature(*this)	// "ProjectionFeature"
    , ProjectionPlane(*this)	// "ProjectionPlane"
{
}

void CEllipseProjectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseProjectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseRecompType::CEllipseRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CEllipseRecompType::CEllipseRecompType(CEllipseRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CEllipseRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEllipseTransformType::CEllipseTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseEllipse(*this)	// "BaseEllipse"
    , Transformation(*this)	// "Transformation"
{
}

CEllipseTransformType::CEllipseTransformType(CEllipseTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseEllipse(*this)	// "BaseEllipse"
    , Transformation(*this)	// "Transformation"
{
}

void CEllipseTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EllipseTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderActualDeterminationType::CElongatedCylinderActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CElongatedCylinderActualDeterminationType::CElongatedCylinderActualDeterminationType(CElongatedCylinderActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CElongatedCylinderActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderBestFitType::CElongatedCylinderBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CElongatedCylinderBestFitType::CElongatedCylinderBestFitType(CElongatedCylinderBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CElongatedCylinderBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderCastType::CElongatedCylinderCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CElongatedCylinderCastType::CElongatedCylinderCastType(CElongatedCylinderCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CElongatedCylinderCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderCheckedFeatureType::CElongatedCylinderCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CElongatedCylinderCheckedFeatureType::CElongatedCylinderCheckedFeatureType(CElongatedCylinderCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CElongatedCylinderCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderCheckedType::CElongatedCylinderCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CElongatedCylinderCheckedType::CElongatedCylinderCheckedType(CElongatedCylinderCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CElongatedCylinderCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderConstructionMethodType::CElongatedCylinderConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CElongatedCylinderConstructionMethodType::CElongatedCylinderConstructionMethodType(CElongatedCylinderConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CElongatedCylinderConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderCopyType::CElongatedCylinderCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseElongatedCylinder(*this)	// "BaseElongatedCylinder"
{
}

CElongatedCylinderCopyType::CElongatedCylinderCopyType(CElongatedCylinderCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseElongatedCylinder(*this)	// "BaseElongatedCylinder"
{
}

void CElongatedCylinderCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderFeatureActualType::CElongatedCylinderFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , CenterPlane(*this)	// "CenterPlane"
    , Length(*this)	// "Length"
    , LengthMax(*this)	// "LengthMax"
    , LengthMin(*this)	// "LengthMin"
    , Width(*this)	// "Width"
    , WidthMax(*this)	// "WidthMax"
    , WidthMin(*this)	// "WidthMin"
    , Depth(*this)	// "Depth"
    , DepthMax(*this)	// "DepthMax"
    , DepthMin(*this)	// "DepthMin"
    , DepthVector(*this)	// "DepthVector"
    , Form(*this)	// "Form"
{
}

CElongatedCylinderFeatureActualType::CElongatedCylinderFeatureActualType(CElongatedCylinderFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , CenterPlane(*this)	// "CenterPlane"
    , Length(*this)	// "Length"
    , LengthMax(*this)	// "LengthMax"
    , LengthMin(*this)	// "LengthMin"
    , Width(*this)	// "Width"
    , WidthMax(*this)	// "WidthMax"
    , WidthMin(*this)	// "WidthMin"
    , Depth(*this)	// "Depth"
    , DepthMax(*this)	// "DepthMax"
    , DepthMin(*this)	// "DepthMin"
    , DepthVector(*this)	// "DepthVector"
    , Form(*this)	// "Form"
{
}

void CElongatedCylinderFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderFeatureDefinitionType::CElongatedCylinderFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Width(*this)	// "Width"
    , Depth(*this)	// "Depth"
{
}

CElongatedCylinderFeatureDefinitionType::CElongatedCylinderFeatureDefinitionType(CElongatedCylinderFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
    , Length(*this)	// "Length"
    , Width(*this)	// "Width"
    , Depth(*this)	// "Depth"
{
}

void CElongatedCylinderFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderFeatureItemType::CElongatedCylinderFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CElongatedCylinderFeatureItemType::CElongatedCylinderFeatureItemType(CElongatedCylinderFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CElongatedCylinderFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderFeatureNominalType::CElongatedCylinderFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , CenterPlane(*this)	// "CenterPlane"
    , DepthVector(*this)	// "DepthVector"
{
}

CElongatedCylinderFeatureNominalType::CElongatedCylinderFeatureNominalType(CElongatedCylinderFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , CenterPlane(*this)	// "CenterPlane"
    , DepthVector(*this)	// "DepthVector"
{
}

void CElongatedCylinderFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderPointSamplingStrategyEnumType::CElongatedCylinderPointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CElongatedCylinderPointSamplingStrategyEnumType::CElongatedCylinderPointSamplingStrategyEnumType(CElongatedCylinderPointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CElongatedCylinderPointSamplingStrategyType::CElongatedCylinderPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CElongatedCylinderPointSamplingStrategyType::CElongatedCylinderPointSamplingStrategyType(CElongatedCylinderPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CElongatedCylinderPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderRecompType::CElongatedCylinderRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CElongatedCylinderRecompType::CElongatedCylinderRecompType(CElongatedCylinderRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CElongatedCylinderRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderTransformType::CElongatedCylinderTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseElongatedCylinder(*this)	// "BaseElongatedCylinder"
    , Transformation(*this)	// "Transformation"
{
}

CElongatedCylinderTransformType::CElongatedCylinderTransformType(CElongatedCylinderTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseElongatedCylinder(*this)	// "BaseElongatedCylinder"
    , Transformation(*this)	// "Transformation"
{
}

void CElongatedCylinderTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElseRuleType::CElseRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPointRuleBaseType(node)
    , ThenPoints(*this)	// "ThenPoints"
{
}

CElseRuleType::CElseRuleType(CElseRuleType const& other)
    : ::qif191::t::CPointRuleBaseType(other.GetNode())
    , ThenPoints(*this)	// "ThenPoints"
{
}

void CElseRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElseRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEmployeeType::CEmployeeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , EmployeeId(*this)	// "EmployeeId"
    , Shift(*this)	// "Shift"
{
}

CEmployeeType::CEmployeeType(CEmployeeType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , EmployeeId(*this)	// "EmployeeId"
    , Shift(*this)	// "Shift"
{
}

void CEmployeeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EmployeeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEndRadiusType::CEndRadiusType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , EndRadius(*this)	// "EndRadius"
    , Expanded(*this)	// "Expanded"
{
}

CEndRadiusType::CEndRadiusType(CEndRadiusType const& other)
    : TypeBase(other.GetNode())
    , EndRadius(*this)	// "EndRadius"
    , Expanded(*this)	// "Expanded"
{
}

void CEndRadiusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EndRadiusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEntitiesExternalType::CEntitiesExternalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Entity(*this)	// "Entity"
{
}

CEntitiesExternalType::CEntitiesExternalType(CEntitiesExternalType const& other)
    : TypeBase(other.GetNode())
    , Entity(*this)	// "Entity"
{
}

void CEntitiesExternalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EntitiesExternalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEntityExternalType::CEntityExternalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , EntityId(*this)	// "EntityId"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
{
}

CEntityExternalType::CEntityExternalType(CEntityExternalType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , EntityId(*this)	// "EntityId"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
{
}

void CEntityExternalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EntityExternalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEnvironmentType::CEnvironmentType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Attributes(*this)	// "Attributes"
    , ObjectTemperature(*this)	// "ObjectTemperature"
    , AmbientTemperature(*this)	// "AmbientTemperature"
    , RelativeHumidity(*this)	// "RelativeHumidity"
    , DateAndTime(*this)	// "DateAndTime"
    , TimeDescription(*this)	// "TimeDescription"
{
}

CEnvironmentType::CEnvironmentType(CEnvironmentType const& other)
    : TypeBase(other.GetNode())
    , Attributes(*this)	// "Attributes"
    , ObjectTemperature(*this)	// "ObjectTemperature"
    , AmbientTemperature(*this)	// "AmbientTemperature"
    , RelativeHumidity(*this)	// "RelativeHumidity"
    , DateAndTime(*this)	// "DateAndTime"
    , TimeDescription(*this)	// "TimeDescription"
{
}

void CEnvironmentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EnvironmentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEnvironmentsType::CEnvironmentsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Environment(*this)	// "Environment"
{
}

CEnvironmentsType::CEnvironmentsType(CEnvironmentsType const& other)
    : TypeBase(other.GetNode())
    , Environment(*this)	// "Environment"
{
}

void CEnvironmentsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EnvironmentsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CErrorsType::CErrorsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Error(*this)	// "Error"
{
}

CErrorsType::CErrorsType(CErrorsType const& other)
    : TypeBase(other.GetNode())
    , Error(*this)	// "Error"
{
}

void CErrorsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ErrorsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEstablishDatumMeasurandType::CEstablishDatumMeasurandType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurandBaseType(node)
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
{
}

CEstablishDatumMeasurandType::CEstablishDatumMeasurandType(CEstablishDatumMeasurandType const& other)
    : ::qif191::t::CMeasurandBaseType(other.GetNode())
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
{
}

void CEstablishDatumMeasurandType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EstablishDatumMeasurandType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEvaluateCharacteristicMeasurandType::CEvaluateCharacteristicMeasurandType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurandBaseType(node)
    , CharacteristicItemId(*this)	// "CharacteristicItemId"
{
}

CEvaluateCharacteristicMeasurandType::CEvaluateCharacteristicMeasurandType(CEvaluateCharacteristicMeasurandType const& other)
    : ::qif191::t::CMeasurandBaseType(other.GetNode())
    , CharacteristicItemId(*this)	// "CharacteristicItemId"
{
}

void CEvaluateCharacteristicMeasurandType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EvaluateCharacteristicMeasurandType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEvaluateSpecifiedCharacteristicsActionType::CEvaluateSpecifiedCharacteristicsActionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionBaseType(node)
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
{
}

CEvaluateSpecifiedCharacteristicsActionType::CEvaluateSpecifiedCharacteristicsActionType(CEvaluateSpecifiedCharacteristicsActionType const& other)
    : ::qif191::t::CActionBaseType(other.GetNode())
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
{
}

void CEvaluateSpecifiedCharacteristicsActionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EvaluateSpecifiedCharacteristicsActionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CEventBaseType::CEventBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Description(*this)	// "Description"
{
}

CEventBaseType::CEventBaseType(CEventBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Description(*this)	// "Description"
{
}

void CEventBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("EventBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExclusionEnumType::CExclusionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CExclusionEnumType::CExclusionEnumType(CExclusionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CExclusionReasonType::CExclusionReasonType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ExclusionReasonEnum(*this)	// "ExclusionReasonEnum"
    , OtherExclusionReason(*this)	// "OtherExclusionReason"
{
}

CExclusionReasonType::CExclusionReasonType(CExclusionReasonType const& other)
    : TypeBase(other.GetNode())
    , ExclusionReasonEnum(*this)	// "ExclusionReasonEnum"
    , OtherExclusionReason(*this)	// "OtherExclusionReason"
{
}

void CExclusionReasonType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExclusionReasonType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExclusionType::CExclusionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Id(*this)	// "Id"
    , Reason(*this)	// "Reason"
{
}

CExclusionType::CExclusionType(CExclusionType const& other)
    : TypeBase(other.GetNode())
    , Id(*this)	// "Id"
    , Reason(*this)	// "Reason"
{
}

void CExclusionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExclusionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtentEnumType::CExtentEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CExtentEnumType::CExtentEnumType(CExtentEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CExtentType::CExtentType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ExtentEnum(*this)	// "ExtentEnum"
    , OtherExtent(*this)	// "OtherExtent"
{
}

CExtentType::CExtentType(CExtentType const& other)
    : TypeBase(other.GetNode())
    , ExtentEnum(*this)	// "ExtentEnum"
    , OtherExtent(*this)	// "OtherExtent"
{
}

void CExtentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExternalFileReferenceType::CExternalFileReferenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , URI(*this)	// "URI"
    , FileSpec(*this)	// "FileSpec"
    , Description(*this)	// "Description"
{
}

CExternalFileReferenceType::CExternalFileReferenceType(CExternalFileReferenceType const& other)
    : TypeBase(other.GetNode())
    , URI(*this)	// "URI"
    , FileSpec(*this)	// "FileSpec"
    , Description(*this)	// "Description"
{
}

void CExternalFileReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExternalFileReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrude23CoreType::CExtrude23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , TerminationPoint(*this)	// "TerminationPoint"
    , Curve(*this)	// "Curve"
{
}

CExtrude23CoreType::CExtrude23CoreType(CExtrude23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , TerminationPoint(*this)	// "TerminationPoint"
    , Curve(*this)	// "Curve"
{
}

void CExtrude23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Extrude23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrude23Type::CExtrude23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Extrude23Core(*this)	// "Extrude23Core"
    , Transform(*this)	// "Transform"
{
}

CExtrude23Type::CExtrude23Type(CExtrude23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Extrude23Core(*this)	// "Extrude23Core"
    , Transform(*this)	// "Transform"
{
}

void CExtrude23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Extrude23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionActualDeterminationType::CExtrudedCrossSectionActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CExtrudedCrossSectionActualDeterminationType::CExtrudedCrossSectionActualDeterminationType(CExtrudedCrossSectionActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CExtrudedCrossSectionActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionBestFitType::CExtrudedCrossSectionBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CExtrudedCrossSectionBestFitType::CExtrudedCrossSectionBestFitType(CExtrudedCrossSectionBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CExtrudedCrossSectionBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionCastType::CExtrudedCrossSectionCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CExtrudedCrossSectionCastType::CExtrudedCrossSectionCastType(CExtrudedCrossSectionCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CExtrudedCrossSectionCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionCheckedFeatureType::CExtrudedCrossSectionCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CExtrudedCrossSectionCheckedFeatureType::CExtrudedCrossSectionCheckedFeatureType(CExtrudedCrossSectionCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CExtrudedCrossSectionCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionCheckedType::CExtrudedCrossSectionCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CExtrudedCrossSectionCheckedType::CExtrudedCrossSectionCheckedType(CExtrudedCrossSectionCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CExtrudedCrossSectionCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionConstructionMethodType::CExtrudedCrossSectionConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CExtrudedCrossSectionConstructionMethodType::CExtrudedCrossSectionConstructionMethodType(CExtrudedCrossSectionConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CExtrudedCrossSectionConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionCopyType::CExtrudedCrossSectionCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseExtrudedCrossSection(*this)	// "BaseExtrudedCrossSection"
{
}

CExtrudedCrossSectionCopyType::CExtrudedCrossSectionCopyType(CExtrudedCrossSectionCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseExtrudedCrossSection(*this)	// "BaseExtrudedCrossSection"
{
}

void CExtrudedCrossSectionCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionFeatureActualType::CExtrudedCrossSectionFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Direction(*this)	// "Direction"
    , Length(*this)	// "Length"
    , Form(*this)	// "Form"
{
}

CExtrudedCrossSectionFeatureActualType::CExtrudedCrossSectionFeatureActualType(CExtrudedCrossSectionFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Direction(*this)	// "Direction"
    , Length(*this)	// "Length"
    , Form(*this)	// "Form"
{
}

void CExtrudedCrossSectionFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionFeatureDefinitionType::CExtrudedCrossSectionFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Length(*this)	// "Length"
{
}

CExtrudedCrossSectionFeatureDefinitionType::CExtrudedCrossSectionFeatureDefinitionType(CExtrudedCrossSectionFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Length(*this)	// "Length"
{
}

void CExtrudedCrossSectionFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionFeatureItemType::CExtrudedCrossSectionFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CExtrudedCrossSectionFeatureItemType::CExtrudedCrossSectionFeatureItemType(CExtrudedCrossSectionFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CExtrudedCrossSectionFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionFeatureNominalType::CExtrudedCrossSectionFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Direction(*this)	// "Direction"
    , CrossSectionReferenceFeatureId(*this)	// "CrossSectionReferenceFeatureId"
{
}

CExtrudedCrossSectionFeatureNominalType::CExtrudedCrossSectionFeatureNominalType(CExtrudedCrossSectionFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Direction(*this)	// "Direction"
    , CrossSectionReferenceFeatureId(*this)	// "CrossSectionReferenceFeatureId"
{
}

void CExtrudedCrossSectionFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionPointSamplingStrategyEnumType::CExtrudedCrossSectionPointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CExtrudedCrossSectionPointSamplingStrategyEnumType::CExtrudedCrossSectionPointSamplingStrategyEnumType(CExtrudedCrossSectionPointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CExtrudedCrossSectionPointSamplingStrategyType::CExtrudedCrossSectionPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CExtrudedCrossSectionPointSamplingStrategyType::CExtrudedCrossSectionPointSamplingStrategyType(CExtrudedCrossSectionPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CExtrudedCrossSectionPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionRecompType::CExtrudedCrossSectionRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CExtrudedCrossSectionRecompType::CExtrudedCrossSectionRecompType(CExtrudedCrossSectionRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CExtrudedCrossSectionRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionTransformType::CExtrudedCrossSectionTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseExtrudedCrossSection(*this)	// "BaseExtrudedCrossSection"
    , Transformation(*this)	// "Transformation"
{
}

CExtrudedCrossSectionTransformType::CExtrudedCrossSectionTransformType(CExtrudedCrossSectionTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseExtrudedCrossSection(*this)	// "BaseExtrudedCrossSection"
    , Transformation(*this)	// "Transformation"
{
}

void CExtrudedCrossSectionTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFPSTestType::CFPSTestType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCMMAccuracyTestBaseType(node)
    , XLinearity(*this)	// "XLinearity"
    , YLinearity(*this)	// "YLinearity"
    , ZLinearity(*this)	// "ZLinearity"
    , XAxisRoll(*this)	// "XAxisRoll"
    , XAxisPitch(*this)	// "XAxisPitch"
    , XAxisYaw(*this)	// "XAxisYaw"
    , YAxisRoll(*this)	// "YAxisRoll"
    , YAxisPitch(*this)	// "YAxisPitch"
    , YAxisYaw(*this)	// "YAxisYaw"
    , ZAxisRoll(*this)	// "ZAxisRoll"
    , ZAxisPitch(*this)	// "ZAxisPitch"
    , ZAxisYaw(*this)	// "ZAxisYaw"
    , XAxisStraightnessY(*this)	// "XAxisStraightnessY"
    , XAxisStraightnessZ(*this)	// "XAxisStraightnessZ"
    , YAxisStraightnessX(*this)	// "YAxisStraightnessX"
    , YAxisStraightnessZ(*this)	// "YAxisStraightnessZ"
    , ZAxisStraightnessX(*this)	// "ZAxisStraightnessX"
    , ZAxisStraightnessY(*this)	// "ZAxisStraightnessY"
    , XYSquareness(*this)	// "XYSquareness"
    , XZSquareness(*this)	// "XZSquareness"
    , YZSquareness(*this)	// "YZSquareness"
{
}

CFPSTestType::CFPSTestType(CFPSTestType const& other)
    : ::qif191::t::CCMMAccuracyTestBaseType(other.GetNode())
    , XLinearity(*this)	// "XLinearity"
    , YLinearity(*this)	// "YLinearity"
    , ZLinearity(*this)	// "ZLinearity"
    , XAxisRoll(*this)	// "XAxisRoll"
    , XAxisPitch(*this)	// "XAxisPitch"
    , XAxisYaw(*this)	// "XAxisYaw"
    , YAxisRoll(*this)	// "YAxisRoll"
    , YAxisPitch(*this)	// "YAxisPitch"
    , YAxisYaw(*this)	// "YAxisYaw"
    , ZAxisRoll(*this)	// "ZAxisRoll"
    , ZAxisPitch(*this)	// "ZAxisPitch"
    , ZAxisYaw(*this)	// "ZAxisYaw"
    , XAxisStraightnessY(*this)	// "XAxisStraightnessY"
    , XAxisStraightnessZ(*this)	// "XAxisStraightnessZ"
    , YAxisStraightnessX(*this)	// "YAxisStraightnessX"
    , YAxisStraightnessZ(*this)	// "YAxisStraightnessZ"
    , ZAxisStraightnessX(*this)	// "ZAxisStraightnessX"
    , ZAxisStraightnessY(*this)	// "ZAxisStraightnessY"
    , XYSquareness(*this)	// "XYSquareness"
    , XZSquareness(*this)	// "XZSquareness"
    , YZSquareness(*this)	// "YZSquareness"
{
}

void CFPSTestType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FPSTestType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFaceBaseType::CFaceBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
    , Turned(*this)	// "@Turned"
    , Area(*this)	// "@Area"
    , Volume(*this)	// "@Volume"
    , MassCenter(*this)	// "@MassCenter"
    , InertiaMatrix(*this)	// "InertiaMatrix"
{
}

CFaceBaseType::CFaceBaseType(CFaceBaseType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
    , Turned(*this)	// "@Turned"
    , Area(*this)	// "@Area"
    , Volume(*this)	// "@Volume"
    , MassCenter(*this)	// "@MassCenter"
    , InertiaMatrix(*this)	// "InertiaMatrix"
{
}

void CFaceBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FaceBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFaceMeshType::CFaceMeshType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFaceBaseType(node)
    , Mesh(*this)	// "Mesh"
    , LoopIds(*this)	// "LoopIds"
    , Triangles(*this)	// "Triangles"
    , TrianglesBinary(*this)	// "TrianglesBinary"
    , TrianglesVisible(*this)	// "TrianglesVisible"
    , TrianglesVisibleBinary(*this)	// "TrianglesVisibleBinary"
    , TrianglesHidden(*this)	// "TrianglesHidden"
    , TrianglesHiddenBinary(*this)	// "TrianglesHiddenBinary"
    , TrianglesColor(*this)	// "TrianglesColor"
    , TrianglesColorBinary(*this)	// "TrianglesColorBinary"
{
}

CFaceMeshType::CFaceMeshType(CFaceMeshType const& other)
    : ::qif191::t::CFaceBaseType(other.GetNode())
    , Mesh(*this)	// "Mesh"
    , LoopIds(*this)	// "LoopIds"
    , Triangles(*this)	// "Triangles"
    , TrianglesBinary(*this)	// "TrianglesBinary"
    , TrianglesVisible(*this)	// "TrianglesVisible"
    , TrianglesVisibleBinary(*this)	// "TrianglesVisibleBinary"
    , TrianglesHidden(*this)	// "TrianglesHidden"
    , TrianglesHiddenBinary(*this)	// "TrianglesHiddenBinary"
    , TrianglesColor(*this)	// "TrianglesColor"
    , TrianglesColorBinary(*this)	// "TrianglesColorBinary"
{
}

void CFaceMeshType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FaceMeshType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFaceSetType::CFaceSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , FaceBase(*this)	// "FaceBase"
    , Face(*this)	// "Face"
    , FaceMesh(*this)	// "FaceMesh"
{
}

CFaceSetType::CFaceSetType(CFaceSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , FaceBase(*this)	// "FaceBase"
    , Face(*this)	// "Face"
    , FaceMesh(*this)	// "FaceMesh"
{
}

void CFaceSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FaceSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFaceType::CFaceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFaceBaseType(node)
    , HasOuter(*this)	// "@HasOuter"
    , Surface(*this)	// "Surface"
    , LoopIds(*this)	// "LoopIds"
{
}

CFaceType::CFaceType(CFaceType const& other)
    : ::qif191::t::CFaceBaseType(other.GetNode())
    , HasOuter(*this)	// "@HasOuter"
    , Surface(*this)	// "Surface"
    , LoopIds(*this)	// "LoopIds"
{
}

void CFaceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FaceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureActualBaseType::CFeatureActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureBaseType(node)
    , PointList(*this)	// "PointList"
    , FeatureItemId(*this)	// "FeatureItemId"
    , ActualComponentId(*this)	// "ActualComponentId"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , NotedEventIds(*this)	// "NotedEventIds"
{
}

CFeatureActualBaseType::CFeatureActualBaseType(CFeatureActualBaseType const& other)
    : ::qif191::t::CFeatureBaseType(other.GetNode())
    , PointList(*this)	// "PointList"
    , FeatureItemId(*this)	// "FeatureItemId"
    , ActualComponentId(*this)	// "ActualComponentId"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , NotedEventIds(*this)	// "NotedEventIds"
{
}

void CFeatureActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureActualsType::CFeatureActualsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureActual(*this)	// "FeatureActual"
    , ArcFeatureActual(*this)	// "ArcFeatureActual"
    , CircleFeatureActual(*this)	// "CircleFeatureActual"
    , CompoundFeatureActual(*this)	// "CompoundFeatureActual"
    , ConeFeatureActual(*this)	// "ConeFeatureActual"
    , ConicalSegmentFeatureActual(*this)	// "ConicalSegmentFeatureActual"
    , CuboidFeatureActual(*this)	// "CuboidFeatureActual"
    , CylinderFeatureActual(*this)	// "CylinderFeatureActual"
    , CylindricalSegmentFeatureActual(*this)	// "CylindricalSegmentFeatureActual"
    , EdgePointFeatureActual(*this)	// "EdgePointFeatureActual"
    , EllipseFeatureActual(*this)	// "EllipseFeatureActual"
    , ElongatedCylinderFeatureActual(*this)	// "ElongatedCylinderFeatureActual"
    , ExtrudedCrossSectionFeatureActual(*this)	// "ExtrudedCrossSectionFeatureActual"
    , GenericFeatureActual(*this)	// "GenericFeatureActual"
    , LineFeatureActual(*this)	// "LineFeatureActual"
    , OppositeLinesFeatureActual(*this)	// "OppositeLinesFeatureActual"
    , OppositePlanesFeatureActual(*this)	// "OppositePlanesFeatureActual"
    , PatternFeatureActual(*this)	// "PatternFeatureActual"
    , PlaneFeatureActual(*this)	// "PlaneFeatureActual"
    , PointDefinedCurveFeatureActual(*this)	// "PointDefinedCurveFeatureActual"
    , PointDefinedSurfaceFeatureActual(*this)	// "PointDefinedSurfaceFeatureActual"
    , PointFeatureActual(*this)	// "PointFeatureActual"
    , ProfileGroupFeatureActual(*this)	// "ProfileGroupFeatureActual"
    , RunoutGroupFeatureActual(*this)	// "RunoutGroupFeatureActual"
    , SphereFeatureActual(*this)	// "SphereFeatureActual"
    , SphericalSegmentFeatureActual(*this)	// "SphericalSegmentFeatureActual"
    , SurfaceOfRevolutionFeatureActual(*this)	// "SurfaceOfRevolutionFeatureActual"
    , ThreadedFeatureActual(*this)	// "ThreadedFeatureActual"
    , ToroidalSegmentFeatureActual(*this)	// "ToroidalSegmentFeatureActual"
    , TorusFeatureActual(*this)	// "TorusFeatureActual"
{
}

CFeatureActualsType::CFeatureActualsType(CFeatureActualsType const& other)
    : TypeBase(other.GetNode())
    , FeatureActual(*this)	// "FeatureActual"
    , ArcFeatureActual(*this)	// "ArcFeatureActual"
    , CircleFeatureActual(*this)	// "CircleFeatureActual"
    , CompoundFeatureActual(*this)	// "CompoundFeatureActual"
    , ConeFeatureActual(*this)	// "ConeFeatureActual"
    , ConicalSegmentFeatureActual(*this)	// "ConicalSegmentFeatureActual"
    , CuboidFeatureActual(*this)	// "CuboidFeatureActual"
    , CylinderFeatureActual(*this)	// "CylinderFeatureActual"
    , CylindricalSegmentFeatureActual(*this)	// "CylindricalSegmentFeatureActual"
    , EdgePointFeatureActual(*this)	// "EdgePointFeatureActual"
    , EllipseFeatureActual(*this)	// "EllipseFeatureActual"
    , ElongatedCylinderFeatureActual(*this)	// "ElongatedCylinderFeatureActual"
    , ExtrudedCrossSectionFeatureActual(*this)	// "ExtrudedCrossSectionFeatureActual"
    , GenericFeatureActual(*this)	// "GenericFeatureActual"
    , LineFeatureActual(*this)	// "LineFeatureActual"
    , OppositeLinesFeatureActual(*this)	// "OppositeLinesFeatureActual"
    , OppositePlanesFeatureActual(*this)	// "OppositePlanesFeatureActual"
    , PatternFeatureActual(*this)	// "PatternFeatureActual"
    , PlaneFeatureActual(*this)	// "PlaneFeatureActual"
    , PointDefinedCurveFeatureActual(*this)	// "PointDefinedCurveFeatureActual"
    , PointDefinedSurfaceFeatureActual(*this)	// "PointDefinedSurfaceFeatureActual"
    , PointFeatureActual(*this)	// "PointFeatureActual"
    , ProfileGroupFeatureActual(*this)	// "ProfileGroupFeatureActual"
    , RunoutGroupFeatureActual(*this)	// "RunoutGroupFeatureActual"
    , SphereFeatureActual(*this)	// "SphereFeatureActual"
    , SphericalSegmentFeatureActual(*this)	// "SphericalSegmentFeatureActual"
    , SurfaceOfRevolutionFeatureActual(*this)	// "SurfaceOfRevolutionFeatureActual"
    , ThreadedFeatureActual(*this)	// "ThreadedFeatureActual"
    , ToroidalSegmentFeatureActual(*this)	// "ToroidalSegmentFeatureActual"
    , TorusFeatureActual(*this)	// "TorusFeatureActual"
{
}

void CFeatureActualsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureActualsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureAreaType::CFeatureAreaType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
{
}

CFeatureAreaType::CFeatureAreaType(CFeatureAreaType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
{
}

void CFeatureAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureAspectsListsType::CFeatureAspectsListsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureDefinitions(*this)	// "FeatureDefinitions"
    , FeatureNominals(*this)	// "FeatureNominals"
    , FeatureItems(*this)	// "FeatureItems"
{
}

CFeatureAspectsListsType::CFeatureAspectsListsType(CFeatureAspectsListsType const& other)
    : TypeBase(other.GetNode())
    , FeatureDefinitions(*this)	// "FeatureDefinitions"
    , FeatureNominals(*this)	// "FeatureNominals"
    , FeatureItems(*this)	// "FeatureItems"
{
}

void CFeatureAspectsListsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureAspectsListsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureBaseType::CFeatureBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
{
}

CFeatureBaseType::CFeatureBaseType(CFeatureBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
{
}

void CFeatureBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureDefinitionBaseType::CFeatureDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureBaseType(node)
{
}

CFeatureDefinitionBaseType::CFeatureDefinitionBaseType(CFeatureDefinitionBaseType const& other)
    : ::qif191::t::CFeatureBaseType(other.GetNode())
{
}

void CFeatureDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureDefinitionsType::CFeatureDefinitionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureDefinition(*this)	// "FeatureDefinition"
    , ArcFeatureDefinition(*this)	// "ArcFeatureDefinition"
    , CircleFeatureDefinition(*this)	// "CircleFeatureDefinition"
    , CompoundFeatureDefinition(*this)	// "CompoundFeatureDefinition"
    , ConeFeatureDefinition(*this)	// "ConeFeatureDefinition"
    , ConicalSegmentFeatureDefinition(*this)	// "ConicalSegmentFeatureDefinition"
    , CuboidFeatureDefinition(*this)	// "CuboidFeatureDefinition"
    , CylinderFeatureDefinition(*this)	// "CylinderFeatureDefinition"
    , CylindricalSegmentFeatureDefinition(*this)	// "CylindricalSegmentFeatureDefinition"
    , EdgePointFeatureDefinition(*this)	// "EdgePointFeatureDefinition"
    , EllipseFeatureDefinition(*this)	// "EllipseFeatureDefinition"
    , ElongatedCylinderFeatureDefinition(*this)	// "ElongatedCylinderFeatureDefinition"
    , ExtrudedCrossSectionFeatureDefinition(*this)	// "ExtrudedCrossSectionFeatureDefinition"
    , GenericFeatureDefinition(*this)	// "GenericFeatureDefinition"
    , LineFeatureDefinition(*this)	// "LineFeatureDefinition"
    , OppositeLinesFeatureDefinition(*this)	// "OppositeLinesFeatureDefinition"
    , OppositePlanesFeatureDefinition(*this)	// "OppositePlanesFeatureDefinition"
    , PatternFeatureDefinition(*this)	// "PatternFeatureDefinition"
    , PlaneFeatureDefinition(*this)	// "PlaneFeatureDefinition"
    , PointDefinedCurveFeatureDefinition(*this)	// "PointDefinedCurveFeatureDefinition"
    , PointDefinedSurfaceFeatureDefinition(*this)	// "PointDefinedSurfaceFeatureDefinition"
    , PointFeatureDefinition(*this)	// "PointFeatureDefinition"
    , ProfileGroupFeatureDefinition(*this)	// "ProfileGroupFeatureDefinition"
    , RunoutGroupFeatureDefinition(*this)	// "RunoutGroupFeatureDefinition"
    , SphereFeatureDefinition(*this)	// "SphereFeatureDefinition"
    , SphericalSegmentFeatureDefinition(*this)	// "SphericalSegmentFeatureDefinition"
    , SurfaceOfRevolutionFeatureDefinition(*this)	// "SurfaceOfRevolutionFeatureDefinition"
    , ThreadedFeatureDefinition(*this)	// "ThreadedFeatureDefinition"
    , ToroidalSegmentFeatureDefinition(*this)	// "ToroidalSegmentFeatureDefinition"
    , TorusFeatureDefinition(*this)	// "TorusFeatureDefinition"
{
}

CFeatureDefinitionsType::CFeatureDefinitionsType(CFeatureDefinitionsType const& other)
    : TypeBase(other.GetNode())
    , FeatureDefinition(*this)	// "FeatureDefinition"
    , ArcFeatureDefinition(*this)	// "ArcFeatureDefinition"
    , CircleFeatureDefinition(*this)	// "CircleFeatureDefinition"
    , CompoundFeatureDefinition(*this)	// "CompoundFeatureDefinition"
    , ConeFeatureDefinition(*this)	// "ConeFeatureDefinition"
    , ConicalSegmentFeatureDefinition(*this)	// "ConicalSegmentFeatureDefinition"
    , CuboidFeatureDefinition(*this)	// "CuboidFeatureDefinition"
    , CylinderFeatureDefinition(*this)	// "CylinderFeatureDefinition"
    , CylindricalSegmentFeatureDefinition(*this)	// "CylindricalSegmentFeatureDefinition"
    , EdgePointFeatureDefinition(*this)	// "EdgePointFeatureDefinition"
    , EllipseFeatureDefinition(*this)	// "EllipseFeatureDefinition"
    , ElongatedCylinderFeatureDefinition(*this)	// "ElongatedCylinderFeatureDefinition"
    , ExtrudedCrossSectionFeatureDefinition(*this)	// "ExtrudedCrossSectionFeatureDefinition"
    , GenericFeatureDefinition(*this)	// "GenericFeatureDefinition"
    , LineFeatureDefinition(*this)	// "LineFeatureDefinition"
    , OppositeLinesFeatureDefinition(*this)	// "OppositeLinesFeatureDefinition"
    , OppositePlanesFeatureDefinition(*this)	// "OppositePlanesFeatureDefinition"
    , PatternFeatureDefinition(*this)	// "PatternFeatureDefinition"
    , PlaneFeatureDefinition(*this)	// "PlaneFeatureDefinition"
    , PointDefinedCurveFeatureDefinition(*this)	// "PointDefinedCurveFeatureDefinition"
    , PointDefinedSurfaceFeatureDefinition(*this)	// "PointDefinedSurfaceFeatureDefinition"
    , PointFeatureDefinition(*this)	// "PointFeatureDefinition"
    , ProfileGroupFeatureDefinition(*this)	// "ProfileGroupFeatureDefinition"
    , RunoutGroupFeatureDefinition(*this)	// "RunoutGroupFeatureDefinition"
    , SphereFeatureDefinition(*this)	// "SphereFeatureDefinition"
    , SphericalSegmentFeatureDefinition(*this)	// "SphericalSegmentFeatureDefinition"
    , SurfaceOfRevolutionFeatureDefinition(*this)	// "SurfaceOfRevolutionFeatureDefinition"
    , ThreadedFeatureDefinition(*this)	// "ThreadedFeatureDefinition"
    , ToroidalSegmentFeatureDefinition(*this)	// "ToroidalSegmentFeatureDefinition"
    , TorusFeatureDefinition(*this)	// "TorusFeatureDefinition"
{
}

void CFeatureDefinitionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureDefinitionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureIsDatumType::CFeatureIsDatumType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
{
}

CFeatureIsDatumType::CFeatureIsDatumType(CFeatureIsDatumType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
{
}

void CFeatureIsDatumType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureIsDatumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureIsInternalType::CFeatureIsInternalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
{
}

CFeatureIsInternalType::CFeatureIsInternalType(CFeatureIsInternalType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
{
}

void CFeatureIsInternalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureIsInternalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureItemBaseType::CFeatureItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureBaseType(node)
    , FeatureNominalId(*this)	// "FeatureNominalId"
    , ParentFeatureItemId(*this)	// "ParentFeatureItemId"
    , FeatureName(*this)	// "FeatureName"
    , QPId(*this)	// "QPId"
    , NotableEventIds(*this)	// "NotableEventIds"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

CFeatureItemBaseType::CFeatureItemBaseType(CFeatureItemBaseType const& other)
    : ::qif191::t::CFeatureBaseType(other.GetNode())
    , FeatureNominalId(*this)	// "FeatureNominalId"
    , ParentFeatureItemId(*this)	// "ParentFeatureItemId"
    , FeatureName(*this)	// "FeatureName"
    , QPId(*this)	// "QPId"
    , NotableEventIds(*this)	// "NotableEventIds"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

void CFeatureItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureItemsType::CFeatureItemsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureItem(*this)	// "FeatureItem"
    , ArcFeatureItem(*this)	// "ArcFeatureItem"
    , CircleFeatureItem(*this)	// "CircleFeatureItem"
    , CompoundFeatureItem(*this)	// "CompoundFeatureItem"
    , ConeFeatureItem(*this)	// "ConeFeatureItem"
    , ConicalSegmentFeatureItem(*this)	// "ConicalSegmentFeatureItem"
    , CuboidFeatureItem(*this)	// "CuboidFeatureItem"
    , CylinderFeatureItem(*this)	// "CylinderFeatureItem"
    , CylindricalSegmentFeatureItem(*this)	// "CylindricalSegmentFeatureItem"
    , EdgePointFeatureItem(*this)	// "EdgePointFeatureItem"
    , EllipseFeatureItem(*this)	// "EllipseFeatureItem"
    , ElongatedCylinderFeatureItem(*this)	// "ElongatedCylinderFeatureItem"
    , ExtrudedCrossSectionFeatureItem(*this)	// "ExtrudedCrossSectionFeatureItem"
    , GenericFeatureItem(*this)	// "GenericFeatureItem"
    , LineFeatureItem(*this)	// "LineFeatureItem"
    , OppositeLinesFeatureItem(*this)	// "OppositeLinesFeatureItem"
    , OppositePlanesFeatureItem(*this)	// "OppositePlanesFeatureItem"
    , PatternFeatureItem(*this)	// "PatternFeatureItem"
    , PlaneFeatureItem(*this)	// "PlaneFeatureItem"
    , PointDefinedCurveFeatureItem(*this)	// "PointDefinedCurveFeatureItem"
    , PointDefinedSurfaceFeatureItem(*this)	// "PointDefinedSurfaceFeatureItem"
    , PointFeatureItem(*this)	// "PointFeatureItem"
    , ProfileGroupFeatureItem(*this)	// "ProfileGroupFeatureItem"
    , RunoutGroupFeatureItem(*this)	// "RunoutGroupFeatureItem"
    , SphereFeatureItem(*this)	// "SphereFeatureItem"
    , SphericalSegmentFeatureItem(*this)	// "SphericalSegmentFeatureItem"
    , SurfaceOfRevolutionFeatureItem(*this)	// "SurfaceOfRevolutionFeatureItem"
    , ThreadedFeatureItem(*this)	// "ThreadedFeatureItem"
    , ToroidalSegmentFeatureItem(*this)	// "ToroidalSegmentFeatureItem"
    , TorusFeatureItem(*this)	// "TorusFeatureItem"
{
}

CFeatureItemsType::CFeatureItemsType(CFeatureItemsType const& other)
    : TypeBase(other.GetNode())
    , FeatureItem(*this)	// "FeatureItem"
    , ArcFeatureItem(*this)	// "ArcFeatureItem"
    , CircleFeatureItem(*this)	// "CircleFeatureItem"
    , CompoundFeatureItem(*this)	// "CompoundFeatureItem"
    , ConeFeatureItem(*this)	// "ConeFeatureItem"
    , ConicalSegmentFeatureItem(*this)	// "ConicalSegmentFeatureItem"
    , CuboidFeatureItem(*this)	// "CuboidFeatureItem"
    , CylinderFeatureItem(*this)	// "CylinderFeatureItem"
    , CylindricalSegmentFeatureItem(*this)	// "CylindricalSegmentFeatureItem"
    , EdgePointFeatureItem(*this)	// "EdgePointFeatureItem"
    , EllipseFeatureItem(*this)	// "EllipseFeatureItem"
    , ElongatedCylinderFeatureItem(*this)	// "ElongatedCylinderFeatureItem"
    , ExtrudedCrossSectionFeatureItem(*this)	// "ExtrudedCrossSectionFeatureItem"
    , GenericFeatureItem(*this)	// "GenericFeatureItem"
    , LineFeatureItem(*this)	// "LineFeatureItem"
    , OppositeLinesFeatureItem(*this)	// "OppositeLinesFeatureItem"
    , OppositePlanesFeatureItem(*this)	// "OppositePlanesFeatureItem"
    , PatternFeatureItem(*this)	// "PatternFeatureItem"
    , PlaneFeatureItem(*this)	// "PlaneFeatureItem"
    , PointDefinedCurveFeatureItem(*this)	// "PointDefinedCurveFeatureItem"
    , PointDefinedSurfaceFeatureItem(*this)	// "PointDefinedSurfaceFeatureItem"
    , PointFeatureItem(*this)	// "PointFeatureItem"
    , ProfileGroupFeatureItem(*this)	// "ProfileGroupFeatureItem"
    , RunoutGroupFeatureItem(*this)	// "RunoutGroupFeatureItem"
    , SphereFeatureItem(*this)	// "SphereFeatureItem"
    , SphericalSegmentFeatureItem(*this)	// "SphericalSegmentFeatureItem"
    , SurfaceOfRevolutionFeatureItem(*this)	// "SurfaceOfRevolutionFeatureItem"
    , ThreadedFeatureItem(*this)	// "ThreadedFeatureItem"
    , ToroidalSegmentFeatureItem(*this)	// "ToroidalSegmentFeatureItem"
    , TorusFeatureItem(*this)	// "TorusFeatureItem"
{
}

void CFeatureItemsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureItemsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureLengthType::CFeatureLengthType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
{
}

CFeatureLengthType::CFeatureLengthType(CFeatureLengthType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
{
}

void CFeatureLengthType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureLengthType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureNominalBaseType::CFeatureNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureBaseType(node)
    , PointList(*this)	// "PointList"
    , FeatureDefinitionId(*this)	// "FeatureDefinitionId"
    , EntityInternalIds(*this)	// "EntityInternalIds"
    , EntityExternalIds(*this)	// "EntityExternalIds"
{
}

CFeatureNominalBaseType::CFeatureNominalBaseType(CFeatureNominalBaseType const& other)
    : ::qif191::t::CFeatureBaseType(other.GetNode())
    , PointList(*this)	// "PointList"
    , FeatureDefinitionId(*this)	// "FeatureDefinitionId"
    , EntityInternalIds(*this)	// "EntityInternalIds"
    , EntityExternalIds(*this)	// "EntityExternalIds"
{
}

void CFeatureNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureNominalsType::CFeatureNominalsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureNominal(*this)	// "FeatureNominal"
    , ArcFeatureNominal(*this)	// "ArcFeatureNominal"
    , CircleFeatureNominal(*this)	// "CircleFeatureNominal"
    , CompoundFeatureNominal(*this)	// "CompoundFeatureNominal"
    , ConeFeatureNominal(*this)	// "ConeFeatureNominal"
    , ConicalSegmentFeatureNominal(*this)	// "ConicalSegmentFeatureNominal"
    , CuboidFeatureNominal(*this)	// "CuboidFeatureNominal"
    , CylinderFeatureNominal(*this)	// "CylinderFeatureNominal"
    , CylindricalSegmentFeatureNominal(*this)	// "CylindricalSegmentFeatureNominal"
    , EdgePointFeatureNominal(*this)	// "EdgePointFeatureNominal"
    , EllipseFeatureNominal(*this)	// "EllipseFeatureNominal"
    , ElongatedCylinderFeatureNominal(*this)	// "ElongatedCylinderFeatureNominal"
    , ExtrudedCrossSectionFeatureNominal(*this)	// "ExtrudedCrossSectionFeatureNominal"
    , GenericFeatureNominal(*this)	// "GenericFeatureNominal"
    , LineFeatureNominal(*this)	// "LineFeatureNominal"
    , OppositeLinesFeatureNominal(*this)	// "OppositeLinesFeatureNominal"
    , OppositePlanesFeatureNominal(*this)	// "OppositePlanesFeatureNominal"
    , PatternFeatureNominal(*this)	// "PatternFeatureNominal"
    , PlaneFeatureNominal(*this)	// "PlaneFeatureNominal"
    , PointDefinedCurveFeatureNominal(*this)	// "PointDefinedCurveFeatureNominal"
    , PointDefinedSurfaceFeatureNominal(*this)	// "PointDefinedSurfaceFeatureNominal"
    , PointFeatureNominal(*this)	// "PointFeatureNominal"
    , ProfileGroupFeatureNominal(*this)	// "ProfileGroupFeatureNominal"
    , RunoutGroupFeatureNominal(*this)	// "RunoutGroupFeatureNominal"
    , SphereFeatureNominal(*this)	// "SphereFeatureNominal"
    , SphericalSegmentFeatureNominal(*this)	// "SphericalSegmentFeatureNominal"
    , SurfaceOfRevolutionFeatureNominal(*this)	// "SurfaceOfRevolutionFeatureNominal"
    , ThreadedFeatureNominal(*this)	// "ThreadedFeatureNominal"
    , ToroidalSegmentFeatureNominal(*this)	// "ToroidalSegmentFeatureNominal"
    , TorusFeatureNominal(*this)	// "TorusFeatureNominal"
{
}

CFeatureNominalsType::CFeatureNominalsType(CFeatureNominalsType const& other)
    : TypeBase(other.GetNode())
    , FeatureNominal(*this)	// "FeatureNominal"
    , ArcFeatureNominal(*this)	// "ArcFeatureNominal"
    , CircleFeatureNominal(*this)	// "CircleFeatureNominal"
    , CompoundFeatureNominal(*this)	// "CompoundFeatureNominal"
    , ConeFeatureNominal(*this)	// "ConeFeatureNominal"
    , ConicalSegmentFeatureNominal(*this)	// "ConicalSegmentFeatureNominal"
    , CuboidFeatureNominal(*this)	// "CuboidFeatureNominal"
    , CylinderFeatureNominal(*this)	// "CylinderFeatureNominal"
    , CylindricalSegmentFeatureNominal(*this)	// "CylindricalSegmentFeatureNominal"
    , EdgePointFeatureNominal(*this)	// "EdgePointFeatureNominal"
    , EllipseFeatureNominal(*this)	// "EllipseFeatureNominal"
    , ElongatedCylinderFeatureNominal(*this)	// "ElongatedCylinderFeatureNominal"
    , ExtrudedCrossSectionFeatureNominal(*this)	// "ExtrudedCrossSectionFeatureNominal"
    , GenericFeatureNominal(*this)	// "GenericFeatureNominal"
    , LineFeatureNominal(*this)	// "LineFeatureNominal"
    , OppositeLinesFeatureNominal(*this)	// "OppositeLinesFeatureNominal"
    , OppositePlanesFeatureNominal(*this)	// "OppositePlanesFeatureNominal"
    , PatternFeatureNominal(*this)	// "PatternFeatureNominal"
    , PlaneFeatureNominal(*this)	// "PlaneFeatureNominal"
    , PointDefinedCurveFeatureNominal(*this)	// "PointDefinedCurveFeatureNominal"
    , PointDefinedSurfaceFeatureNominal(*this)	// "PointDefinedSurfaceFeatureNominal"
    , PointFeatureNominal(*this)	// "PointFeatureNominal"
    , ProfileGroupFeatureNominal(*this)	// "ProfileGroupFeatureNominal"
    , RunoutGroupFeatureNominal(*this)	// "RunoutGroupFeatureNominal"
    , SphereFeatureNominal(*this)	// "SphereFeatureNominal"
    , SphericalSegmentFeatureNominal(*this)	// "SphericalSegmentFeatureNominal"
    , SurfaceOfRevolutionFeatureNominal(*this)	// "SurfaceOfRevolutionFeatureNominal"
    , ThreadedFeatureNominal(*this)	// "ThreadedFeatureNominal"
    , ToroidalSegmentFeatureNominal(*this)	// "ToroidalSegmentFeatureNominal"
    , TorusFeatureNominal(*this)	// "TorusFeatureNominal"
{
}

void CFeatureNominalsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureNominalsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureOfSizeSubstituteFeatureAlgorithmEnumType::CFeatureOfSizeSubstituteFeatureAlgorithmEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CFeatureOfSizeSubstituteFeatureAlgorithmEnumType::CFeatureOfSizeSubstituteFeatureAlgorithmEnumType(CFeatureOfSizeSubstituteFeatureAlgorithmEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CFeatureOfSizeSubstituteFeatureAlgorithmType::CFeatureOfSizeSubstituteFeatureAlgorithmType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(node)
    , FeatureOfSizeSubstituteFeatureAlgorithmEnum(*this)	// "FeatureOfSizeSubstituteFeatureAlgorithmEnum"
    , OtherFeatureOfSizeSubstituteFeatureAlgorithm(*this)	// "OtherFeatureOfSizeSubstituteFeatureAlgorithm"
{
}

CFeatureOfSizeSubstituteFeatureAlgorithmType::CFeatureOfSizeSubstituteFeatureAlgorithmType(CFeatureOfSizeSubstituteFeatureAlgorithmType const& other)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(other.GetNode())
    , FeatureOfSizeSubstituteFeatureAlgorithmEnum(*this)	// "FeatureOfSizeSubstituteFeatureAlgorithmEnum"
    , OtherFeatureOfSizeSubstituteFeatureAlgorithm(*this)	// "OtherFeatureOfSizeSubstituteFeatureAlgorithm"
{
}

void CFeatureOfSizeSubstituteFeatureAlgorithmType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureOfSizeSubstituteFeatureAlgorithmType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureRulesType::CFeatureRulesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SamplingRigorMax(*this)	// "SamplingRigorMax"
    , IfThenElseFeatureRules(*this)	// "IfThenElseFeatureRules"
    , MaxFeatureRules(*this)	// "MaxFeatureRules"
{
}

CFeatureRulesType::CFeatureRulesType(CFeatureRulesType const& other)
    : TypeBase(other.GetNode())
    , SamplingRigorMax(*this)	// "SamplingRigorMax"
    , IfThenElseFeatureRules(*this)	// "IfThenElseFeatureRules"
    , MaxFeatureRules(*this)	// "MaxFeatureRules"
{
}

void CFeatureRulesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureRulesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFileInternalType::CFileInternalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
{
}

CFileInternalType::CFileInternalType(CFileInternalType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
{
}

void CFileInternalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FileInternalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFileSpecType::CFileSpecType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CommonFileSpecEnum(*this)	// "CommonFileSpecEnum"
    , OtherFileSpec(*this)	// "OtherFileSpec"
{
}

CFileSpecType::CFileSpecType(CFileSpecType const& other)
    : TypeBase(other.GetNode())
    , CommonFileSpecEnum(*this)	// "CommonFileSpecEnum"
    , OtherFileSpec(*this)	// "OtherFileSpec"
{
}

void CFileSpecType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FileSpecType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFileType::CFileType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
    , Format(*this)	// "Format"
{
}

CFileType::CFileType(CFileType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
    , Format(*this)	// "Format"
{
}

void CFileType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FileType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFileUnitsType::CFileUnitsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PrimaryUnits(*this)	// "PrimaryUnits"
    , OtherUnits(*this)	// "OtherUnits"
    , UserDefinedUnits(*this)	// "UserDefinedUnits"
{
}

CFileUnitsType::CFileUnitsType(CFileUnitsType const& other)
    : TypeBase(other.GetNode())
    , PrimaryUnits(*this)	// "PrimaryUnits"
    , OtherUnits(*this)	// "OtherUnits"
    , UserDefinedUnits(*this)	// "UserDefinedUnits"
{
}

void CFileUnitsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FileUnitsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFirstArticleStudyPlanType::CFirstArticleStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyPlanBaseType(node)
    , InSpecRatio(*this)	// "InSpecRatio"
    , LinearAbsoluteMaximum(*this)	// "LinearAbsoluteMaximum"
    , AngularAbsoluteMaximum(*this)	// "AngularAbsoluteMaximum"
    , AreaAbsoluteMaximum(*this)	// "AreaAbsoluteMaximum"
    , ForceAbsoluteMaximum(*this)	// "ForceAbsoluteMaximum"
    , MassAbsoluteMaximum(*this)	// "MassAbsoluteMaximum"
    , PressureAbsoluteMaximum(*this)	// "PressureAbsoluteMaximum"
    , SpeedAbsoluteMaximum(*this)	// "SpeedAbsoluteMaximum"
    , TemperatureAbsoluteMaximum(*this)	// "TemperatureAbsoluteMaximum"
    , TimeAbsoluteMaximum(*this)	// "TimeAbsoluteMaximum"
    , UserDefinedUnitAbsoluteMaximum(*this)	// "UserDefinedUnitAbsoluteMaximum"
    , RelativeMaximum(*this)	// "RelativeMaximum"
{
}

CFirstArticleStudyPlanType::CFirstArticleStudyPlanType(CFirstArticleStudyPlanType const& other)
    : ::qif191::t::CStatisticalStudyPlanBaseType(other.GetNode())
    , InSpecRatio(*this)	// "InSpecRatio"
    , LinearAbsoluteMaximum(*this)	// "LinearAbsoluteMaximum"
    , AngularAbsoluteMaximum(*this)	// "AngularAbsoluteMaximum"
    , AreaAbsoluteMaximum(*this)	// "AreaAbsoluteMaximum"
    , ForceAbsoluteMaximum(*this)	// "ForceAbsoluteMaximum"
    , MassAbsoluteMaximum(*this)	// "MassAbsoluteMaximum"
    , PressureAbsoluteMaximum(*this)	// "PressureAbsoluteMaximum"
    , SpeedAbsoluteMaximum(*this)	// "SpeedAbsoluteMaximum"
    , TemperatureAbsoluteMaximum(*this)	// "TemperatureAbsoluteMaximum"
    , TimeAbsoluteMaximum(*this)	// "TimeAbsoluteMaximum"
    , UserDefinedUnitAbsoluteMaximum(*this)	// "UserDefinedUnitAbsoluteMaximum"
    , RelativeMaximum(*this)	// "RelativeMaximum"
{
}

void CFirstArticleStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FirstArticleStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFirstArticleStudyResultsType::CFirstArticleStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , InSpecRatio(*this)	// "InSpecRatio"
    , LinearAbsoluteMaximum(*this)	// "LinearAbsoluteMaximum"
    , AngularAbsoluteMaximum(*this)	// "AngularAbsoluteMaximum"
    , AreaAbsoluteMaximum(*this)	// "AreaAbsoluteMaximum"
    , ForceAbsoluteMaximum(*this)	// "ForceAbsoluteMaximum"
    , MassAbsoluteMaximum(*this)	// "MassAbsoluteMaximum"
    , PressureAbsoluteMaximum(*this)	// "PressureAbsoluteMaximum"
    , SpeedAbsoluteMaximum(*this)	// "SpeedAbsoluteMaximum"
    , TemperatureAbsoluteMaximum(*this)	// "TemperatureAbsoluteMaximum"
    , TimeAbsoluteMaximum(*this)	// "TimeAbsoluteMaximum"
    , UserDefinedUnitAbsoluteMaximum(*this)	// "UserDefinedUnitAbsoluteMaximum"
    , RelativeMaximum(*this)	// "RelativeMaximum"
{
}

CFirstArticleStudyResultsType::CFirstArticleStudyResultsType(CFirstArticleStudyResultsType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , InSpecRatio(*this)	// "InSpecRatio"
    , LinearAbsoluteMaximum(*this)	// "LinearAbsoluteMaximum"
    , AngularAbsoluteMaximum(*this)	// "AngularAbsoluteMaximum"
    , AreaAbsoluteMaximum(*this)	// "AreaAbsoluteMaximum"
    , ForceAbsoluteMaximum(*this)	// "ForceAbsoluteMaximum"
    , MassAbsoluteMaximum(*this)	// "MassAbsoluteMaximum"
    , PressureAbsoluteMaximum(*this)	// "PressureAbsoluteMaximum"
    , SpeedAbsoluteMaximum(*this)	// "SpeedAbsoluteMaximum"
    , TemperatureAbsoluteMaximum(*this)	// "TemperatureAbsoluteMaximum"
    , TimeAbsoluteMaximum(*this)	// "TimeAbsoluteMaximum"
    , UserDefinedUnitAbsoluteMaximum(*this)	// "UserDefinedUnitAbsoluteMaximum"
    , RelativeMaximum(*this)	// "RelativeMaximum"
{
}

void CFirstArticleStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FirstArticleStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFixtureType::CFixtureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementResourceBaseType(node)
{
}

CFixtureType::CFixtureType(CFixtureType const& other)
    : ::qif191::t::CMeasurementResourceBaseType(other.GetNode())
{
}

void CFixtureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FixtureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFixturesType::CFixturesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Fixture(*this)	// "Fixture"
{
}

CFixturesType::CFixturesType(CFixturesType const& other)
    : TypeBase(other.GetNode())
    , Fixture(*this)	// "Fixture"
{
}

void CFixturesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FixturesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFlatnessCharacteristicActualType::CFlatnessCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicActualBaseType(node)
    , MaxFlatness(*this)	// "MaxFlatness"
    , ZonePlane(*this)	// "ZonePlane"
{
}

CFlatnessCharacteristicActualType::CFlatnessCharacteristicActualType(CFlatnessCharacteristicActualType const& other)
    : ::qif191::t::CFormCharacteristicActualBaseType(other.GetNode())
    , MaxFlatness(*this)	// "MaxFlatness"
    , ZonePlane(*this)	// "ZonePlane"
{
}

void CFlatnessCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FlatnessCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFlatnessCharacteristicDefinitionType::CFlatnessCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , ToleranceValue(*this)	// "ToleranceValue"
    , ToleranceZonePerUnitArea(*this)	// "ToleranceZonePerUnitArea"
    , NotConvex(*this)	// "NotConvex"
{
}

CFlatnessCharacteristicDefinitionType::CFlatnessCharacteristicDefinitionType(CFlatnessCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , ToleranceValue(*this)	// "ToleranceValue"
    , ToleranceZonePerUnitArea(*this)	// "ToleranceZonePerUnitArea"
    , NotConvex(*this)	// "NotConvex"
{
}

void CFlatnessCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FlatnessCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFlatnessCharacteristicItemType::CFlatnessCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicItemBaseType(node)
{
}

CFlatnessCharacteristicItemType::CFlatnessCharacteristicItemType(CFlatnessCharacteristicItemType const& other)
    : ::qif191::t::CFormCharacteristicItemBaseType(other.GetNode())
{
}

void CFlatnessCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FlatnessCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFlatnessCharacteristicNominalType::CFlatnessCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicNominalBaseType(node)
    , CircularZoneLimit(*this)	// "CircularZoneLimit"
    , DirectionalZoneLimit(*this)	// "DirectionalZoneLimit"
    , RectangularZoneLimit(*this)	// "RectangularZoneLimit"
{
}

CFlatnessCharacteristicNominalType::CFlatnessCharacteristicNominalType(CFlatnessCharacteristicNominalType const& other)
    : ::qif191::t::CFormCharacteristicNominalBaseType(other.GetNode())
    , CircularZoneLimit(*this)	// "CircularZoneLimit"
    , DirectionalZoneLimit(*this)	// "DirectionalZoneLimit"
    , RectangularZoneLimit(*this)	// "RectangularZoneLimit"
{
}

void CFlatnessCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FlatnessCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFlatnessCharacteristicStatsEvalType::CFlatnessCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(node)
    , MaxFlatnessStats(*this)	// "MaxFlatnessStats"
{
}

CFlatnessCharacteristicStatsEvalType::CFlatnessCharacteristicStatsEvalType(CFlatnessCharacteristicStatsEvalType const& other)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(other.GetNode())
    , MaxFlatnessStats(*this)	// "MaxFlatnessStats"
{
}

void CFlatnessCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FlatnessCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFontType::CFontType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Index(*this)	// "@Index"
    , Bold(*this)	// "@Bold"
    , Italic(*this)	// "@Italic"
    , Name(*this)	// "Name"
    , Size(*this)	// "Size"
{
}

CFontType::CFontType(CFontType const& other)
    : TypeBase(other.GetNode())
    , Index(*this)	// "@Index"
    , Bold(*this)	// "@Bold"
    , Italic(*this)	// "@Italic"
    , Name(*this)	// "Name"
    , Size(*this)	// "Size"
{
}

void CFontType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FontType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFontsType::CFontsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Font(*this)	// "Font"
{
}

CFontsType::CFontsType(CFontsType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Font(*this)	// "Font"
{
}

void CFontsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FontsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceCharacteristicActualBaseType::CForceCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CForceCharacteristicActualBaseType::CForceCharacteristicActualBaseType(CForceCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CForceCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceCharacteristicDefinitionBaseType::CForceCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CForceCharacteristicDefinitionBaseType::CForceCharacteristicDefinitionBaseType(CForceCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CForceCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceCharacteristicItemBaseType::CForceCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CForceCharacteristicItemBaseType::CForceCharacteristicItemBaseType(CForceCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CForceCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceCharacteristicNominalBaseType::CForceCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CForceCharacteristicNominalBaseType::CForceCharacteristicNominalBaseType(CForceCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CForceCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceToleranceType::CForceToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CForceToleranceType::CForceToleranceType(CForceToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CForceToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceUnitType::CForceUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CForceUnitType::CForceUnitType(CForceUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CForceUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CForceValueType::CForceValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , forceUnit(*this)	// "@forceUnit"
{
}

CForceValueType::CForceValueType(CForceValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , forceUnit(*this)	// "@forceUnit"
{
}

void CForceValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ForceValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormCharacteristicActualBaseType::CFormCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(node)
{
}

CFormCharacteristicActualBaseType::CFormCharacteristicActualBaseType(CFormCharacteristicActualBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(other.GetNode())
{
}

void CFormCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormCharacteristicDefinitionBaseType::CFormCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(node)
{
}

CFormCharacteristicDefinitionBaseType::CFormCharacteristicDefinitionBaseType(CFormCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CFormCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormCharacteristicItemBaseType::CFormCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(node)
{
}

CFormCharacteristicItemBaseType::CFormCharacteristicItemBaseType(CFormCharacteristicItemBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(other.GetNode())
{
}

void CFormCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormCharacteristicNominalBaseType::CFormCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(node)
{
}

CFormCharacteristicNominalBaseType::CFormCharacteristicNominalBaseType(CFormCharacteristicNominalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(other.GetNode())
{
}

void CFormCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormCharacteristicStatsEvalBaseType::CFormCharacteristicStatsEvalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
{
}

CFormCharacteristicStatsEvalBaseType::CFormCharacteristicStatsEvalBaseType(CFormCharacteristicStatsEvalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
{
}

void CFormCharacteristicStatsEvalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormCharacteristicStatsEvalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormalStandardEnumType::CFormalStandardEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CFormalStandardEnumType::CFormalStandardEnumType(CFormalStandardEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CFormalStandardType::CFormalStandardType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FormalStandardEnum(*this)	// "FormalStandardEnum"
    , OtherFormalStandard(*this)	// "OtherFormalStandard"
{
}

CFormalStandardType::CFormalStandardType(CFormalStandardType const& other)
    : TypeBase(other.GetNode())
    , FormalStandardEnum(*this)	// "FormalStandardEnum"
    , OtherFormalStandard(*this)	// "OtherFormalStandard"
{
}

void CFormalStandardType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormalStandardType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFrameCircularType::CFrameCircularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFrameType(node)
    , Crossed(*this)	// "@Crossed"
    , Radius(*this)	// "Radius"
{
}

CFrameCircularType::CFrameCircularType(CFrameCircularType const& other)
    : ::qif191::t::CFrameType(other.GetNode())
    , Crossed(*this)	// "@Crossed"
    , Radius(*this)	// "Radius"
{
}

void CFrameCircularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FrameCircularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFrameFlagType::CFrameFlagType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFrameRectangularType(node)
    , Right(*this)	// "@Right"
{
}

CFrameFlagType::CFrameFlagType(CFrameFlagType const& other)
    : ::qif191::t::CFrameRectangularType(other.GetNode())
    , Right(*this)	// "@Right"
{
}

void CFrameFlagType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FrameFlagType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFrameIrregularFormType::CFrameIrregularFormType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFrameType(node)
    , Points(*this)	// "Points"
{
}

CFrameIrregularFormType::CFrameIrregularFormType(CFrameIrregularFormType const& other)
    : ::qif191::t::CFrameType(other.GetNode())
    , Points(*this)	// "Points"
{
}

void CFrameIrregularFormType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FrameIrregularFormType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFrameRectangularType::CFrameRectangularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFrameType(node)
    , Width(*this)	// "Width"
    , Height(*this)	// "Height"
{
}

CFrameRectangularType::CFrameRectangularType(CFrameRectangularType const& other)
    : ::qif191::t::CFrameType(other.GetNode())
    , Width(*this)	// "Width"
    , Height(*this)	// "Height"
{
}

void CFrameRectangularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FrameRectangularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFrameType::CFrameType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XY(*this)	// "XY"
{
}

CFrameType::CFrameType(CFrameType const& other)
    : TypeBase(other.GetNode())
    , XY(*this)	// "XY"
{
}

void CFrameType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FrameType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFramesType::CFramesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Frame(*this)	// "Frame"
    , FrameCircular(*this)	// "FrameCircular"
    , FrameFlag(*this)	// "FrameFlag"
    , FrameIrregularForm(*this)	// "FrameIrregularForm"
    , FrameRectangular(*this)	// "FrameRectangular"
{
}

CFramesType::CFramesType(CFramesType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Frame(*this)	// "Frame"
    , FrameCircular(*this)	// "FrameCircular"
    , FrameFlag(*this)	// "FrameFlag"
    , FrameIrregularForm(*this)	// "FrameIrregularForm"
    , FrameRectangular(*this)	// "FrameRectangular"
{
}

void CFramesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FramesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFunctionDiscreteType::CFunctionDiscreteType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , DomainValues(*this)	// "DomainValues"
    , RangeValues(*this)	// "RangeValues"
{
}

CFunctionDiscreteType::CFunctionDiscreteType(CFunctionDiscreteType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , DomainValues(*this)	// "DomainValues"
    , RangeValues(*this)	// "RangeValues"
{
}

void CFunctionDiscreteType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FunctionDiscreteType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGDTEnumType::CGDTEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CGDTEnumType::CGDTEnumType(CGDTEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CGageDeviceType::CGageDeviceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementDeviceType(node)
{
}

CGageDeviceType::CGageDeviceType(CGageDeviceType const& other)
    : ::qif191::t::CMeasurementDeviceType(other.GetNode())
{
}

void CGageDeviceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GageDeviceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGageMeasureFeatureMethodType::CGageMeasureFeatureMethodType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasureFeatureMethodBaseType(node)
{
}

CGageMeasureFeatureMethodType::CGageMeasureFeatureMethodType(CGageMeasureFeatureMethodType const& other)
    : ::qif191::t::CMeasureFeatureMethodBaseType(other.GetNode())
{
}

void CGageMeasureFeatureMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GageMeasureFeatureMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGageRandRStudyEnumType::CGageRandRStudyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CGageRandRStudyEnumType::CGageRandRStudyEnumType(CGageRandRStudyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CGageRandRStudyPlanType::CGageRandRStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyPlanBaseType(node)
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , RandRStudyType(*this)	// "RandRStudyType"
    , NumberOfAppraisers(*this)	// "NumberOfAppraisers"
    , NumberOfParts(*this)	// "NumberOfParts"
    , NumberOfTrials(*this)	// "NumberOfTrials"
    , MaximumRelativeAppraiserVariation(*this)	// "MaximumRelativeAppraiserVariation"
    , MaximumAbsoluteLinearAppraiserVariation(*this)	// "MaximumAbsoluteLinearAppraiserVariation"
    , MaximumAbsoluteAngularAppraiserVariation(*this)	// "MaximumAbsoluteAngularAppraiserVariation"
    , MaximumAbsoluteAreaAppraiserVariation(*this)	// "MaximumAbsoluteAreaAppraiserVariation"
    , MaximumAbsoluteForceAppraiserVariation(*this)	// "MaximumAbsoluteForceAppraiserVariation"
    , MaximumAbsoluteMassAppraiserVariation(*this)	// "MaximumAbsoluteMassAppraiserVariation"
    , MaximumAbsolutePressureAppraiserVariation(*this)	// "MaximumAbsolutePressureAppraiserVariation"
    , MaximumAbsoluteSpeedAppraiserVariation(*this)	// "MaximumAbsoluteSpeedAppraiserVariation"
    , MaximumAbsoluteTemperatureAppraiserVariation(*this)	// "MaximumAbsoluteTemperatureAppraiserVariation"
    , MaximumAbsoluteTimeAppraiserVariation(*this)	// "MaximumAbsoluteTimeAppraiserVariation"
    , MaximumAbsoluteUserDefinedUnitAppraiserVariation(*this)	// "MaximumAbsoluteUserDefinedUnitAppraiserVariation"
    , MaximumRelativeEquipmentVariation(*this)	// "MaximumRelativeEquipmentVariation"
    , MaximumAbsoluteLinearEquipmentVariation(*this)	// "MaximumAbsoluteLinearEquipmentVariation"
    , MaximumAbsoluteAngularEquipmentVariation(*this)	// "MaximumAbsoluteAngularEquipmentVariation"
    , MaximumAbsoluteAreaEquipmentVariation(*this)	// "MaximumAbsoluteAreaEquipmentVariation"
    , MaximumAbsoluteForceEquipmentVariation(*this)	// "MaximumAbsoluteForceEquipmentVariation"
    , MaximumAbsoluteMassEquipmentVariation(*this)	// "MaximumAbsoluteMassEquipmentVariation"
    , MaximumAbsolutePressureEquipmentVariation(*this)	// "MaximumAbsolutePressureEquipmentVariation"
    , MaximumAbsoluteSpeedEquipmentVariation(*this)	// "MaximumAbsoluteSpeedEquipmentVariation"
    , MaximumAbsoluteTemperatureEquipmentVariation(*this)	// "MaximumAbsoluteTemperatureEquipmentVariation"
    , MaximumAbsoluteTimeEquipmentVariation(*this)	// "MaximumAbsoluteTimeEquipmentVariation"
    , MaximumAbsoluteUserDefinedUnitEquipmentVariation(*this)	// "MaximumAbsoluteUserDefinedUnitEquipmentVariation"
    , MaximumRelativeTotalRandR(*this)	// "MaximumRelativeTotalRandR"
    , MaximumAbsoluteLinearTotalRandR(*this)	// "MaximumAbsoluteLinearTotalRandR"
    , MaximumAbsoluteAngularTotalRandR(*this)	// "MaximumAbsoluteAngularTotalRandR"
    , MaximumAbsoluteAreaTotalRandR(*this)	// "MaximumAbsoluteAreaTotalRandR"
    , MaximumAbsoluteForceTotalRandR(*this)	// "MaximumAbsoluteForceTotalRandR"
    , MaximumAbsoluteMassTotalRandR(*this)	// "MaximumAbsoluteMassTotalRandR"
    , MaximumAbsolutePressureTotalRandR(*this)	// "MaximumAbsolutePressureTotalRandR"
    , MaximumAbsoluteSpeedTotalRandR(*this)	// "MaximumAbsoluteSpeedTotalRandR"
    , MaximumAbsoluteTemperatureTotalRandR(*this)	// "MaximumAbsoluteTemperatureTotalRandR"
    , MaximumAbsoluteTimeTotalRandR(*this)	// "MaximumAbsoluteTimeTotalRandR"
    , MaximumAbsoluteUserDefinedUnitTotalRandR(*this)	// "MaximumAbsoluteUserDefinedUnitTotalRandR"
{
}

CGageRandRStudyPlanType::CGageRandRStudyPlanType(CGageRandRStudyPlanType const& other)
    : ::qif191::t::CStatisticalStudyPlanBaseType(other.GetNode())
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , RandRStudyType(*this)	// "RandRStudyType"
    , NumberOfAppraisers(*this)	// "NumberOfAppraisers"
    , NumberOfParts(*this)	// "NumberOfParts"
    , NumberOfTrials(*this)	// "NumberOfTrials"
    , MaximumRelativeAppraiserVariation(*this)	// "MaximumRelativeAppraiserVariation"
    , MaximumAbsoluteLinearAppraiserVariation(*this)	// "MaximumAbsoluteLinearAppraiserVariation"
    , MaximumAbsoluteAngularAppraiserVariation(*this)	// "MaximumAbsoluteAngularAppraiserVariation"
    , MaximumAbsoluteAreaAppraiserVariation(*this)	// "MaximumAbsoluteAreaAppraiserVariation"
    , MaximumAbsoluteForceAppraiserVariation(*this)	// "MaximumAbsoluteForceAppraiserVariation"
    , MaximumAbsoluteMassAppraiserVariation(*this)	// "MaximumAbsoluteMassAppraiserVariation"
    , MaximumAbsolutePressureAppraiserVariation(*this)	// "MaximumAbsolutePressureAppraiserVariation"
    , MaximumAbsoluteSpeedAppraiserVariation(*this)	// "MaximumAbsoluteSpeedAppraiserVariation"
    , MaximumAbsoluteTemperatureAppraiserVariation(*this)	// "MaximumAbsoluteTemperatureAppraiserVariation"
    , MaximumAbsoluteTimeAppraiserVariation(*this)	// "MaximumAbsoluteTimeAppraiserVariation"
    , MaximumAbsoluteUserDefinedUnitAppraiserVariation(*this)	// "MaximumAbsoluteUserDefinedUnitAppraiserVariation"
    , MaximumRelativeEquipmentVariation(*this)	// "MaximumRelativeEquipmentVariation"
    , MaximumAbsoluteLinearEquipmentVariation(*this)	// "MaximumAbsoluteLinearEquipmentVariation"
    , MaximumAbsoluteAngularEquipmentVariation(*this)	// "MaximumAbsoluteAngularEquipmentVariation"
    , MaximumAbsoluteAreaEquipmentVariation(*this)	// "MaximumAbsoluteAreaEquipmentVariation"
    , MaximumAbsoluteForceEquipmentVariation(*this)	// "MaximumAbsoluteForceEquipmentVariation"
    , MaximumAbsoluteMassEquipmentVariation(*this)	// "MaximumAbsoluteMassEquipmentVariation"
    , MaximumAbsolutePressureEquipmentVariation(*this)	// "MaximumAbsolutePressureEquipmentVariation"
    , MaximumAbsoluteSpeedEquipmentVariation(*this)	// "MaximumAbsoluteSpeedEquipmentVariation"
    , MaximumAbsoluteTemperatureEquipmentVariation(*this)	// "MaximumAbsoluteTemperatureEquipmentVariation"
    , MaximumAbsoluteTimeEquipmentVariation(*this)	// "MaximumAbsoluteTimeEquipmentVariation"
    , MaximumAbsoluteUserDefinedUnitEquipmentVariation(*this)	// "MaximumAbsoluteUserDefinedUnitEquipmentVariation"
    , MaximumRelativeTotalRandR(*this)	// "MaximumRelativeTotalRandR"
    , MaximumAbsoluteLinearTotalRandR(*this)	// "MaximumAbsoluteLinearTotalRandR"
    , MaximumAbsoluteAngularTotalRandR(*this)	// "MaximumAbsoluteAngularTotalRandR"
    , MaximumAbsoluteAreaTotalRandR(*this)	// "MaximumAbsoluteAreaTotalRandR"
    , MaximumAbsoluteForceTotalRandR(*this)	// "MaximumAbsoluteForceTotalRandR"
    , MaximumAbsoluteMassTotalRandR(*this)	// "MaximumAbsoluteMassTotalRandR"
    , MaximumAbsolutePressureTotalRandR(*this)	// "MaximumAbsolutePressureTotalRandR"
    , MaximumAbsoluteSpeedTotalRandR(*this)	// "MaximumAbsoluteSpeedTotalRandR"
    , MaximumAbsoluteTemperatureTotalRandR(*this)	// "MaximumAbsoluteTemperatureTotalRandR"
    , MaximumAbsoluteTimeTotalRandR(*this)	// "MaximumAbsoluteTimeTotalRandR"
    , MaximumAbsoluteUserDefinedUnitTotalRandR(*this)	// "MaximumAbsoluteUserDefinedUnitTotalRandR"
{
}

void CGageRandRStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GageRandRStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGageRandRStudyResultsType::CGageRandRStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , NumberOfAppraisers(*this)	// "NumberOfAppraisers"
    , NumberOfParts(*this)	// "NumberOfParts"
    , NumberOfTrials(*this)	// "NumberOfTrials"
{
}

CGageRandRStudyResultsType::CGageRandRStudyResultsType(CGageRandRStudyResultsType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , NumberOfAppraisers(*this)	// "NumberOfAppraisers"
    , NumberOfParts(*this)	// "NumberOfParts"
    , NumberOfTrials(*this)	// "NumberOfTrials"
{
}

void CGageRandRStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GageRandRStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGenericFeatureActualType::CGenericFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
{
}

CGenericFeatureActualType::CGenericFeatureActualType(CGenericFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
{
}

void CGenericFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GenericFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGenericFeatureDefinitionType::CGenericFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CGenericFeatureDefinitionType::CGenericFeatureDefinitionType(CGenericFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CGenericFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GenericFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGenericFeatureItemType::CGenericFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
{
}

CGenericFeatureItemType::CGenericFeatureItemType(CGenericFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
{
}

void CGenericFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GenericFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGenericFeatureNominalType::CGenericFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , ReferenceFeatureNominalId(*this)	// "ReferenceFeatureNominalId"
{
}

CGenericFeatureNominalType::CGenericFeatureNominalType(CGenericFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , ReferenceFeatureNominalId(*this)	// "ReferenceFeatureNominalId"
{
}

void CGenericFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GenericFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometricCharacteristicActualBaseType::CGeometricCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CGeometricCharacteristicActualBaseType::CGeometricCharacteristicActualBaseType(CGeometricCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CGeometricCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometricCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometricCharacteristicDefinitionBaseType::CGeometricCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , ToleranceValue(*this)	// "ToleranceValue"
    , IntersectionPlane(*this)	// "IntersectionPlane"
    , OrientationPlane(*this)	// "OrientationPlane"
{
}

CGeometricCharacteristicDefinitionBaseType::CGeometricCharacteristicDefinitionBaseType(CGeometricCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , ToleranceValue(*this)	// "ToleranceValue"
    , IntersectionPlane(*this)	// "IntersectionPlane"
    , OrientationPlane(*this)	// "OrientationPlane"
{
}

void CGeometricCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometricCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometricCharacteristicItemBaseType::CGeometricCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CGeometricCharacteristicItemBaseType::CGeometricCharacteristicItemBaseType(CGeometricCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CGeometricCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometricCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometricCharacteristicNominalBaseType::CGeometricCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
{
}

CGeometricCharacteristicNominalBaseType::CGeometricCharacteristicNominalBaseType(CGeometricCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
{
}

void CGeometricCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometricCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometricCharacteristicStatsEvalType::CGeometricCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
{
}

CGeometricCharacteristicStatsEvalType::CGeometricCharacteristicStatsEvalType(CGeometricCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
{
}

void CGeometricCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometricCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometryBaseType::CGeometryBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CNodeWithIdBaseType(node)
{
}

CGeometryBaseType::CGeometryBaseType(CGeometryBaseType const& other)
    : ::qif191::t::CNodeWithIdBaseType(other.GetNode())
{
}

void CGeometryBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometryBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGeometrySetType::CGeometrySetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSet(*this)	// "PointSet"
    , Curve12Set(*this)	// "Curve12Set"
    , Curve13Set(*this)	// "Curve13Set"
    , SurfaceSet(*this)	// "SurfaceSet"
    , CurveMeshSet(*this)	// "CurveMeshSet"
    , SurfaceMeshSet(*this)	// "SurfaceMeshSet"
{
}

CGeometrySetType::CGeometrySetType(CGeometrySetType const& other)
    : TypeBase(other.GetNode())
    , PointSet(*this)	// "PointSet"
    , Curve12Set(*this)	// "Curve12Set"
    , Curve13Set(*this)	// "Curve13Set"
    , SurfaceSet(*this)	// "SurfaceSet"
    , CurveMeshSet(*this)	// "CurveMeshSet"
    , SurfaceMeshSet(*this)	// "SurfaceMeshSet"
{
}

void CGeometrySetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GeometrySetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGreaterOrEqualType::CGreaterOrEqualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticComparisonBaseType(node)
{
}

CGreaterOrEqualType::CGreaterOrEqualType(CGreaterOrEqualType const& other)
    : ::qif191::t::CArithmeticComparisonBaseType(other.GetNode())
{
}

void CGreaterOrEqualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GreaterOrEqualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGreaterThanType::CGreaterThanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticComparisonBaseType(node)
{
}

CGreaterThanType::CGreaterThanType(CGreaterThanType const& other)
    : ::qif191::t::CArithmeticComparisonBaseType(other.GetNode())
{
}

void CGreaterThanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GreaterThanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CHeightCharacteristicActualType::CHeightCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CHeightCharacteristicActualType::CHeightCharacteristicActualType(CHeightCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CHeightCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("HeightCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CHeightCharacteristicDefinitionType::CHeightCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CHeightCharacteristicDefinitionType::CHeightCharacteristicDefinitionType(CHeightCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CHeightCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("HeightCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CHeightCharacteristicItemType::CHeightCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CHeightCharacteristicItemType::CHeightCharacteristicItemType(CHeightCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CHeightCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("HeightCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CHeightCharacteristicNominalType::CHeightCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CHeightCharacteristicNominalType::CHeightCharacteristicNominalType(CHeightCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CHeightCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("HeightCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CHeightCharacteristicStatsEvalType::CHeightCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CHeightCharacteristicStatsEvalType::CHeightCharacteristicStatsEvalType(CHeightCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CHeightCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("HeightCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CI2Type::CI2Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CI2Type::CI2Type(CI2Type const& other)
    : TypeBase(other.GetNode())
{
}


CISO10360TestType::CISO10360TestType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCMMAccuracyTestBaseType(node)
    , MaxErrorConstant(*this)	// "MaxErrorConstant"
    , LinearError(*this)	// "LinearError"
    , LesserError(*this)	// "LesserError"
{
}

CISO10360TestType::CISO10360TestType(CISO10360TestType const& other)
    : ::qif191::t::CCMMAccuracyTestBaseType(other.GetNode())
    , MaxErrorConstant(*this)	// "MaxErrorConstant"
    , LinearError(*this)	// "LinearError"
    , LesserError(*this)	// "LesserError"
{
}

void CISO10360TestType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ISO10360TestType"), _T("http://qifstandards.org/xsd/qif2"));
}

CISODegreeOfFreedomEnumType::CISODegreeOfFreedomEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CISODegreeOfFreedomEnumType::CISODegreeOfFreedomEnumType(CISODegreeOfFreedomEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CIfThenArcRuleType::CIfThenArcRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenArcRuleType::CIfThenArcRuleType(CIfThenArcRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenArcRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenArcRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenCircleRuleType::CIfThenCircleRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenCircleRuleType::CIfThenCircleRuleType(CIfThenCircleRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenCircleRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenCircleRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenConeRuleType::CIfThenConeRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenConeRuleType::CIfThenConeRuleType(CIfThenConeRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenConeRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenConeRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenConicalSegmentRuleType::CIfThenConicalSegmentRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenConicalSegmentRuleType::CIfThenConicalSegmentRuleType(CIfThenConicalSegmentRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenConicalSegmentRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenConicalSegmentRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenCuboidRuleType::CIfThenCuboidRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenCuboidRuleType::CIfThenCuboidRuleType(CIfThenCuboidRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenCuboidRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenCuboidRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenCurveRuleType::CIfThenCurveRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
{
}

CIfThenCurveRuleType::CIfThenCurveRuleType(CIfThenCurveRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
{
}

void CIfThenCurveRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenCurveRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenCylinderRuleType::CIfThenCylinderRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenCylinderRuleType::CIfThenCylinderRuleType(CIfThenCylinderRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenCylinderRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenCylinderRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenCylindricalSegmentRuleType::CIfThenCylindricalSegmentRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenCylindricalSegmentRuleType::CIfThenCylindricalSegmentRuleType(CIfThenCylindricalSegmentRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenCylindricalSegmentRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenCylindricalSegmentRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenEllipseRuleType::CIfThenEllipseRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenEllipseRuleType::CIfThenEllipseRuleType(CIfThenEllipseRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenEllipseRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenEllipseRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenElongatedCylinderRuleType::CIfThenElongatedCylinderRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenElongatedCylinderRuleType::CIfThenElongatedCylinderRuleType(CIfThenElongatedCylinderRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenElongatedCylinderRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenElongatedCylinderRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenElseFeatureRulesType::CIfThenElseFeatureRulesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , IfThenFeatureRule(*this)	// "IfThenFeatureRule"
    , IfThenArcRule(*this)	// "IfThenArcRule"
    , IfThenCircleRule(*this)	// "IfThenCircleRule"
    , IfThenConeRule(*this)	// "IfThenConeRule"
    , IfThenConicalSegmentRule(*this)	// "IfThenConicalSegmentRule"
    , IfThenCuboidRule(*this)	// "IfThenCuboidRule"
    , IfThenCurveRule(*this)	// "IfThenCurveRule"
    , IfThenCylinderRule(*this)	// "IfThenCylinderRule"
    , IfThenCylindricalSegmentRule(*this)	// "IfThenCylindricalSegmentRule"
    , IfThenEllipseRule(*this)	// "IfThenEllipseRule"
    , IfThenElongatedCylinderRule(*this)	// "IfThenElongatedCylinderRule"
    , IfThenExtrudedCrossSectionRule(*this)	// "IfThenExtrudedCrossSectionRule"
    , IfThenLineRule(*this)	// "IfThenLineRule"
    , IfThenOppositeLinesRule(*this)	// "IfThenOppositeLinesRule"
    , IfThenOppositePlanesRule(*this)	// "IfThenOppositePlanesRule"
    , IfThenPlaneRule(*this)	// "IfThenPlaneRule"
    , IfThenPointDefinedCurveRule(*this)	// "IfThenPointDefinedCurveRule"
    , IfThenPointDefinedSurfaceRule(*this)	// "IfThenPointDefinedSurfaceRule"
    , IfThenPointRule(*this)	// "IfThenPointRule"
    , IfThenSphereRule(*this)	// "IfThenSphereRule"
    , IfThenSphericalSegmentRule(*this)	// "IfThenSphericalSegmentRule"
    , IfThenSurfaceOfRevolutionRule(*this)	// "IfThenSurfaceOfRevolutionRule"
    , IfThenSurfaceRule(*this)	// "IfThenSurfaceRule"
    , IfThenToroidalSegmentRule(*this)	// "IfThenToroidalSegmentRule"
    , IfThenTorusRule(*this)	// "IfThenTorusRule"
    , Else2(*this)	// "Else"
{
}

CIfThenElseFeatureRulesType::CIfThenElseFeatureRulesType(CIfThenElseFeatureRulesType const& other)
    : TypeBase(other.GetNode())
    , IfThenFeatureRule(*this)	// "IfThenFeatureRule"
    , IfThenArcRule(*this)	// "IfThenArcRule"
    , IfThenCircleRule(*this)	// "IfThenCircleRule"
    , IfThenConeRule(*this)	// "IfThenConeRule"
    , IfThenConicalSegmentRule(*this)	// "IfThenConicalSegmentRule"
    , IfThenCuboidRule(*this)	// "IfThenCuboidRule"
    , IfThenCurveRule(*this)	// "IfThenCurveRule"
    , IfThenCylinderRule(*this)	// "IfThenCylinderRule"
    , IfThenCylindricalSegmentRule(*this)	// "IfThenCylindricalSegmentRule"
    , IfThenEllipseRule(*this)	// "IfThenEllipseRule"
    , IfThenElongatedCylinderRule(*this)	// "IfThenElongatedCylinderRule"
    , IfThenExtrudedCrossSectionRule(*this)	// "IfThenExtrudedCrossSectionRule"
    , IfThenLineRule(*this)	// "IfThenLineRule"
    , IfThenOppositeLinesRule(*this)	// "IfThenOppositeLinesRule"
    , IfThenOppositePlanesRule(*this)	// "IfThenOppositePlanesRule"
    , IfThenPlaneRule(*this)	// "IfThenPlaneRule"
    , IfThenPointDefinedCurveRule(*this)	// "IfThenPointDefinedCurveRule"
    , IfThenPointDefinedSurfaceRule(*this)	// "IfThenPointDefinedSurfaceRule"
    , IfThenPointRule(*this)	// "IfThenPointRule"
    , IfThenSphereRule(*this)	// "IfThenSphereRule"
    , IfThenSphericalSegmentRule(*this)	// "IfThenSphericalSegmentRule"
    , IfThenSurfaceOfRevolutionRule(*this)	// "IfThenSurfaceOfRevolutionRule"
    , IfThenSurfaceRule(*this)	// "IfThenSurfaceRule"
    , IfThenToroidalSegmentRule(*this)	// "IfThenToroidalSegmentRule"
    , IfThenTorusRule(*this)	// "IfThenTorusRule"
    , Else2(*this)	// "Else"
{
}

void CIfThenElseFeatureRulesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenElseFeatureRulesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenExtrudedCrossSectionRuleType::CIfThenExtrudedCrossSectionRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenExtrudedCrossSectionRuleType::CIfThenExtrudedCrossSectionRuleType(CIfThenExtrudedCrossSectionRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenExtrudedCrossSectionRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenExtrudedCrossSectionRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenFeatureRuleType::CIfThenFeatureRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPointRuleBaseType(node)
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
    , ThenPoints(*this)	// "ThenPoints"
{
}

CIfThenFeatureRuleType::CIfThenFeatureRuleType(CIfThenFeatureRuleType const& other)
    : ::qif191::t::CPointRuleBaseType(other.GetNode())
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
    , ThenPoints(*this)	// "ThenPoints"
{
}

void CIfThenFeatureRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenFeatureRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenLineRuleType::CIfThenLineRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenLineRuleType::CIfThenLineRuleType(CIfThenLineRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenLineRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenLineRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenOppositeLinesRuleType::CIfThenOppositeLinesRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenOppositeLinesRuleType::CIfThenOppositeLinesRuleType(CIfThenOppositeLinesRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenOppositeLinesRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenOppositeLinesRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenOppositePlanesRuleType::CIfThenOppositePlanesRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenOppositePlanesRuleType::CIfThenOppositePlanesRuleType(CIfThenOppositePlanesRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenOppositePlanesRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenOppositePlanesRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenPlaneRuleType::CIfThenPlaneRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenPlaneRuleType::CIfThenPlaneRuleType(CIfThenPlaneRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenPlaneRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenPlaneRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenPointDefinedCurveRuleType::CIfThenPointDefinedCurveRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenPointDefinedCurveRuleType::CIfThenPointDefinedCurveRuleType(CIfThenPointDefinedCurveRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenPointDefinedCurveRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenPointDefinedCurveRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenPointDefinedSurfaceRuleType::CIfThenPointDefinedSurfaceRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenPointDefinedSurfaceRuleType::CIfThenPointDefinedSurfaceRuleType(CIfThenPointDefinedSurfaceRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenPointDefinedSurfaceRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenPointDefinedSurfaceRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenPointRuleType::CIfThenPointRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
{
}

CIfThenPointRuleType::CIfThenPointRuleType(CIfThenPointRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
{
}

void CIfThenPointRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenPointRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenSphereRuleType::CIfThenSphereRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenSphereRuleType::CIfThenSphereRuleType(CIfThenSphereRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenSphereRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenSphereRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenSphericalSegmentRuleType::CIfThenSphericalSegmentRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenSphericalSegmentRuleType::CIfThenSphericalSegmentRuleType(CIfThenSphericalSegmentRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenSphericalSegmentRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenSphericalSegmentRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenSurfaceOfRevolutionRuleType::CIfThenSurfaceOfRevolutionRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenSurfaceOfRevolutionRuleType::CIfThenSurfaceOfRevolutionRuleType(CIfThenSurfaceOfRevolutionRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenSurfaceOfRevolutionRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenSurfaceOfRevolutionRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenSurfaceRuleType::CIfThenSurfaceRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
{
}

CIfThenSurfaceRuleType::CIfThenSurfaceRuleType(CIfThenSurfaceRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
{
}

void CIfThenSurfaceRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenSurfaceRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenToroidalSegmentRuleType::CIfThenToroidalSegmentRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenToroidalSegmentRuleType::CIfThenToroidalSegmentRuleType(CIfThenToroidalSegmentRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenToroidalSegmentRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenToroidalSegmentRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIfThenTorusRuleType::CIfThenTorusRuleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CIfThenFeatureRuleType(node)
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

CIfThenTorusRuleType::CIfThenTorusRuleType(CIfThenTorusRuleType const& other)
    : ::qif191::t::CIfThenFeatureRuleType(other.GetNode())
    , ThenPointStrategy(*this)	// "ThenPointStrategy"
    , ThenFittingAlgorithm(*this)	// "ThenFittingAlgorithm"
{
}

void CIfThenTorusRuleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IfThenTorusRuleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CImageInstructionType::CImageInstructionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CWorkInstructionBaseType(node)
    , ExternalFile(*this)	// "ExternalFile"
{
}

CImageInstructionType::CImageInstructionType(CImageInstructionType const& other)
    : ::qif191::t::CWorkInstructionBaseType(other.GetNode())
    , ExternalFile(*this)	// "ExternalFile"
{
}

void CImageInstructionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ImageInstructionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionModeEnumType::CInspectionModeEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInspectionModeEnumType::CInspectionModeEnumType(CInspectionModeEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CInspectionProgramType::CInspectionProgramType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , File(*this)	// "File"
    , Description(*this)	// "Description"
    , FormalStandard(*this)	// "FormalStandard"
    , Author(*this)	// "Author"
{
}

CInspectionProgramType::CInspectionProgramType(CInspectionProgramType const& other)
    : TypeBase(other.GetNode())
    , File(*this)	// "File"
    , Description(*this)	// "Description"
    , FormalStandard(*this)	// "FormalStandard"
    , Author(*this)	// "Author"
{
}

void CInspectionProgramType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionProgramType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionScopeEnumType::CInspectionScopeEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInspectionScopeEnumType::CInspectionScopeEnumType(CInspectionScopeEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CInspectionSoftwareItemsType::CInspectionSoftwareItemsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , InspectionProgramGenerationSoftware(*this)	// "InspectionProgramGenerationSoftware"
    , InspectionProgramExecutionSoftware(*this)	// "InspectionProgramExecutionSoftware"
    , AnalysisSoftware(*this)	// "AnalysisSoftware"
    , CADSoftware(*this)	// "CADSoftware"
    , DMESoftware(*this)	// "DMESoftware"
{
}

CInspectionSoftwareItemsType::CInspectionSoftwareItemsType(CInspectionSoftwareItemsType const& other)
    : TypeBase(other.GetNode())
    , InspectionProgramGenerationSoftware(*this)	// "InspectionProgramGenerationSoftware"
    , InspectionProgramExecutionSoftware(*this)	// "InspectionProgramExecutionSoftware"
    , AnalysisSoftware(*this)	// "AnalysisSoftware"
    , CADSoftware(*this)	// "CADSoftware"
    , DMESoftware(*this)	// "DMESoftware"
{
}

void CInspectionSoftwareItemsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionSoftwareItemsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionStatusEnumType::CInspectionStatusEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInspectionStatusEnumType::CInspectionStatusEnumType(CInspectionStatusEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CInspectionStatusType::CInspectionStatusType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , InspectionStatusEnum(*this)	// "InspectionStatusEnum"
    , OtherInspectionStatus(*this)	// "OtherInspectionStatus"
{
}

CInspectionStatusType::CInspectionStatusType(CInspectionStatusType const& other)
    : TypeBase(other.GetNode())
    , InspectionStatusEnum(*this)	// "InspectionStatusEnum"
    , OtherInspectionStatus(*this)	// "OtherInspectionStatus"
{
}

void CInspectionStatusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionStatusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionTraceabilityType::CInspectionTraceabilityType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , InspectingOrganization(*this)	// "InspectingOrganization"
    , CustomerOrganization(*this)	// "CustomerOrganization"
    , SupplierCode(*this)	// "SupplierCode"
    , PurchaseOrderNumber(*this)	// "PurchaseOrderNumber"
    , OrderNumber(*this)	// "OrderNumber"
    , ReportNumber(*this)	// "ReportNumber"
    , InspectionScope(*this)	// "InspectionScope"
    , InspectionMode(*this)	// "InspectionMode"
    , PartialInspection(*this)	// "PartialInspection"
    , NotableEvents(*this)	// "NotableEvents"
    , NotedEvents(*this)	// "NotedEvents"
    , InspectionStart(*this)	// "InspectionStart"
    , InspectionEnd(*this)	// "InspectionEnd"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , InspectionOperator(*this)	// "InspectionOperator"
    , ReportPreparer(*this)	// "ReportPreparer"
    , ReportPreparationDate(*this)	// "ReportPreparationDate"
    , ReportType(*this)	// "ReportType"
    , SecurityClassification(*this)	// "SecurityClassification"
    , PlantLocation(*this)	// "PlantLocation"
    , ReferencedQIFPlanInstanceQPId(*this)	// "ReferencedQIFPlanInstanceQPId"
    , ReferencedQIFPlan(*this)	// "ReferencedQIFPlan"
    , Errors(*this)	// "Errors"
{
}

CInspectionTraceabilityType::CInspectionTraceabilityType(CInspectionTraceabilityType const& other)
    : TypeBase(other.GetNode())
    , InspectingOrganization(*this)	// "InspectingOrganization"
    , CustomerOrganization(*this)	// "CustomerOrganization"
    , SupplierCode(*this)	// "SupplierCode"
    , PurchaseOrderNumber(*this)	// "PurchaseOrderNumber"
    , OrderNumber(*this)	// "OrderNumber"
    , ReportNumber(*this)	// "ReportNumber"
    , InspectionScope(*this)	// "InspectionScope"
    , InspectionMode(*this)	// "InspectionMode"
    , PartialInspection(*this)	// "PartialInspection"
    , NotableEvents(*this)	// "NotableEvents"
    , NotedEvents(*this)	// "NotedEvents"
    , InspectionStart(*this)	// "InspectionStart"
    , InspectionEnd(*this)	// "InspectionEnd"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , InspectionOperator(*this)	// "InspectionOperator"
    , ReportPreparer(*this)	// "ReportPreparer"
    , ReportPreparationDate(*this)	// "ReportPreparationDate"
    , ReportType(*this)	// "ReportType"
    , SecurityClassification(*this)	// "SecurityClassification"
    , PlantLocation(*this)	// "PlantLocation"
    , ReferencedQIFPlanInstanceQPId(*this)	// "ReferencedQIFPlanInstanceQPId"
    , ReferencedQIFPlan(*this)	// "ReferencedQIFPlan"
    , Errors(*this)	// "Errors"
{
}

void CInspectionTraceabilityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionTraceabilityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInternalComponentType::CInternalComponentType(xercesc::DOMNode* const& node)
    : ::qif191::t::CNodeBaseType(node)
    , Color(*this)	// "@Color"
    , Transparency(*this)	// "@Transparency"
    , Hidden(*this)	// "@Hidden"
    , Size(*this)	// "@Size"
{
}

CInternalComponentType::CInternalComponentType(CInternalComponentType const& other)
    : ::qif191::t::CNodeBaseType(other.GetNode())
    , Color(*this)	// "@Color"
    , Transparency(*this)	// "@Transparency"
    , Hidden(*this)	// "@Hidden"
    , Size(*this)	// "@Size"
{
}

void CInternalComponentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InternalComponentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInternalExternalEnumType::CInternalExternalEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInternalExternalEnumType::CInternalExternalEnumType(CInternalExternalEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CInternalHeaderType::CInternalHeaderType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , File(*this)	// "File"
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Units(*this)	// "Units"
    , ScaleCoefficient(*this)	// "ScaleCoefficient"
    , ModelTolerance(*this)	// "ModelTolerance"
    , MassPropertyTolerance(*this)	// "MassPropertyTolerance"
{
}

CInternalHeaderType::CInternalHeaderType(CInternalHeaderType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , File(*this)	// "File"
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Units(*this)	// "Units"
    , ScaleCoefficient(*this)	// "ScaleCoefficient"
    , ModelTolerance(*this)	// "ModelTolerance"
    , MassPropertyTolerance(*this)	// "MassPropertyTolerance"
{
}

void CInternalHeaderType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InternalHeaderType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInternalPartAssemblyType::CInternalPartAssemblyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CNodeBaseType(node)
    , Color(*this)	// "@Color"
    , Transparency(*this)	// "@Transparency"
    , Hidden(*this)	// "@Hidden"
    , Size(*this)	// "@Size"
    , OriginMassProperty(*this)	// "@OriginMassProperty"
    , Header(*this)	// "Header"
    , BodyIds(*this)	// "BodyIds"
    , CoordinateSystemIds(*this)	// "CoordinateSystemIds"
    , AuxiliaryIds(*this)	// "AuxiliaryIds"
    , ViewIds(*this)	// "ViewIds"
    , PointCloudIds(*this)	// "PointCloudIds"
{
}

CInternalPartAssemblyType::CInternalPartAssemblyType(CInternalPartAssemblyType const& other)
    : ::qif191::t::CNodeBaseType(other.GetNode())
    , Color(*this)	// "@Color"
    , Transparency(*this)	// "@Transparency"
    , Hidden(*this)	// "@Hidden"
    , Size(*this)	// "@Size"
    , OriginMassProperty(*this)	// "@OriginMassProperty"
    , Header(*this)	// "Header"
    , BodyIds(*this)	// "BodyIds"
    , CoordinateSystemIds(*this)	// "CoordinateSystemIds"
    , AuxiliaryIds(*this)	// "AuxiliaryIds"
    , ViewIds(*this)	// "ViewIds"
    , PointCloudIds(*this)	// "PointCloudIds"
{
}

void CInternalPartAssemblyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InternalPartAssemblyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIntersectionPlaneEnumType::CIntersectionPlaneEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CIntersectionPlaneEnumType::CIntersectionPlaneEnumType(CIntersectionPlaneEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CIntersectionPlaneType::CIntersectionPlaneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , IntersectionPlaneEnum(*this)	// "IntersectionPlaneEnum"
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
{
}

CIntersectionPlaneType::CIntersectionPlaneType(CIntersectionPlaneType const& other)
    : TypeBase(other.GetNode())
    , IntersectionPlaneEnum(*this)	// "IntersectionPlaneEnum"
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
{
}

void CIntersectionPlaneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IntersectionPlaneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CKeyCharacteristicType::CKeyCharacteristicType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Designator(*this)	// "Designator"
    , Criticality(*this)	// "Criticality"
{
}

CKeyCharacteristicType::CKeyCharacteristicType(CKeyCharacteristicType const& other)
    : TypeBase(other.GetNode())
    , Designator(*this)	// "Designator"
    , Criticality(*this)	// "Criticality"
{
}

void CKeyCharacteristicType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("KeyCharacteristicType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLatitudeLongitudeSweepType::CLatitudeLongitudeSweepType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DirMeridianPrime(*this)	// "DirMeridianPrime"
    , DomainLatitude(*this)	// "DomainLatitude"
    , DomainLongitude(*this)	// "DomainLongitude"
{
}

CLatitudeLongitudeSweepType::CLatitudeLongitudeSweepType(CLatitudeLongitudeSweepType const& other)
    : TypeBase(other.GetNode())
    , DirMeridianPrime(*this)	// "DirMeridianPrime"
    , DomainLatitude(*this)	// "DomainLatitude"
    , DomainLongitude(*this)	// "DomainLongitude"
{
}

void CLatitudeLongitudeSweepType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LatitudeLongitudeSweepType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLayerSetType::CLayerSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Layer(*this)	// "Layer"
{
}

CLayerSetType::CLayerSetType(CLayerSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Layer(*this)	// "Layer"
{
}

void CLayerSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LayerSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLayerType::CLayerType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDrawableBaseType(node)
    , ApplyColor(*this)	// "@ApplyColor"
    , Index(*this)	// "@Index"
    , ElementIds(*this)	// "ElementIds"
{
}

CLayerType::CLayerType(CLayerType const& other)
    : ::qif191::t::CDrawableBaseType(other.GetNode())
    , ApplyColor(*this)	// "@ApplyColor"
    , Index(*this)	// "@Index"
    , ElementIds(*this)	// "ElementIds"
{
}

void CLayerType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LayerType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderCircularType::CLeaderCircularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLeaderType(node)
    , Center(*this)	// "Center"
{
}

CLeaderCircularType::CLeaderCircularType(CLeaderCircularType const& other)
    : ::qif191::t::CLeaderType(other.GetNode())
    , Center(*this)	// "Center"
{
}

void CLeaderCircularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderCircularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderDoubleHeadCircularType::CLeaderDoubleHeadCircularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLeaderDoubleHeadType(node)
    , Center(*this)	// "Center"
{
}

CLeaderDoubleHeadCircularType::CLeaderDoubleHeadCircularType(CLeaderDoubleHeadCircularType const& other)
    : ::qif191::t::CLeaderDoubleHeadType(other.GetNode())
    , Center(*this)	// "Center"
{
}

void CLeaderDoubleHeadCircularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderDoubleHeadCircularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderDoubleHeadExtendType::CLeaderDoubleHeadExtendType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLeaderDoubleHeadType(node)
    , PointExtension(*this)	// "PointExtension"
{
}

CLeaderDoubleHeadExtendType::CLeaderDoubleHeadExtendType(CLeaderDoubleHeadExtendType const& other)
    : ::qif191::t::CLeaderDoubleHeadType(other.GetNode())
    , PointExtension(*this)	// "PointExtension"
{
}

void CLeaderDoubleHeadExtendType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderDoubleHeadExtendType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderDoubleHeadType::CLeaderDoubleHeadType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLeaderType(node)
    , HeadForm2(*this)	// "HeadForm2"
    , PointConnection(*this)	// "PointConnection"
{
}

CLeaderDoubleHeadType::CLeaderDoubleHeadType(CLeaderDoubleHeadType const& other)
    : ::qif191::t::CLeaderType(other.GetNode())
    , HeadForm2(*this)	// "HeadForm2"
    , PointConnection(*this)	// "PointConnection"
{
}

void CLeaderDoubleHeadType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderDoubleHeadType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderExtendType::CLeaderExtendType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLeaderType(node)
    , PointExtension(*this)	// "PointExtension"
{
}

CLeaderExtendType::CLeaderExtendType(CLeaderExtendType const& other)
    : ::qif191::t::CLeaderType(other.GetNode())
    , PointExtension(*this)	// "PointExtension"
{
}

void CLeaderExtendType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderExtendType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderHeadFormEnumType::CLeaderHeadFormEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CLeaderHeadFormEnumType::CLeaderHeadFormEnumType(CLeaderHeadFormEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CLeaderType::CLeaderType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLineSegment2dType(node)
    , HeadForm(*this)	// "HeadForm"
    , HeadHeight(*this)	// "HeadHeight"
{
}

CLeaderType::CLeaderType(CLeaderType const& other)
    : ::qif191::t::CLineSegment2dType(other.GetNode())
    , HeadForm(*this)	// "HeadForm"
    , HeadHeight(*this)	// "HeadHeight"
{
}

void CLeaderType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLengthCharacteristicActualType::CLengthCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CLengthCharacteristicActualType::CLengthCharacteristicActualType(CLengthCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CLengthCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LengthCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLengthCharacteristicDefinitionType::CLengthCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CLengthCharacteristicDefinitionType::CLengthCharacteristicDefinitionType(CLengthCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CLengthCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LengthCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLengthCharacteristicItemType::CLengthCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CLengthCharacteristicItemType::CLengthCharacteristicItemType(CLengthCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CLengthCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LengthCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLengthCharacteristicNominalType::CLengthCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CLengthCharacteristicNominalType::CLengthCharacteristicNominalType(CLengthCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CLengthCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LengthCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLengthCharacteristicStatsEvalType::CLengthCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CLengthCharacteristicStatsEvalType::CLengthCharacteristicStatsEvalType(CLengthCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CLengthCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LengthCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLengthFunctionDiscreteType::CLengthFunctionDiscreteType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFunctionDiscreteType(node)
    , DomainLinearUnit(*this)	// "DomainLinearUnit"
    , RangeLinearUnit(*this)	// "RangeLinearUnit"
{
}

CLengthFunctionDiscreteType::CLengthFunctionDiscreteType(CLengthFunctionDiscreteType const& other)
    : ::qif191::t::CFunctionDiscreteType(other.GetNode())
    , DomainLinearUnit(*this)	// "DomainLinearUnit"
    , RangeLinearUnit(*this)	// "RangeLinearUnit"
{
}

void CLengthFunctionDiscreteType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LengthFunctionDiscreteType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLessOrEqualType::CLessOrEqualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticComparisonBaseType(node)
{
}

CLessOrEqualType::CLessOrEqualType(CLessOrEqualType const& other)
    : ::qif191::t::CArithmeticComparisonBaseType(other.GetNode())
{
}

void CLessOrEqualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LessOrEqualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLessThanType::CLessThanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticComparisonBaseType(node)
{
}

CLessThanType::CLessThanType(CLessThanType const& other)
    : ::qif191::t::CArithmeticComparisonBaseType(other.GetNode())
{
}

void CLessThanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LessThanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLesserErrorType::CLesserErrorType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxErrorConstant(*this)	// "MaxErrorConstant"
    , LinearError(*this)	// "LinearError"
{
}

CLesserErrorType::CLesserErrorType(CLesserErrorType const& other)
    : TypeBase(other.GetNode())
    , MaxErrorConstant(*this)	// "MaxErrorConstant"
    , LinearError(*this)	// "LinearError"
{
}

void CLesserErrorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LesserErrorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLimitingNumberType::CLimitingNumberType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Count(*this)	// "Count"
    , Fraction(*this)	// "Fraction"
{
}

CLimitingNumberType::CLimitingNumberType(CLimitingNumberType const& other)
    : TypeBase(other.GetNode())
    , Count(*this)	// "Count"
    , Fraction(*this)	// "Fraction"
{
}

void CLimitingNumberType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LimitingNumberType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineActualDeterminationType::CLineActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CLineActualDeterminationType::CLineActualDeterminationType(CLineActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CLineActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineAuxiliaryType::CLineAuxiliaryType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAuxiliaryBaseType(node)
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

CLineAuxiliaryType::CLineAuxiliaryType(CLineAuxiliaryType const& other)
    : ::qif191::t::CAuxiliaryBaseType(other.GetNode())
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

void CLineAuxiliaryType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineAuxiliaryType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineBestFitType::CLineBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CLineBestFitType::CLineBestFitType(CLineBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CLineBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineCastType::CLineCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CLineCastType::CLineCastType(CLineCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CLineCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineCheckedFeatureType::CLineCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CLineCheckedFeatureType::CLineCheckedFeatureType(CLineCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CLineCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineCheckedType::CLineCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CLineCheckedType::CLineCheckedType(CLineCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CLineCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineConstructionMethodType::CLineConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Midline(*this)	// "Midline"
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Perpendicular(*this)	// "Perpendicular"
    , Parallel(*this)	// "Parallel"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , TangentThrough(*this)	// "TangentThrough"
    , Transform(*this)	// "Transform"
    , Extract(*this)	// "Extract"
    , FromScan(*this)	// "FromScan"
{
}

CLineConstructionMethodType::CLineConstructionMethodType(CLineConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Midline(*this)	// "Midline"
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Perpendicular(*this)	// "Perpendicular"
    , Parallel(*this)	// "Parallel"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , TangentThrough(*this)	// "TangentThrough"
    , Transform(*this)	// "Transform"
    , Extract(*this)	// "Extract"
    , FromScan(*this)	// "FromScan"
{
}

void CLineConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineCopyType::CLineCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseLine(*this)	// "BaseLine"
{
}

CLineCopyType::CLineCopyType(CLineCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseLine(*this)	// "BaseLine"
{
}

void CLineCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineExtractType::CLineExtractType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , CurveFeature(*this)	// "CurveFeature"
{
}

CLineExtractType::CLineExtractType(CLineExtractType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , CurveFeature(*this)	// "CurveFeature"
{
}

void CLineExtractType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineExtractType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineFeatureActualType::CLineFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
    , Length(*this)	// "Length"
    , Normal(*this)	// "Normal"
    , Form(*this)	// "Form"
{
}

CLineFeatureActualType::CLineFeatureActualType(CLineFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
    , Length(*this)	// "Length"
    , Normal(*this)	// "Normal"
    , Form(*this)	// "Form"
{
}

void CLineFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineFeatureDefinitionType::CLineFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CLineFeatureDefinitionType::CLineFeatureDefinitionType(CLineFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CLineFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineFeatureItemType::CLineFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CLineFeatureItemType::CLineFeatureItemType(CLineFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CLineFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineFeatureNominalType::CLineFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
    , Length(*this)	// "Length"
    , Normal(*this)	// "Normal"
{
}

CLineFeatureNominalType::CLineFeatureNominalType(CLineFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Direction(*this)	// "Direction"
    , Length(*this)	// "Length"
    , Normal(*this)	// "Normal"
{
}

void CLineFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineFromScanType::CLineFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

CLineFromScanType::CLineFromScanType(CLineFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

void CLineFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineIntersectionType::CLineIntersectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePlane(*this)	// "BasePlane"
{
}

CLineIntersectionType::CLineIntersectionType(CLineIntersectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePlane(*this)	// "BasePlane"
{
}

void CLineIntersectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineIntersectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineMidlineType::CLineMidlineType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseLine(*this)	// "BaseLine"
{
}

CLineMidlineType::CLineMidlineType(CLineMidlineType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseLine(*this)	// "BaseLine"
{
}

void CLineMidlineType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineMidlineType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineParallelType::CLineParallelType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ParallelFeature(*this)	// "ParallelFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CLineParallelType::CLineParallelType(CLineParallelType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ParallelFeature(*this)	// "ParallelFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CLineParallelType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineParallelType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinePerpendicularType::CLinePerpendicularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , PerpendicularFeature(*this)	// "PerpendicularFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CLinePerpendicularType::CLinePerpendicularType(CLinePerpendicularType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , PerpendicularFeature(*this)	// "PerpendicularFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CLinePerpendicularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinePerpendicularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinePointSamplingStrategyType::CLinePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CLinePointSamplingStrategyType::CLinePointSamplingStrategyType(CLinePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CLinePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineProfileCharacteristicActualType::CLineProfileCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicActualBaseType(node)
{
}

CLineProfileCharacteristicActualType::CLineProfileCharacteristicActualType(CLineProfileCharacteristicActualType const& other)
    : ::qif191::t::CProfileCharacteristicActualBaseType(other.GetNode())
{
}

void CLineProfileCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineProfileCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineProfileCharacteristicDefinitionType::CLineProfileCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(node)
{
}

CLineProfileCharacteristicDefinitionType::CLineProfileCharacteristicDefinitionType(CLineProfileCharacteristicDefinitionType const& other)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CLineProfileCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineProfileCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineProfileCharacteristicItemType::CLineProfileCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicItemBaseType(node)
{
}

CLineProfileCharacteristicItemType::CLineProfileCharacteristicItemType(CLineProfileCharacteristicItemType const& other)
    : ::qif191::t::CProfileCharacteristicItemBaseType(other.GetNode())
{
}

void CLineProfileCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineProfileCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineProfileCharacteristicNominalType::CLineProfileCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(node)
    , Vector(*this)	// "Vector"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CLineProfileCharacteristicNominalType::CLineProfileCharacteristicNominalType(CLineProfileCharacteristicNominalType const& other)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(other.GetNode())
    , Vector(*this)	// "Vector"
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CLineProfileCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineProfileCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineProfileCharacteristicStatsEvalType::CLineProfileCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(node)
{
}

CLineProfileCharacteristicStatsEvalType::CLineProfileCharacteristicStatsEvalType(CLineProfileCharacteristicStatsEvalType const& other)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CLineProfileCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineProfileCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineProjectionType::CLineProjectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ProjectionPlane(*this)	// "ProjectionPlane"
    , ProjectionLine(*this)	// "ProjectionLine"
{
}

CLineProjectionType::CLineProjectionType(CLineProjectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ProjectionPlane(*this)	// "ProjectionPlane"
    , ProjectionLine(*this)	// "ProjectionLine"
{
}

void CLineProjectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineProjectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineRecompType::CLineRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CLineRecompType::CLineRecompType(CLineRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CLineRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineSegment2dType::CLineSegment2dType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

CLineSegment2dType::CLineSegment2dType(CLineSegment2dType const& other)
    : TypeBase(other.GetNode())
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

void CLineSegment2dType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineSegment2dType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineSegmentType::CLineSegmentType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

CLineSegmentType::CLineSegmentType(CLineSegmentType const& other)
    : TypeBase(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

void CLineSegmentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineSegmentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineTangentThroughType::CLineTangentThroughType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , TangentFeature(*this)	// "TangentFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CLineTangentThroughType::CLineTangentThroughType(CLineTangentThroughType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , TangentFeature(*this)	// "TangentFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CLineTangentThroughType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineTangentThroughType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLineTransformType::CLineTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseLine(*this)	// "BaseLine"
    , Transformation(*this)	// "Transformation"
{
}

CLineTransformType::CLineTransformType(CLineTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseLine(*this)	// "BaseLine"
    , Transformation(*this)	// "Transformation"
{
}

void CLineTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LineTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCharacteristicActualBaseType::CLinearCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CLinearCharacteristicActualBaseType::CLinearCharacteristicActualBaseType(CLinearCharacteristicActualBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CLinearCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCharacteristicDefinitionBaseType::CLinearCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CLinearCharacteristicDefinitionBaseType::CLinearCharacteristicDefinitionBaseType(CLinearCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CLinearCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCharacteristicItemBaseType::CLinearCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicItemBaseType(node)
{
}

CLinearCharacteristicItemBaseType::CLinearCharacteristicItemBaseType(CLinearCharacteristicItemBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicItemBaseType(other.GetNode())
{
}

void CLinearCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCharacteristicNominalBaseType::CLinearCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDimensionalCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CLinearCharacteristicNominalBaseType::CLinearCharacteristicNominalBaseType(CLinearCharacteristicNominalBaseType const& other)
    : ::qif191::t::CDimensionalCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CLinearCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCharacteristicStatsEvalType::CLinearCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CLinearCharacteristicStatsEvalType::CLinearCharacteristicStatsEvalType(CLinearCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CLinearCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateCharacteristicActualType::CLinearCoordinateCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CLinearCoordinateCharacteristicActualType::CLinearCoordinateCharacteristicActualType(CLinearCoordinateCharacteristicActualType const& other)
    : ::qif191::t::CCoordinateCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CLinearCoordinateCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCoordinateCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateCharacteristicDefinitionType::CLinearCoordinateCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CLinearCoordinateCharacteristicDefinitionType::CLinearCoordinateCharacteristicDefinitionType(CLinearCoordinateCharacteristicDefinitionType const& other)
    : ::qif191::t::CCoordinateCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CLinearCoordinateCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCoordinateCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateCharacteristicItemType::CLinearCoordinateCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicItemBaseType(node)
{
}

CLinearCoordinateCharacteristicItemType::CLinearCoordinateCharacteristicItemType(CLinearCoordinateCharacteristicItemType const& other)
    : ::qif191::t::CCoordinateCharacteristicItemBaseType(other.GetNode())
{
}

void CLinearCoordinateCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCoordinateCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateCharacteristicNominalType::CLinearCoordinateCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
    , Direction(*this)	// "Direction"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

CLinearCoordinateCharacteristicNominalType::CLinearCoordinateCharacteristicNominalType(CLinearCoordinateCharacteristicNominalType const& other)
    : ::qif191::t::CCoordinateCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
    , Direction(*this)	// "Direction"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
{
}

void CLinearCoordinateCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCoordinateCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateCharacteristicStatsEvalType::CLinearCoordinateCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CLinearCoordinateCharacteristicStatsEvalType::CLinearCoordinateCharacteristicStatsEvalType(CLinearCoordinateCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CLinearCoordinateCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCoordinateCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateDirectionEnumType::CLinearCoordinateDirectionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CLinearCoordinateDirectionEnumType::CLinearCoordinateDirectionEnumType(CLinearCoordinateDirectionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CLinearErrorType::CLinearErrorType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BaseError(*this)	// "BaseError"
    , ErrorRate(*this)	// "ErrorRate"
{
}

CLinearErrorType::CLinearErrorType(CLinearErrorType const& other)
    : TypeBase(other.GetNode())
    , BaseError(*this)	// "BaseError"
    , ErrorRate(*this)	// "ErrorRate"
{
}

void CLinearErrorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearErrorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearToleranceDefinitionType::CLinearToleranceDefinitionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CLinearToleranceDefinitionType::CLinearToleranceDefinitionType(CLinearToleranceDefinitionType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CLinearToleranceDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearToleranceDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearToleranceType::CLinearToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinitionId(*this)	// "DefinitionId"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CLinearToleranceType::CLinearToleranceType(CLinearToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinitionId(*this)	// "DefinitionId"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CLinearToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearUnitType::CLinearUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CLinearUnitType::CLinearUnitType(CLinearUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CLinearUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearValueType::CLinearValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , linearUnit(*this)	// "@linearUnit"
{
}

CLinearValueType::CLinearValueType(CLinearValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
{
}

void CLinearValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearityStudyPlanType::CLinearityStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyPlanBaseType(node)
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , GoodnessOfFitThreshold(*this)	// "GoodnessOfFitThreshold"
    , LinearAbsoluteLinearityMinimum(*this)	// "LinearAbsoluteLinearityMinimum"
    , AngularAbsoluteLinearityMinimum(*this)	// "AngularAbsoluteLinearityMinimum"
    , AreaAbsoluteLinearityMinimum(*this)	// "AreaAbsoluteLinearityMinimum"
    , ForceAbsoluteLinearityMinimum(*this)	// "ForceAbsoluteLinearityMinimum"
    , MassAbsoluteLinearityMinimum(*this)	// "MassAbsoluteLinearityMinimum"
    , PressureAbsoluteLinearityMinimum(*this)	// "PressureAbsoluteLinearityMinimum"
    , SpeedAbsoluteLinearityMinimum(*this)	// "SpeedAbsoluteLinearityMinimum"
    , TemperatureAbsoluteLinearityMinimum(*this)	// "TemperatureAbsoluteLinearityMinimum"
    , TimeAbsoluteLinearityMinimum(*this)	// "TimeAbsoluteLinearityMinimum"
    , UserDefinedUnitAbsoluteLinearityMinimum(*this)	// "UserDefinedUnitAbsoluteLinearityMinimum"
    , RelativeLinearityMinimum(*this)	// "RelativeLinearityMinimum"
{
}

CLinearityStudyPlanType::CLinearityStudyPlanType(CLinearityStudyPlanType const& other)
    : ::qif191::t::CStatisticalStudyPlanBaseType(other.GetNode())
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , GoodnessOfFitThreshold(*this)	// "GoodnessOfFitThreshold"
    , LinearAbsoluteLinearityMinimum(*this)	// "LinearAbsoluteLinearityMinimum"
    , AngularAbsoluteLinearityMinimum(*this)	// "AngularAbsoluteLinearityMinimum"
    , AreaAbsoluteLinearityMinimum(*this)	// "AreaAbsoluteLinearityMinimum"
    , ForceAbsoluteLinearityMinimum(*this)	// "ForceAbsoluteLinearityMinimum"
    , MassAbsoluteLinearityMinimum(*this)	// "MassAbsoluteLinearityMinimum"
    , PressureAbsoluteLinearityMinimum(*this)	// "PressureAbsoluteLinearityMinimum"
    , SpeedAbsoluteLinearityMinimum(*this)	// "SpeedAbsoluteLinearityMinimum"
    , TemperatureAbsoluteLinearityMinimum(*this)	// "TemperatureAbsoluteLinearityMinimum"
    , TimeAbsoluteLinearityMinimum(*this)	// "TimeAbsoluteLinearityMinimum"
    , UserDefinedUnitAbsoluteLinearityMinimum(*this)	// "UserDefinedUnitAbsoluteLinearityMinimum"
    , RelativeLinearityMinimum(*this)	// "RelativeLinearityMinimum"
{
}

void CLinearityStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearityStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearityStudyResultsType::CLinearityStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , SampleSize(*this)	// "SampleSize"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , GoodnessOfFit(*this)	// "GoodnessOfFit"
    , LinearAbsoluteLinearity(*this)	// "LinearAbsoluteLinearity"
    , AngularAbsoluteLinearity(*this)	// "AngularAbsoluteLinearity"
    , AreaAbsoluteLinearity(*this)	// "AreaAbsoluteLinearity"
    , ForceAbsoluteLinearity(*this)	// "ForceAbsoluteLinearity"
    , MassAbsoluteLinearity(*this)	// "MassAbsoluteLinearity"
    , PressureAbsoluteLinearity(*this)	// "PressureAbsoluteLinearity"
    , SpeedAbsoluteLinearity(*this)	// "SpeedAbsoluteLinearity"
    , TemperatureAbsoluteLinearity(*this)	// "TemperatureAbsoluteLinearity"
    , TimeAbsoluteLinearity(*this)	// "TimeAbsoluteLinearity"
    , UserDefinedUnitAbsoluteLinearity(*this)	// "UserDefinedUnitAbsoluteLinearity"
    , RelativeLinearity(*this)	// "RelativeLinearity"
{
}

CLinearityStudyResultsType::CLinearityStudyResultsType(CLinearityStudyResultsType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , SampleSize(*this)	// "SampleSize"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , GoodnessOfFit(*this)	// "GoodnessOfFit"
    , LinearAbsoluteLinearity(*this)	// "LinearAbsoluteLinearity"
    , AngularAbsoluteLinearity(*this)	// "AngularAbsoluteLinearity"
    , AreaAbsoluteLinearity(*this)	// "AreaAbsoluteLinearity"
    , ForceAbsoluteLinearity(*this)	// "ForceAbsoluteLinearity"
    , MassAbsoluteLinearity(*this)	// "MassAbsoluteLinearity"
    , PressureAbsoluteLinearity(*this)	// "PressureAbsoluteLinearity"
    , SpeedAbsoluteLinearity(*this)	// "SpeedAbsoluteLinearity"
    , TemperatureAbsoluteLinearity(*this)	// "TemperatureAbsoluteLinearity"
    , TimeAbsoluteLinearity(*this)	// "TimeAbsoluteLinearity"
    , UserDefinedUnitAbsoluteLinearity(*this)	// "UserDefinedUnitAbsoluteLinearity"
    , RelativeLinearity(*this)	// "RelativeLinearity"
{
}

void CLinearityStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearityStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListAccumulatedStatsValuesType::CListAccumulatedStatsValuesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListAccumulatedStatsValuesType::CListAccumulatedStatsValuesType(CListAccumulatedStatsValuesType const& other)
    : TypeBase(other.GetNode())
{
}


CListBoolType::CListBoolType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListBoolType::CListBoolType(CListBoolType const& other)
    : TypeBase(other.GetNode())
{
}


CListDouble9Type::CListDouble9Type(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListDouble9Type::CListDouble9Type(CListDouble9Type const& other)
    : TypeBase(other.GetNode())
{
}


CListDoubleType::CListDoubleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListDoubleType::CListDoubleType(CListDoubleType const& other)
    : TypeBase(other.GetNode())
{
}


CListIntType::CListIntType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListIntType::CListIntType(CListIntType const& other)
    : TypeBase(other.GetNode())
{
}


CListNaturalType::CListNaturalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListNaturalType::CListNaturalType(CListNaturalType const& other)
    : TypeBase(other.GetNode())
{
}


CListOrientationType::CListOrientationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListOrientationType::CListOrientationType(CListOrientationType const& other)
    : TypeBase(other.GetNode())
{
}


CListSubgroupStatsValuesType::CListSubgroupStatsValuesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListSubgroupStatsValuesType::CListSubgroupStatsValuesType(CListSubgroupStatsValuesType const& other)
    : TypeBase(other.GetNode())
{
}


CListSummaryStatsValuesType::CListSummaryStatsValuesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListSummaryStatsValuesType::CListSummaryStatsValuesType(CListSummaryStatsValuesType const& other)
    : TypeBase(other.GetNode())
{
}


CListUnsignedByteType::CListUnsignedByteType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListUnsignedByteType::CListUnsignedByteType(CListUnsignedByteType const& other)
    : TypeBase(other.GetNode())
{
}


CLocationCharacteristicActualBaseType::CLocationCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(node)
    , ZoneData(*this)	// "ZoneData"
    , DatumsOk(*this)	// "DatumsOk"
{
}

CLocationCharacteristicActualBaseType::CLocationCharacteristicActualBaseType(CLocationCharacteristicActualBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(other.GetNode())
    , ZoneData(*this)	// "ZoneData"
    , DatumsOk(*this)	// "DatumsOk"
{
}

void CLocationCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLocationCharacteristicDefinitionBaseType::CLocationCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(node)
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
{
}

CLocationCharacteristicDefinitionBaseType::CLocationCharacteristicDefinitionBaseType(CLocationCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(other.GetNode())
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
{
}

void CLocationCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLocationCharacteristicItemBaseType::CLocationCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(node)
{
}

CLocationCharacteristicItemBaseType::CLocationCharacteristicItemBaseType(CLocationCharacteristicItemBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(other.GetNode())
{
}

void CLocationCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLocationCharacteristicNominalBaseType::CLocationCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(node)
{
}

CLocationCharacteristicNominalBaseType::CLocationCharacteristicNominalBaseType(CLocationCharacteristicNominalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(other.GetNode())
{
}

void CLocationCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLocationCharacteristicStatsEvalType::CLocationCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(node)
    , DatumsOkStats(*this)	// "DatumsOkStats"
{
}

CLocationCharacteristicStatsEvalType::CLocationCharacteristicStatsEvalType(CLocationCharacteristicStatsEvalType const& other)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(other.GetNode())
    , DatumsOkStats(*this)	// "DatumsOkStats"
{
}

void CLocationCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLocationOnDrawingType::CLocationOnDrawingType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DrawingId(*this)	// "DrawingId"
    , SheetNumber(*this)	// "SheetNumber"
    , DrawingZone(*this)	// "DrawingZone"
    , ModelId(*this)	// "ModelId"
    , View(*this)	// "View"
    , ViewId(*this)	// "ViewId"
{
}

CLocationOnDrawingType::CLocationOnDrawingType(CLocationOnDrawingType const& other)
    : TypeBase(other.GetNode())
    , DrawingId(*this)	// "DrawingId"
    , SheetNumber(*this)	// "SheetNumber"
    , DrawingZone(*this)	// "DrawingZone"
    , ModelId(*this)	// "ModelId"
    , View(*this)	// "View"
    , ViewId(*this)	// "ViewId"
{
}

void CLocationOnDrawingType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationOnDrawingType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLocationType::CLocationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , LocationDescription(*this)	// "LocationDescription"
    , Address(*this)	// "Address"
{
}

CLocationType::CLocationType(CLocationType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , LocationDescription(*this)	// "LocationDescription"
    , Address(*this)	// "Address"
{
}

void CLocationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LocationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLoopBaseType::CLoopBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
{
}

CLoopBaseType::CLoopBaseType(CLoopBaseType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
{
}

void CLoopBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LoopBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLoopFormEnumType::CLoopFormEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CLoopFormEnumType::CLoopFormEnumType(CLoopFormEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CLoopMeshType::CLoopMeshType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLoopBaseType(node)
    , CoEdgesMesh(*this)	// "CoEdgesMesh"
{
}

CLoopMeshType::CLoopMeshType(CLoopMeshType const& other)
    : ::qif191::t::CLoopBaseType(other.GetNode())
    , CoEdgesMesh(*this)	// "CoEdgesMesh"
{
}

void CLoopMeshType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LoopMeshType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLoopSetType::CLoopSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , LoopBase(*this)	// "LoopBase"
    , Loop(*this)	// "Loop"
    , LoopMesh(*this)	// "LoopMesh"
{
}

CLoopSetType::CLoopSetType(CLoopSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , LoopBase(*this)	// "LoopBase"
    , Loop(*this)	// "Loop"
    , LoopMesh(*this)	// "LoopMesh"
{
}

void CLoopSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LoopSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLoopType::CLoopType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLoopBaseType(node)
    , Form(*this)	// "@Form"
    , CoEdges(*this)	// "CoEdges"
{
}

CLoopType::CLoopType(CLoopType const& other)
    : ::qif191::t::CLoopBaseType(other.GetNode())
    , Form(*this)	// "@Form"
    , CoEdges(*this)	// "CoEdges"
{
}

void CLoopType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LoopType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMachineCoordinateSystemOperationType::CMachineCoordinateSystemOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
{
}

CMachineCoordinateSystemOperationType::CMachineCoordinateSystemOperationType(CMachineCoordinateSystemOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
{
}

void CMachineCoordinateSystemOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MachineCoordinateSystemOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CManualDeviceType::CManualDeviceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementDeviceType(node)
{
}

CManualDeviceType::CManualDeviceType(CManualDeviceType const& other)
    : ::qif191::t::CMeasurementDeviceType(other.GetNode())
{
}

void CManualDeviceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ManualDeviceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CManualMeasureFeatureMethodType::CManualMeasureFeatureMethodType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasureFeatureMethodBaseType(node)
{
}

CManualMeasureFeatureMethodType::CManualMeasureFeatureMethodType(CManualMeasureFeatureMethodType const& other)
    : ::qif191::t::CMeasureFeatureMethodBaseType(other.GetNode())
{
}

void CManualMeasureFeatureMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ManualMeasureFeatureMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CManufacturingMethodEnumType::CManufacturingMethodEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CManufacturingMethodEnumType::CManufacturingMethodEnumType(CManufacturingMethodEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CManufacturingMethodType::CManufacturingMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ManufacturingMethodEnum(*this)	// "ManufacturingMethodEnum"
    , OtherManufacturingMethod(*this)	// "OtherManufacturingMethod"
{
}

CManufacturingMethodType::CManufacturingMethodType(CManufacturingMethodType const& other)
    : TypeBase(other.GetNode())
    , ManufacturingMethodEnum(*this)	// "ManufacturingMethodEnum"
    , OtherManufacturingMethod(*this)	// "OtherManufacturingMethod"
{
}

void CManufacturingMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ManufacturingMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CManufacturingProcessTraceabilitiesType::CManufacturingProcessTraceabilitiesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ManufacturingProcessTraceability(*this)	// "ManufacturingProcessTraceability"
{
}

CManufacturingProcessTraceabilitiesType::CManufacturingProcessTraceabilitiesType(CManufacturingProcessTraceabilitiesType const& other)
    : TypeBase(other.GetNode())
    , ManufacturingProcessTraceability(*this)	// "ManufacturingProcessTraceability"
{
}

void CManufacturingProcessTraceabilitiesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ManufacturingProcessTraceabilitiesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CManufacturingProcessTraceabilityType::CManufacturingProcessTraceabilityType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
    , Job(*this)	// "Job"
    , Revision(*this)	// "Revision"
    , PreviousOperationId(*this)	// "PreviousOperationId"
    , Path(*this)	// "Path"
    , MachineManufacturerName(*this)	// "MachineManufacturerName"
    , MachineIdentifier(*this)	// "MachineIdentifier"
    , OperatorIdentifier(*this)	// "OperatorIdentifier"
    , Shift(*this)	// "Shift"
    , Department(*this)	// "Department"
    , ResponsibilityIdentifier(*this)	// "ResponsibilityIdentifier"
    , PlantSector(*this)	// "PlantSector"
    , ProcessParameter(*this)	// "ProcessParameter"
    , AssociatedTraceabilityId(*this)	// "AssociatedTraceabilityId"
{
}

CManufacturingProcessTraceabilityType::CManufacturingProcessTraceabilityType(CManufacturingProcessTraceabilityType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
    , Job(*this)	// "Job"
    , Revision(*this)	// "Revision"
    , PreviousOperationId(*this)	// "PreviousOperationId"
    , Path(*this)	// "Path"
    , MachineManufacturerName(*this)	// "MachineManufacturerName"
    , MachineIdentifier(*this)	// "MachineIdentifier"
    , OperatorIdentifier(*this)	// "OperatorIdentifier"
    , Shift(*this)	// "Shift"
    , Department(*this)	// "Department"
    , ResponsibilityIdentifier(*this)	// "ResponsibilityIdentifier"
    , PlantSector(*this)	// "PlantSector"
    , ProcessParameter(*this)	// "ProcessParameter"
    , AssociatedTraceabilityId(*this)	// "AssociatedTraceabilityId"
{
}

void CManufacturingProcessTraceabilityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ManufacturingProcessTraceabilityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassCharacteristicActualBaseType::CMassCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CMassCharacteristicActualBaseType::CMassCharacteristicActualBaseType(CMassCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CMassCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassCharacteristicDefinitionBaseType::CMassCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CMassCharacteristicDefinitionBaseType::CMassCharacteristicDefinitionBaseType(CMassCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CMassCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassCharacteristicItemBaseType::CMassCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CMassCharacteristicItemBaseType::CMassCharacteristicItemBaseType(CMassCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CMassCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassCharacteristicNominalBaseType::CMassCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CMassCharacteristicNominalBaseType::CMassCharacteristicNominalBaseType(CMassCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CMassCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassToleranceType::CMassToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CMassToleranceType::CMassToleranceType(CMassToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CMassToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassUnitType::CMassUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CMassUnitType::CMassUnitType(CMassUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CMassUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMassValueType::CMassValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , massUnit(*this)	// "@massUnit"
{
}

CMassValueType::CMassValueType(CMassValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , massUnit(*this)	// "@massUnit"
{
}

void CMassValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MassValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMaterialModifierEnumType::CMaterialModifierEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMaterialModifierEnumType::CMaterialModifierEnumType(CMaterialModifierEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CMatrix33Type::CMatrix33Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CListDouble9TypeType(node)
{
}

CMatrix33Type::CMatrix33Type(CMatrix33Type const& other)
    : ::qif191::t::CListDouble9TypeType(other.GetNode())
{
}

void CMatrix33Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Matrix33Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CMaxFeatureRulesType::CMaxFeatureRulesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , IfThenFeatureRule(*this)	// "IfThenFeatureRule"
    , IfThenArcRule(*this)	// "IfThenArcRule"
    , IfThenCircleRule(*this)	// "IfThenCircleRule"
    , IfThenConeRule(*this)	// "IfThenConeRule"
    , IfThenConicalSegmentRule(*this)	// "IfThenConicalSegmentRule"
    , IfThenCuboidRule(*this)	// "IfThenCuboidRule"
    , IfThenCurveRule(*this)	// "IfThenCurveRule"
    , IfThenCylinderRule(*this)	// "IfThenCylinderRule"
    , IfThenCylindricalSegmentRule(*this)	// "IfThenCylindricalSegmentRule"
    , IfThenEllipseRule(*this)	// "IfThenEllipseRule"
    , IfThenElongatedCylinderRule(*this)	// "IfThenElongatedCylinderRule"
    , IfThenExtrudedCrossSectionRule(*this)	// "IfThenExtrudedCrossSectionRule"
    , IfThenLineRule(*this)	// "IfThenLineRule"
    , IfThenOppositeLinesRule(*this)	// "IfThenOppositeLinesRule"
    , IfThenOppositePlanesRule(*this)	// "IfThenOppositePlanesRule"
    , IfThenPlaneRule(*this)	// "IfThenPlaneRule"
    , IfThenPointDefinedCurveRule(*this)	// "IfThenPointDefinedCurveRule"
    , IfThenPointDefinedSurfaceRule(*this)	// "IfThenPointDefinedSurfaceRule"
    , IfThenPointRule(*this)	// "IfThenPointRule"
    , IfThenSphereRule(*this)	// "IfThenSphereRule"
    , IfThenSphericalSegmentRule(*this)	// "IfThenSphericalSegmentRule"
    , IfThenSurfaceOfRevolutionRule(*this)	// "IfThenSurfaceOfRevolutionRule"
    , IfThenSurfaceRule(*this)	// "IfThenSurfaceRule"
    , IfThenToroidalSegmentRule(*this)	// "IfThenToroidalSegmentRule"
    , IfThenTorusRule(*this)	// "IfThenTorusRule"
    , Else2(*this)	// "Else"
{
}

CMaxFeatureRulesType::CMaxFeatureRulesType(CMaxFeatureRulesType const& other)
    : TypeBase(other.GetNode())
    , IfThenFeatureRule(*this)	// "IfThenFeatureRule"
    , IfThenArcRule(*this)	// "IfThenArcRule"
    , IfThenCircleRule(*this)	// "IfThenCircleRule"
    , IfThenConeRule(*this)	// "IfThenConeRule"
    , IfThenConicalSegmentRule(*this)	// "IfThenConicalSegmentRule"
    , IfThenCuboidRule(*this)	// "IfThenCuboidRule"
    , IfThenCurveRule(*this)	// "IfThenCurveRule"
    , IfThenCylinderRule(*this)	// "IfThenCylinderRule"
    , IfThenCylindricalSegmentRule(*this)	// "IfThenCylindricalSegmentRule"
    , IfThenEllipseRule(*this)	// "IfThenEllipseRule"
    , IfThenElongatedCylinderRule(*this)	// "IfThenElongatedCylinderRule"
    , IfThenExtrudedCrossSectionRule(*this)	// "IfThenExtrudedCrossSectionRule"
    , IfThenLineRule(*this)	// "IfThenLineRule"
    , IfThenOppositeLinesRule(*this)	// "IfThenOppositeLinesRule"
    , IfThenOppositePlanesRule(*this)	// "IfThenOppositePlanesRule"
    , IfThenPlaneRule(*this)	// "IfThenPlaneRule"
    , IfThenPointDefinedCurveRule(*this)	// "IfThenPointDefinedCurveRule"
    , IfThenPointDefinedSurfaceRule(*this)	// "IfThenPointDefinedSurfaceRule"
    , IfThenPointRule(*this)	// "IfThenPointRule"
    , IfThenSphereRule(*this)	// "IfThenSphereRule"
    , IfThenSphericalSegmentRule(*this)	// "IfThenSphericalSegmentRule"
    , IfThenSurfaceOfRevolutionRule(*this)	// "IfThenSurfaceOfRevolutionRule"
    , IfThenSurfaceRule(*this)	// "IfThenSurfaceRule"
    , IfThenToroidalSegmentRule(*this)	// "IfThenToroidalSegmentRule"
    , IfThenTorusRule(*this)	// "IfThenTorusRule"
    , Else2(*this)	// "Else"
{
}

void CMaxFeatureRulesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MaxFeatureRulesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurandBaseType::CMeasurandBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
{
}

CMeasurandBaseType::CMeasurandBaseType(CMeasurandBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
{
}

void CMeasurandBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurandBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurandsType::CMeasurandsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measurand(*this)	// "Measurand"
    , EstablishDatumMeasurand(*this)	// "EstablishDatumMeasurand"
    , EvaluateCharacteristicMeasurand(*this)	// "EvaluateCharacteristicMeasurand"
{
}

CMeasurandsType::CMeasurandsType(CMeasurandsType const& other)
    : TypeBase(other.GetNode())
    , Measurand(*this)	// "Measurand"
    , EstablishDatumMeasurand(*this)	// "EstablishDatumMeasurand"
    , EvaluateCharacteristicMeasurand(*this)	// "EvaluateCharacteristicMeasurand"
{
}

void CMeasurandsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurandsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureActionGroupFunctionEnumType::CMeasureActionGroupFunctionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMeasureActionGroupFunctionEnumType::CMeasureActionGroupFunctionEnumType(CMeasureActionGroupFunctionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CMeasureActionGroupFunctionType::CMeasureActionGroupFunctionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MeasureActionGroupFunctionEnum(*this)	// "MeasureActionGroupFunctionEnum"
    , OtherMeasureActionGroupFunction(*this)	// "OtherMeasureActionGroupFunction"
{
}

CMeasureActionGroupFunctionType::CMeasureActionGroupFunctionType(CMeasureActionGroupFunctionType const& other)
    : TypeBase(other.GetNode())
    , MeasureActionGroupFunctionEnum(*this)	// "MeasureActionGroupFunctionEnum"
    , OtherMeasureActionGroupFunction(*this)	// "OtherMeasureActionGroupFunction"
{
}

void CMeasureActionGroupFunctionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureActionGroupFunctionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureEvaluateAllActionType::CMeasureEvaluateAllActionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionBaseType(node)
{
}

CMeasureEvaluateAllActionType::CMeasureEvaluateAllActionType(CMeasureEvaluateAllActionType const& other)
    : ::qif191::t::CActionBaseType(other.GetNode())
{
}

void CMeasureEvaluateAllActionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureEvaluateAllActionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureEvaluateSpecifiedActionType::CMeasureEvaluateSpecifiedActionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionBaseType(node)
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
{
}

CMeasureEvaluateSpecifiedActionType::CMeasureEvaluateSpecifiedActionType(CMeasureEvaluateSpecifiedActionType const& other)
    : ::qif191::t::CActionBaseType(other.GetNode())
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
{
}

void CMeasureEvaluateSpecifiedActionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureEvaluateSpecifiedActionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureFeatureMethodBaseType::CMeasureFeatureMethodBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionMethodBaseType(node)
{
}

CMeasureFeatureMethodBaseType::CMeasureFeatureMethodBaseType(CMeasureFeatureMethodBaseType const& other)
    : ::qif191::t::CActionMethodBaseType(other.GetNode())
{
}

void CMeasureFeatureMethodBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureFeatureMethodBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurePointActualType::CMeasurePointActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualPointWithNormalBaseType(node)
    , Compensated(*this)	// "Compensated"
    , ProbeRadius(*this)	// "ProbeRadius"
    , MeasurementDeviceId(*this)	// "MeasurementDeviceId"
    , SensorId(*this)	// "SensorId"
    , MeasurePointNominalId(*this)	// "MeasurePointNominalId"
{
}

CMeasurePointActualType::CMeasurePointActualType(CMeasurePointActualType const& other)
    : ::qif191::t::CActualPointWithNormalBaseType(other.GetNode())
    , Compensated(*this)	// "Compensated"
    , ProbeRadius(*this)	// "ProbeRadius"
    , MeasurementDeviceId(*this)	// "MeasurementDeviceId"
    , SensorId(*this)	// "SensorId"
    , MeasurePointNominalId(*this)	// "MeasurePointNominalId"
{
}

void CMeasurePointActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurePointActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurePointNominalType::CMeasurePointNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPointWithNormalBaseType(node)
    , MeasurementDeviceId(*this)	// "MeasurementDeviceId"
    , SensorId(*this)	// "SensorId"
{
}

CMeasurePointNominalType::CMeasurePointNominalType(CMeasurePointNominalType const& other)
    : ::qif191::t::CPointWithNormalBaseType(other.GetNode())
    , MeasurementDeviceId(*this)	// "MeasurementDeviceId"
    , SensorId(*this)	// "SensorId"
{
}

void CMeasurePointNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurePointNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureSpecifiedFeaturesActionType::CMeasureSpecifiedFeaturesActionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionBaseType(node)
    , FeatureItemIds(*this)	// "FeatureItemIds"
{
}

CMeasureSpecifiedFeaturesActionType::CMeasureSpecifiedFeaturesActionType(CMeasureSpecifiedFeaturesActionType const& other)
    : ::qif191::t::CActionBaseType(other.GetNode())
    , FeatureItemIds(*this)	// "FeatureItemIds"
{
}

void CMeasureSpecifiedFeaturesActionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureSpecifiedFeaturesActionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureSpecifiedMeasurandsActionType::CMeasureSpecifiedMeasurandsActionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionBaseType(node)
    , MeasurandIds(*this)	// "MeasurandIds"
{
}

CMeasureSpecifiedMeasurandsActionType::CMeasureSpecifiedMeasurandsActionType(CMeasureSpecifiedMeasurandsActionType const& other)
    : ::qif191::t::CActionBaseType(other.GetNode())
    , MeasurandIds(*this)	// "MeasurandIds"
{
}

void CMeasureSpecifiedMeasurandsActionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureSpecifiedMeasurandsActionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasuredCharacteristicsType::CMeasuredCharacteristicsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CharacteristicActuals(*this)	// "CharacteristicActuals"
    , CharacteristicGroupStatuses(*this)	// "CharacteristicGroupStatuses"
{
}

CMeasuredCharacteristicsType::CMeasuredCharacteristicsType(CMeasuredCharacteristicsType const& other)
    : TypeBase(other.GetNode())
    , CharacteristicActuals(*this)	// "CharacteristicActuals"
    , CharacteristicGroupStatuses(*this)	// "CharacteristicGroupStatuses"
{
}

void CMeasuredCharacteristicsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasuredCharacteristicsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasuredFeatureType::CMeasuredFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointList(*this)	// "PointList"
{
}

CMeasuredFeatureType::CMeasuredFeatureType(CMeasuredFeatureType const& other)
    : TypeBase(other.GetNode())
    , PointList(*this)	// "PointList"
{
}

void CMeasuredFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasuredFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasuredFeaturesType::CMeasuredFeaturesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureActuals(*this)	// "FeatureActuals"
{
}

CMeasuredFeaturesType::CMeasuredFeaturesType(CMeasuredFeaturesType const& other)
    : TypeBase(other.GetNode())
    , FeatureActuals(*this)	// "FeatureActuals"
{
}

void CMeasuredFeaturesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasuredFeaturesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementDeviceAccuracyBaseType::CMeasurementDeviceAccuracyBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMeasurementDeviceAccuracyBaseType::CMeasurementDeviceAccuracyBaseType(CMeasurementDeviceAccuracyBaseType const& other)
    : TypeBase(other.GetNode())
{
}

void CMeasurementDeviceAccuracyBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementDeviceAccuracyBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementDeviceType::CMeasurementDeviceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementResourceBaseType(node)
    , Calibrations(*this)	// "Calibrations"
    , InspectionTemperatures(*this)	// "InspectionTemperatures"
{
}

CMeasurementDeviceType::CMeasurementDeviceType(CMeasurementDeviceType const& other)
    : ::qif191::t::CMeasurementResourceBaseType(other.GetNode())
    , Calibrations(*this)	// "Calibrations"
    , InspectionTemperatures(*this)	// "InspectionTemperatures"
{
}

void CMeasurementDeviceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementDeviceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementDevicesType::CMeasurementDevicesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MeasurementDevice(*this)	// "MeasurementDevice"
    , CMM(*this)	// "CMM"
    , Caliper(*this)	// "Caliper"
    , Comparator(*this)	// "Comparator"
    , GageDevice(*this)	// "GageDevice"
{
}

CMeasurementDevicesType::CMeasurementDevicesType(CMeasurementDevicesType const& other)
    : TypeBase(other.GetNode())
    , MeasurementDevice(*this)	// "MeasurementDevice"
    , CMM(*this)	// "CMM"
    , Caliper(*this)	// "Caliper"
    , Comparator(*this)	// "Comparator"
    , GageDevice(*this)	// "GageDevice"
{
}

void CMeasurementDevicesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementDevicesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementDirectiveEnumType::CMeasurementDirectiveEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMeasurementDirectiveEnumType::CMeasurementDirectiveEnumType(CMeasurementDirectiveEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CMeasurementDirectiveType::CMeasurementDirectiveType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MeasurementDirectiveEnum(*this)	// "MeasurementDirectiveEnum"
    , OtherMeasurementDirective(*this)	// "OtherMeasurementDirective"
{
}

CMeasurementDirectiveType::CMeasurementDirectiveType(CMeasurementDirectiveType const& other)
    : TypeBase(other.GetNode())
    , MeasurementDirectiveEnum(*this)	// "MeasurementDirectiveEnum"
    , OtherMeasurementDirective(*this)	// "OtherMeasurementDirective"
{
}

void CMeasurementDirectiveType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementDirectiveType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementPlanType::CMeasurementPlanType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Version(*this)	// "Version"
    , RulesUsedQPId(*this)	// "RulesUsedQPId"
    , RulesToUseQPId(*this)	// "RulesToUseQPId"
    , WorkInstructions(*this)	// "WorkInstructions"
    , ActionMethods(*this)	// "ActionMethods"
    , Measurands(*this)	// "Measurands"
    , PlanRoot(*this)	// "PlanRoot"
    , OneOfPlanRoot(*this)	// "OneOfPlanRoot"
    , OrderedPlanRoot(*this)	// "OrderedPlanRoot"
    , PartiallyOrderedPlanRoot(*this)	// "PartiallyOrderedPlanRoot"
    , PickSomePlanRoot(*this)	// "PickSomePlanRoot"
    , UnorderedPlanRoot(*this)	// "UnorderedPlanRoot"
{
}

CMeasurementPlanType::CMeasurementPlanType(CMeasurementPlanType const& other)
    : TypeBase(other.GetNode())
    , Version(*this)	// "Version"
    , RulesUsedQPId(*this)	// "RulesUsedQPId"
    , RulesToUseQPId(*this)	// "RulesToUseQPId"
    , WorkInstructions(*this)	// "WorkInstructions"
    , ActionMethods(*this)	// "ActionMethods"
    , Measurands(*this)	// "Measurands"
    , PlanRoot(*this)	// "PlanRoot"
    , OneOfPlanRoot(*this)	// "OneOfPlanRoot"
    , OrderedPlanRoot(*this)	// "OrderedPlanRoot"
    , PartiallyOrderedPlanRoot(*this)	// "PartiallyOrderedPlanRoot"
    , PickSomePlanRoot(*this)	// "PickSomePlanRoot"
    , UnorderedPlanRoot(*this)	// "UnorderedPlanRoot"
{
}

void CMeasurementPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementResourceBaseType::CMeasurementResourceBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
    , Manufacturer(*this)	// "Manufacturer"
    , ModelNumber(*this)	// "ModelNumber"
    , SerialNumber(*this)	// "SerialNumber"
    , LocationId(*this)	// "LocationId"
    , Location(*this)	// "Location"
{
}

CMeasurementResourceBaseType::CMeasurementResourceBaseType(CMeasurementResourceBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
    , Manufacturer(*this)	// "Manufacturer"
    , ModelNumber(*this)	// "ModelNumber"
    , SerialNumber(*this)	// "SerialNumber"
    , LocationId(*this)	// "LocationId"
    , Location(*this)	// "Location"
{
}

void CMeasurementResourceBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementResourceBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementResourcesType::CMeasurementResourcesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Version(*this)	// "Version"
    , Carriages(*this)	// "Carriages"
    , Fixtures(*this)	// "Fixtures"
    , MeasurementDevices(*this)	// "MeasurementDevices"
    , Sensors(*this)	// "Sensors"
    , Tools(*this)	// "Tools"
{
}

CMeasurementResourcesType::CMeasurementResourcesType(CMeasurementResourcesType const& other)
    : TypeBase(other.GetNode())
    , Version(*this)	// "Version"
    , Carriages(*this)	// "Carriages"
    , Fixtures(*this)	// "Fixtures"
    , MeasurementDevices(*this)	// "MeasurementDevices"
    , Sensors(*this)	// "Sensors"
    , Tools(*this)	// "Tools"
{
}

void CMeasurementResourcesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementResourcesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementResultsType::CMeasurementResultsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , InspectionTraceability(*this)	// "InspectionTraceability"
    , ThisResultsInstanceQPId(*this)	// "ThisResultsInstanceQPId"
    , ExternalFileReference(*this)	// "ExternalFileReference"
    , MeasuredFeatures(*this)	// "MeasuredFeatures"
    , MeasuredCharacteristics(*this)	// "MeasuredCharacteristics"
    , CoordinateSystemActualTransforms(*this)	// "CoordinateSystemActualTransforms"
    , InspectionStatus(*this)	// "InspectionStatus"
    , ActualComponentIds(*this)	// "ActualComponentIds"
{
}

CMeasurementResultsType::CMeasurementResultsType(CMeasurementResultsType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , InspectionTraceability(*this)	// "InspectionTraceability"
    , ThisResultsInstanceQPId(*this)	// "ThisResultsInstanceQPId"
    , ExternalFileReference(*this)	// "ExternalFileReference"
    , MeasuredFeatures(*this)	// "MeasuredFeatures"
    , MeasuredCharacteristics(*this)	// "MeasuredCharacteristics"
    , CoordinateSystemActualTransforms(*this)	// "CoordinateSystemActualTransforms"
    , InspectionStatus(*this)	// "InspectionStatus"
    , ActualComponentIds(*this)	// "ActualComponentIds"
{
}

void CMeasurementResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementsResultsType::CMeasurementsResultsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Version(*this)	// "Version"
    , MeasurementResults(*this)	// "MeasurementResults"
    , ActualComponentSet(*this)	// "ActualComponentSet"
    , InspectionTraceability(*this)	// "InspectionTraceability"
{
}

CMeasurementsResultsType::CMeasurementsResultsType(CMeasurementsResultsType const& other)
    : TypeBase(other.GetNode())
    , Version(*this)	// "Version"
    , MeasurementResults(*this)	// "MeasurementResults"
    , ActualComponentSet(*this)	// "ActualComponentSet"
    , InspectionTraceability(*this)	// "InspectionTraceability"
{
}

void CMeasurementsResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementsResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeshTriangleCoreType::CMeshTriangleCoreType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Triangles(*this)	// "Triangles"
    , TrianglesBinary(*this)	// "TrianglesBinary"
    , Neighbours(*this)	// "Neighbours"
    , NeighboursBinary(*this)	// "NeighboursBinary"
    , Vertices(*this)	// "Vertices"
    , VerticesBinary(*this)	// "VerticesBinary"
    , Normals(*this)	// "Normals"
    , NormalsBinary(*this)	// "NormalsBinary"
{
}

CMeshTriangleCoreType::CMeshTriangleCoreType(CMeshTriangleCoreType const& other)
    : TypeBase(other.GetNode())
    , Triangles(*this)	// "Triangles"
    , TrianglesBinary(*this)	// "TrianglesBinary"
    , Neighbours(*this)	// "Neighbours"
    , NeighboursBinary(*this)	// "NeighboursBinary"
    , Vertices(*this)	// "Vertices"
    , VerticesBinary(*this)	// "VerticesBinary"
    , Normals(*this)	// "Normals"
    , NormalsBinary(*this)	// "NormalsBinary"
{
}

void CMeshTriangleCoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeshTriangleCoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeshTriangleType::CMeshTriangleType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometryBaseType(node)
    , MeshTriangleCore(*this)	// "MeshTriangleCore"
{
}

CMeshTriangleType::CMeshTriangleType(CMeshTriangleType const& other)
    : ::qif191::t::CGeometryBaseType(other.GetNode())
    , MeshTriangleCore(*this)	// "MeshTriangleCore"
{
}

void CMeshTriangleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeshTriangleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMinusType::CMinusType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(node)
{
}

CMinusType::CMinusType(CMinusType const& other)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(other.GetNode())
{
}

void CMinusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MinusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMovableDatumTargetDirectionType::CMovableDatumTargetDirectionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DatumTargetTranslationDirection(*this)	// "DatumTargetTranslationDirection"
{
}

CMovableDatumTargetDirectionType::CMovableDatumTargetDirectionType(CMovableDatumTargetDirectionType const& other)
    : TypeBase(other.GetNode())
    , DatumTargetTranslationDirection(*this)	// "DatumTargetTranslationDirection"
{
}

void CMovableDatumTargetDirectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MovableDatumTargetDirectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMultiLeadThreadSpecificationType::CMultiLeadThreadSpecificationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CThreadSpecificationDetailedBaseType(node)
    , ThreadPitch(*this)	// "ThreadPitch"
    , ThreadLeadDistance(*this)	// "ThreadLeadDistance"
    , ThreadLeadStarts(*this)	// "ThreadLeadStarts"
{
}

CMultiLeadThreadSpecificationType::CMultiLeadThreadSpecificationType(CMultiLeadThreadSpecificationType const& other)
    : ::qif191::t::CThreadSpecificationDetailedBaseType(other.GetNode())
    , ThreadPitch(*this)	// "ThreadPitch"
    , ThreadLeadDistance(*this)	// "ThreadLeadDistance"
    , ThreadLeadStarts(*this)	// "ThreadLeadStarts"
{
}

void CMultiLeadThreadSpecificationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MultiLeadThreadSpecificationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMultipleProductInstanceStudyPlanBaseType::CMultipleProductInstanceStudyPlanBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyPlanBaseType(node)
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
{
}

CMultipleProductInstanceStudyPlanBaseType::CMultipleProductInstanceStudyPlanBaseType(CMultipleProductInstanceStudyPlanBaseType const& other)
    : ::qif191::t::CStatisticalStudyPlanBaseType(other.GetNode())
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
{
}

void CMultipleProductInstanceStudyPlanBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MultipleProductInstanceStudyPlanBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMultipleProductInstanceStudyResultsBaseType::CMultipleProductInstanceStudyResultsBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
{
}

CMultipleProductInstanceStudyResultsBaseType::CMultipleProductInstanceStudyResultsBaseType(CMultipleProductInstanceStudyResultsBaseType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
{
}

void CMultipleProductInstanceStudyResultsBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MultipleProductInstanceStudyResultsBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNaturalType::CNaturalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNaturalType::CNaturalType(CNaturalType const& other)
    : TypeBase(other.GetNode())
{
}


CNegateType::CNegateType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArithmeticExpressionBaseType(node)
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , DividedBy(*this)	// "DividedBy"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureLength(*this)	// "FeatureLength"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , Plus(*this)	// "Plus"
    , Times(*this)	// "Times"
{
}

CNegateType::CNegateType(CNegateType const& other)
    : ::qif191::t::CArithmeticExpressionBaseType(other.GetNode())
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , DividedBy(*this)	// "DividedBy"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureLength(*this)	// "FeatureLength"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , Plus(*this)	// "Plus"
    , Times(*this)	// "Times"
{
}

void CNegateType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NegateType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNodeBaseType::CNodeBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Label(*this)	// "@Label"
{
}

CNodeBaseType::CNodeBaseType(CNodeBaseType const& other)
    : TypeBase(other.GetNode())
    , Label(*this)	// "@Label"
{
}

void CNodeBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NodeBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNodeWithIdBaseType::CNodeWithIdBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CNodeBaseType(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
{
}

CNodeWithIdBaseType::CNodeWithIdBaseType(CNodeWithIdBaseType const& other)
    : ::qif191::t::CNodeBaseType(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
{
}

void CNodeWithIdBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NodeWithIdBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNominalDatumFeatureType::CNominalDatumFeatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDatumFeatureBaseType(node)
{
}

CNominalDatumFeatureType::CNominalDatumFeatureType(CNominalDatumFeatureType const& other)
    : ::qif191::t::CDatumFeatureBaseType(other.GetNode())
{
}

void CNominalDatumFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NominalDatumFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNominalOffsetAlignmentOperationType::CNominalOffsetAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , Offset(*this)	// "Offset"
{
}

CNominalOffsetAlignmentOperationType::CNominalOffsetAlignmentOperationType(CNominalOffsetAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , Offset(*this)	// "Offset"
{
}

void CNominalOffsetAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NominalOffsetAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNominalRotationAlignmentOperationType::CNominalRotationAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , RotationAxis(*this)	// "RotationAxis"
    , Angle(*this)	// "Angle"
{
}

CNominalRotationAlignmentOperationType::CNominalRotationAlignmentOperationType(CNominalRotationAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , RotationAxis(*this)	// "RotationAxis"
    , Angle(*this)	// "Angle"
{
}

void CNominalRotationAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NominalRotationAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType::CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType::CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType(CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CNonFeatureOfSizeSubstituteFeatureAlgorithmType::CNonFeatureOfSizeSubstituteFeatureAlgorithmType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(node)
    , NonFeatureOfSizeSubstituteFeatureAlgorithmEnum(*this)	// "NonFeatureOfSizeSubstituteFeatureAlgorithmEnum"
    , OtherNonFeatureOfSizeSubstituteFeatureAlgorithm(*this)	// "OtherNonFeatureOfSizeSubstituteFeatureAlgorithm"
{
}

CNonFeatureOfSizeSubstituteFeatureAlgorithmType::CNonFeatureOfSizeSubstituteFeatureAlgorithmType(CNonFeatureOfSizeSubstituteFeatureAlgorithmType const& other)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(other.GetNode())
    , NonFeatureOfSizeSubstituteFeatureAlgorithmEnum(*this)	// "NonFeatureOfSizeSubstituteFeatureAlgorithmEnum"
    , OtherNonFeatureOfSizeSubstituteFeatureAlgorithm(*this)	// "OtherNonFeatureOfSizeSubstituteFeatureAlgorithm"
{
}

void CNonFeatureOfSizeSubstituteFeatureAlgorithmType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NonFeatureOfSizeSubstituteFeatureAlgorithmType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNonNegativeDecimalType::CNonNegativeDecimalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNonNegativeDecimalType::CNonNegativeDecimalType(CNonNegativeDecimalType const& other)
    : TypeBase(other.GetNode())
{
}


CNonToleranceEnumType::CNonToleranceEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNonToleranceEnumType::CNonToleranceEnumType(CNonToleranceEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CNotType::CNotType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

CNotType::CNotType(CNotType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

void CNotType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NotType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNotableEventType::CNotableEventType(xercesc::DOMNode* const& node)
    : ::qif191::t::CEventBaseType(node)
    , Active(*this)	// "Active"
{
}

CNotableEventType::CNotableEventType(CNotableEventType const& other)
    : ::qif191::t::CEventBaseType(other.GetNode())
    , Active(*this)	// "Active"
{
}

void CNotableEventType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NotableEventType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNotableEventsType::CNotableEventsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , NotableEvent(*this)	// "NotableEvent"
{
}

CNotableEventsType::CNotableEventsType(CNotableEventsType const& other)
    : TypeBase(other.GetNode())
    , NotableEvent(*this)	// "NotableEvent"
{
}

void CNotableEventsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NotableEventsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNotedEventType::CNotedEventType(xercesc::DOMNode* const& node)
    : ::qif191::t::CEventBaseType(node)
    , SequenceNumber(*this)	// "SequenceNumber"
    , TimeOccurred(*this)	// "TimeOccurred"
    , NotableEventId(*this)	// "NotableEventId"
{
}

CNotedEventType::CNotedEventType(CNotedEventType const& other)
    : ::qif191::t::CEventBaseType(other.GetNode())
    , SequenceNumber(*this)	// "SequenceNumber"
    , TimeOccurred(*this)	// "TimeOccurred"
    , NotableEventId(*this)	// "NotableEventId"
{
}

void CNotedEventType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NotedEventType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNotedEventsType::CNotedEventsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , NotedEvent(*this)	// "NotedEvent"
{
}

CNotedEventsType::CNotedEventsType(CNotedEventsType const& other)
    : TypeBase(other.GetNode())
    , NotedEvent(*this)	// "NotedEvent"
{
}

void CNotedEventsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NotedEventsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNumberedPlanElementType::CNumberedPlanElementType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SequenceNumber(*this)	// "SequenceNumber"
    , PlanElement(*this)	// "PlanElement"
    , EvaluateSpecifiedCharacteristics(*this)	// "EvaluateSpecifiedCharacteristics"
    , MeasureEvaluateAll(*this)	// "MeasureEvaluateAll"
    , MeasureEvaluateSpecified(*this)	// "MeasureEvaluateSpecified"
    , MeasureSpecifiedFeatures(*this)	// "MeasureSpecifiedFeatures"
    , MeasureSpecifiedMeasurands(*this)	// "MeasureSpecifiedMeasurands"
    , OneOfActionGroup(*this)	// "OneOfActionGroup"
    , OrderedActionGroup(*this)	// "OrderedActionGroup"
    , PartiallyOrderedActionGroup(*this)	// "PartiallyOrderedActionGroup"
    , PickSomeActionGroup(*this)	// "PickSomeActionGroup"
    , UnorderedActionGroup(*this)	// "UnorderedActionGroup"
{
}

CNumberedPlanElementType::CNumberedPlanElementType(CNumberedPlanElementType const& other)
    : TypeBase(other.GetNode())
    , SequenceNumber(*this)	// "SequenceNumber"
    , PlanElement(*this)	// "PlanElement"
    , EvaluateSpecifiedCharacteristics(*this)	// "EvaluateSpecifiedCharacteristics"
    , MeasureEvaluateAll(*this)	// "MeasureEvaluateAll"
    , MeasureEvaluateSpecified(*this)	// "MeasureEvaluateSpecified"
    , MeasureSpecifiedFeatures(*this)	// "MeasureSpecifiedFeatures"
    , MeasureSpecifiedMeasurands(*this)	// "MeasureSpecifiedMeasurands"
    , OneOfActionGroup(*this)	// "OneOfActionGroup"
    , OrderedActionGroup(*this)	// "OrderedActionGroup"
    , PartiallyOrderedActionGroup(*this)	// "PartiallyOrderedActionGroup"
    , PickSomeActionGroup(*this)	// "PickSomeActionGroup"
    , UnorderedActionGroup(*this)	// "UnorderedActionGroup"
{
}

void CNumberedPlanElementType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NumberedPlanElementType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNumberedPlanElementsType::CNumberedPlanElementsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , NumberedPlanElement(*this)	// "NumberedPlanElement"
{
}

CNumberedPlanElementsType::CNumberedPlanElementsType(CNumberedPlanElementsType const& other)
    : TypeBase(other.GetNode())
    , NumberedPlanElement(*this)	// "NumberedPlanElement"
{
}

void CNumberedPlanElementsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NumberedPlanElementsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNumericalLengthAccuracyType::CNumericalLengthAccuracyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementDeviceAccuracyBaseType(node)
    , AccuracyValue(*this)	// "AccuracyValue"
{
}

CNumericalLengthAccuracyType::CNumericalLengthAccuracyType(CNumericalLengthAccuracyType const& other)
    : ::qif191::t::CMeasurementDeviceAccuracyBaseType(other.GetNode())
    , AccuracyValue(*this)	// "AccuracyValue"
{
}

void CNumericalLengthAccuracyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NumericalLengthAccuracyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNurbs12CoreType::CNurbs12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Order(*this)	// "Order"
    , Knots(*this)	// "Knots"
    , CPs(*this)	// "CPs"
    , CPsBinary(*this)	// "CPsBinary"
    , Weights(*this)	// "Weights"
{
}

CNurbs12CoreType::CNurbs12CoreType(CNurbs12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Order(*this)	// "Order"
    , Knots(*this)	// "Knots"
    , CPs(*this)	// "CPs"
    , CPsBinary(*this)	// "CPsBinary"
    , Weights(*this)	// "Weights"
{
}

void CNurbs12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Nurbs12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNurbs12Type::CNurbs12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , Nurbs12Core(*this)	// "Nurbs12Core"
{
}

CNurbs12Type::CNurbs12Type(CNurbs12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , Nurbs12Core(*this)	// "Nurbs12Core"
{
}

void CNurbs12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Nurbs12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CNurbs13CoreType::CNurbs13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Order(*this)	// "Order"
    , Knots(*this)	// "Knots"
    , CPs(*this)	// "CPs"
    , CPsBinary(*this)	// "CPsBinary"
    , Weights(*this)	// "Weights"
{
}

CNurbs13CoreType::CNurbs13CoreType(CNurbs13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Order(*this)	// "Order"
    , Knots(*this)	// "Knots"
    , CPs(*this)	// "CPs"
    , CPsBinary(*this)	// "CPsBinary"
    , Weights(*this)	// "Weights"
{
}

void CNurbs13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Nurbs13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNurbs13Type::CNurbs13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Transform(*this)	// "Transform"
{
}

CNurbs13Type::CNurbs13Type(CNurbs13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Transform(*this)	// "Transform"
{
}

void CNurbs13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Nurbs13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CNurbs23CoreType::CNurbs23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , OrderU(*this)	// "OrderU"
    , OrderV(*this)	// "OrderV"
    , KnotsU(*this)	// "KnotsU"
    , KnotsV(*this)	// "KnotsV"
    , CPs(*this)	// "CPs"
    , CPsBinary(*this)	// "CPsBinary"
    , Weights(*this)	// "Weights"
{
}

CNurbs23CoreType::CNurbs23CoreType(CNurbs23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , OrderU(*this)	// "OrderU"
    , OrderV(*this)	// "OrderV"
    , KnotsU(*this)	// "KnotsU"
    , KnotsV(*this)	// "KnotsV"
    , CPs(*this)	// "CPs"
    , CPsBinary(*this)	// "CPsBinary"
    , Weights(*this)	// "Weights"
{
}

void CNurbs23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Nurbs23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNurbs23Type::CNurbs23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Nurbs23Core(*this)	// "Nurbs23Core"
    , Transform(*this)	// "Transform"
{
}

CNurbs23Type::CNurbs23Type(CNurbs23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Nurbs23Core(*this)	// "Nurbs23Core"
    , Transform(*this)	// "Transform"
{
}

void CNurbs23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Nurbs23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

COffset23CoreType::COffset23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , Distance(*this)	// "Distance"
    , Surface(*this)	// "Surface"
{
}

COffset23CoreType::COffset23CoreType(COffset23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , Distance(*this)	// "Distance"
    , Surface(*this)	// "Surface"
{
}

void COffset23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Offset23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

COffset23Type::COffset23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Offset23Core(*this)	// "Offset23Core"
    , Transform(*this)	// "Transform"
{
}

COffset23Type::COffset23Type(COffset23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Offset23Core(*this)	// "Offset23Core"
    , Transform(*this)	// "Transform"
{
}

void COffset23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Offset23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

COneOfActionGroupType::COneOfActionGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionGroupBaseType(node)
    , Steps(*this)	// "Steps"
{
}

COneOfActionGroupType::COneOfActionGroupType(COneOfActionGroupType const& other)
    : ::qif191::t::CActionGroupBaseType(other.GetNode())
    , Steps(*this)	// "Steps"
{
}

void COneOfActionGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OneOfActionGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

COneSidedCapabilityCalculationEnumType::COneSidedCapabilityCalculationEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COneSidedCapabilityCalculationEnumType::COneSidedCapabilityCalculationEnumType(COneSidedCapabilityCalculationEnumType const& other)
    : TypeBase(other.GetNode())
{
}


COpenCurvePointSamplingStrategyEnumType::COpenCurvePointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COpenCurvePointSamplingStrategyEnumType::COpenCurvePointSamplingStrategyEnumType(COpenCurvePointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


COppositeLinesActualDeterminationType::COppositeLinesActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

COppositeLinesActualDeterminationType::COppositeLinesActualDeterminationType(COppositeLinesActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void COppositeLinesActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesBestFitType::COppositeLinesBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

COppositeLinesBestFitType::COppositeLinesBestFitType(COppositeLinesBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void COppositeLinesBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesCastType::COppositeLinesCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

COppositeLinesCastType::COppositeLinesCastType(COppositeLinesCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void COppositeLinesCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesCheckedFeatureType::COppositeLinesCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

COppositeLinesCheckedFeatureType::COppositeLinesCheckedFeatureType(COppositeLinesCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void COppositeLinesCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesCheckedType::COppositeLinesCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

COppositeLinesCheckedType::COppositeLinesCheckedType(COppositeLinesCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void COppositeLinesCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesConstructionMethodType::COppositeLinesConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

COppositeLinesConstructionMethodType::COppositeLinesConstructionMethodType(COppositeLinesConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void COppositeLinesConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesCopyType::COppositeLinesCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseOppositeLines(*this)	// "BaseOppositeLines"
{
}

COppositeLinesCopyType::COppositeLinesCopyType(COppositeLinesCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseOppositeLines(*this)	// "BaseOppositeLines"
{
}

void COppositeLinesCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesFeatureActualType::COppositeLinesFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , CenterLine(*this)	// "CenterLine"
    , Normal(*this)	// "Normal"
    , Width(*this)	// "Width"
    , WidthMin(*this)	// "WidthMin"
    , WidthMax(*this)	// "WidthMax"
    , Length(*this)	// "Length"
    , LengthMin(*this)	// "LengthMin"
    , LengthMax(*this)	// "LengthMax"
    , TaperAngle(*this)	// "TaperAngle"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
    , Form(*this)	// "Form"
{
}

COppositeLinesFeatureActualType::COppositeLinesFeatureActualType(COppositeLinesFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , CenterLine(*this)	// "CenterLine"
    , Normal(*this)	// "Normal"
    , Width(*this)	// "Width"
    , WidthMin(*this)	// "WidthMin"
    , WidthMax(*this)	// "WidthMax"
    , Length(*this)	// "Length"
    , LengthMin(*this)	// "LengthMin"
    , LengthMax(*this)	// "LengthMax"
    , TaperAngle(*this)	// "TaperAngle"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
    , Form(*this)	// "Form"
{
}

void COppositeLinesFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesFeatureDefinitionType::COppositeLinesFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Width(*this)	// "Width"
    , Length(*this)	// "Length"
    , EndType(*this)	// "EndType"
    , TaperAngle(*this)	// "TaperAngle"
    , SingleOpenEnd(*this)	// "SingleOpenEnd"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
{
}

COppositeLinesFeatureDefinitionType::COppositeLinesFeatureDefinitionType(COppositeLinesFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Width(*this)	// "Width"
    , Length(*this)	// "Length"
    , EndType(*this)	// "EndType"
    , TaperAngle(*this)	// "TaperAngle"
    , SingleOpenEnd(*this)	// "SingleOpenEnd"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
{
}

void COppositeLinesFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesFeatureItemType::COppositeLinesFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

COppositeLinesFeatureItemType::COppositeLinesFeatureItemType(COppositeLinesFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void COppositeLinesFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesFeatureNominalType::COppositeLinesFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , CenterLine(*this)	// "CenterLine"
    , Normal(*this)	// "Normal"
{
}

COppositeLinesFeatureNominalType::COppositeLinesFeatureNominalType(COppositeLinesFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , CenterLine(*this)	// "CenterLine"
    , Normal(*this)	// "Normal"
{
}

void COppositeLinesFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesFromScanType::COppositeLinesFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

COppositeLinesFromScanType::COppositeLinesFromScanType(COppositeLinesFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Depth(*this)	// "Depth"
{
}

void COppositeLinesFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesPointSamplingStrategyType::COppositeLinesPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

COppositeLinesPointSamplingStrategyType::COppositeLinesPointSamplingStrategyType(COppositeLinesPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void COppositeLinesPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesProjectionType::COppositeLinesProjectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ProjectionPlane(*this)	// "ProjectionPlane"
    , ProjectionOppositeLines(*this)	// "ProjectionOppositeLines"
{
}

COppositeLinesProjectionType::COppositeLinesProjectionType(COppositeLinesProjectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ProjectionPlane(*this)	// "ProjectionPlane"
    , ProjectionOppositeLines(*this)	// "ProjectionOppositeLines"
{
}

void COppositeLinesProjectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesProjectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesRecompType::COppositeLinesRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

COppositeLinesRecompType::COppositeLinesRecompType(COppositeLinesRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void COppositeLinesRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositeLinesTransformType::COppositeLinesTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseOppositeLines(*this)	// "BaseOppositeLines"
    , Transformation(*this)	// "Transformation"
{
}

COppositeLinesTransformType::COppositeLinesTransformType(COppositeLinesTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseOppositeLines(*this)	// "BaseOppositeLines"
    , Transformation(*this)	// "Transformation"
{
}

void COppositeLinesTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositeLinesTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesActualDeterminationType::COppositePlanesActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

COppositePlanesActualDeterminationType::COppositePlanesActualDeterminationType(COppositePlanesActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void COppositePlanesActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesBestFitType::COppositePlanesBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

COppositePlanesBestFitType::COppositePlanesBestFitType(COppositePlanesBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void COppositePlanesBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesCastType::COppositePlanesCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

COppositePlanesCastType::COppositePlanesCastType(COppositePlanesCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void COppositePlanesCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesCheckedFeatureType::COppositePlanesCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

COppositePlanesCheckedFeatureType::COppositePlanesCheckedFeatureType(COppositePlanesCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void COppositePlanesCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesCheckedType::COppositePlanesCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

COppositePlanesCheckedType::COppositePlanesCheckedType(COppositePlanesCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void COppositePlanesCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesConstructionMethodType::COppositePlanesConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

COppositePlanesConstructionMethodType::COppositePlanesConstructionMethodType(COppositePlanesConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void COppositePlanesConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesCopyType::COppositePlanesCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseOppositePlanes(*this)	// "BaseOppositePlanes"
{
}

COppositePlanesCopyType::COppositePlanesCopyType(COppositePlanesCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseOppositePlanes(*this)	// "BaseOppositePlanes"
{
}

void COppositePlanesCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesFeatureActualType::COppositePlanesFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , CenterPlane(*this)	// "CenterPlane"
    , LengthVector(*this)	// "LengthVector"
    , DepthVector(*this)	// "DepthVector"
    , Width(*this)	// "Width"
    , WidthMin(*this)	// "WidthMin"
    , WidthMax(*this)	// "WidthMax"
    , Length(*this)	// "Length"
    , LengthMin(*this)	// "LengthMin"
    , LengthMax(*this)	// "LengthMax"
    , Depth(*this)	// "Depth"
    , TaperAngle(*this)	// "TaperAngle"
    , DraftAngle(*this)	// "DraftAngle"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
    , Form(*this)	// "Form"
{
}

COppositePlanesFeatureActualType::COppositePlanesFeatureActualType(COppositePlanesFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , CenterPlane(*this)	// "CenterPlane"
    , LengthVector(*this)	// "LengthVector"
    , DepthVector(*this)	// "DepthVector"
    , Width(*this)	// "Width"
    , WidthMin(*this)	// "WidthMin"
    , WidthMax(*this)	// "WidthMax"
    , Length(*this)	// "Length"
    , LengthMin(*this)	// "LengthMin"
    , LengthMax(*this)	// "LengthMax"
    , Depth(*this)	// "Depth"
    , TaperAngle(*this)	// "TaperAngle"
    , DraftAngle(*this)	// "DraftAngle"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
    , Form(*this)	// "Form"
{
}

void COppositePlanesFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesFeatureDefinitionType::COppositePlanesFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Width(*this)	// "Width"
    , Length(*this)	// "Length"
    , EndType(*this)	// "EndType"
    , Depth(*this)	// "Depth"
    , Bottom(*this)	// "Bottom"
    , SingleOpenEnd(*this)	// "SingleOpenEnd"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
    , TaperAngle(*this)	// "TaperAngle"
    , DraftAngle(*this)	// "DraftAngle"
{
}

COppositePlanesFeatureDefinitionType::COppositePlanesFeatureDefinitionType(COppositePlanesFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Width(*this)	// "Width"
    , Length(*this)	// "Length"
    , EndType(*this)	// "EndType"
    , Depth(*this)	// "Depth"
    , Bottom(*this)	// "Bottom"
    , SingleOpenEnd(*this)	// "SingleOpenEnd"
    , EndRadius1(*this)	// "EndRadius1"
    , EndRadius2(*this)	// "EndRadius2"
    , TaperAngle(*this)	// "TaperAngle"
    , DraftAngle(*this)	// "DraftAngle"
{
}

void COppositePlanesFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesFeatureItemType::COppositePlanesFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

COppositePlanesFeatureItemType::COppositePlanesFeatureItemType(COppositePlanesFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void COppositePlanesFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesFeatureNominalType::COppositePlanesFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , CenterPlane(*this)	// "CenterPlane"
    , LengthVector(*this)	// "LengthVector"
    , DepthVector(*this)	// "DepthVector"
    , DraftVector(*this)	// "DraftVector"
{
}

COppositePlanesFeatureNominalType::COppositePlanesFeatureNominalType(COppositePlanesFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , CenterPlane(*this)	// "CenterPlane"
    , LengthVector(*this)	// "LengthVector"
    , DepthVector(*this)	// "DepthVector"
    , DraftVector(*this)	// "DraftVector"
{
}

void COppositePlanesFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesFromScanType::COppositePlanesFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

COppositePlanesFromScanType::COppositePlanesFromScanType(COppositePlanesFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

void COppositePlanesFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesPointSamplingStrategyType::COppositePlanesPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

COppositePlanesPointSamplingStrategyType::COppositePlanesPointSamplingStrategyType(COppositePlanesPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void COppositePlanesPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesRecompType::COppositePlanesRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

COppositePlanesRecompType::COppositePlanesRecompType(COppositePlanesRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void COppositePlanesRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

COppositePlanesTransformType::COppositePlanesTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseOppositePlanes(*this)	// "BaseOppositePlanes"
    , Transformation(*this)	// "Transformation"
{
}

COppositePlanesTransformType::COppositePlanesTransformType(COppositePlanesTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseOppositePlanes(*this)	// "BaseOppositePlanes"
    , Transformation(*this)	// "Transformation"
{
}

void COppositePlanesTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OppositePlanesTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrType::COrType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

COrType::COrType(COrType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , BooleanExpression(*this)	// "BooleanExpression"
    , And2(*this)	// "And"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , BooleanEqual(*this)	// "BooleanEqual"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , ConstantIs(*this)	// "ConstantIs"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , Not2(*this)	// "Not"
    , Or2(*this)	// "Or"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , ShapeClassIs(*this)	// "ShapeClassIs"
{
}

void COrType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrderedActionGroupType::COrderedActionGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionGroupBaseType(node)
    , Steps(*this)	// "Steps"
{
}

COrderedActionGroupType::COrderedActionGroupType(COrderedActionGroupType const& other)
    : ::qif191::t::CActionGroupBaseType(other.GetNode())
    , Steps(*this)	// "Steps"
{
}

void COrderedActionGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrderedActionGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrganizationType::COrganizationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Name(*this)	// "Name"
    , Address(*this)	// "Address"
{
}

COrganizationType::COrganizationType(COrganizationType const& other)
    : TypeBase(other.GetNode())
    , Name(*this)	// "Name"
    , Address(*this)	// "Address"
{
}

void COrganizationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrganizationType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrganizationalAddressType::COrganizationalAddressType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Description(*this)	// "Description"
    , InternalLocation(*this)	// "InternalLocation"
    , StreetNumber(*this)	// "StreetNumber"
    , Street(*this)	// "Street"
    , PostalBox(*this)	// "PostalBox"
    , Town(*this)	// "Town"
    , Region(*this)	// "Region"
    , PostalCode(*this)	// "PostalCode"
    , Country(*this)	// "Country"
    , FacsimileNumber(*this)	// "FacsimileNumber"
    , TelephoneNumber(*this)	// "TelephoneNumber"
    , ElectronicMailAddress(*this)	// "ElectronicMailAddress"
    , TelexNumber(*this)	// "TelexNumber"
{
}

COrganizationalAddressType::COrganizationalAddressType(COrganizationalAddressType const& other)
    : TypeBase(other.GetNode())
    , Description(*this)	// "Description"
    , InternalLocation(*this)	// "InternalLocation"
    , StreetNumber(*this)	// "StreetNumber"
    , Street(*this)	// "Street"
    , PostalBox(*this)	// "PostalBox"
    , Town(*this)	// "Town"
    , Region(*this)	// "Region"
    , PostalCode(*this)	// "PostalCode"
    , Country(*this)	// "Country"
    , FacsimileNumber(*this)	// "FacsimileNumber"
    , TelephoneNumber(*this)	// "TelephoneNumber"
    , ElectronicMailAddress(*this)	// "ElectronicMailAddress"
    , TelexNumber(*this)	// "TelexNumber"
{
}

void COrganizationalAddressType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrganizationalAddressType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationCharacteristicActualBaseType::COrientationCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(node)
    , DatumsOk(*this)	// "DatumsOk"
    , Bonus(*this)	// "Bonus"
    , ReferenceLength(*this)	// "ReferenceLength"
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
{
}

COrientationCharacteristicActualBaseType::COrientationCharacteristicActualBaseType(COrientationCharacteristicActualBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(other.GetNode())
    , DatumsOk(*this)	// "DatumsOk"
    , Bonus(*this)	// "Bonus"
    , ReferenceLength(*this)	// "ReferenceLength"
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
{
}

void COrientationCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationCharacteristicDefinitionBaseType::COrientationCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(node)
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , MaterialCondition(*this)	// "MaterialCondition"
    , ZoneShape(*this)	// "ZoneShape"
    , TangentPlane(*this)	// "TangentPlane"
    , MaximumToleranceValue(*this)	// "MaximumToleranceValue"
    , ProjectedToleranceZoneValue(*this)	// "ProjectedToleranceZoneValue"
    , EachRadialElement(*this)	// "EachRadialElement"
    , EachElement(*this)	// "EachElement"
{
}

COrientationCharacteristicDefinitionBaseType::COrientationCharacteristicDefinitionBaseType(COrientationCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(other.GetNode())
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , MaterialCondition(*this)	// "MaterialCondition"
    , ZoneShape(*this)	// "ZoneShape"
    , TangentPlane(*this)	// "TangentPlane"
    , MaximumToleranceValue(*this)	// "MaximumToleranceValue"
    , ProjectedToleranceZoneValue(*this)	// "ProjectedToleranceZoneValue"
    , EachRadialElement(*this)	// "EachRadialElement"
    , EachElement(*this)	// "EachElement"
{
}

void COrientationCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationCharacteristicItemBaseType::COrientationCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(node)
{
}

COrientationCharacteristicItemBaseType::COrientationCharacteristicItemBaseType(COrientationCharacteristicItemBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(other.GetNode())
{
}

void COrientationCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationCharacteristicNominalBaseType::COrientationCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(node)
    , CircularZoneLimit(*this)	// "CircularZoneLimit"
    , DirectionalZoneLimit(*this)	// "DirectionalZoneLimit"
    , RectangularZoneLimit(*this)	// "RectangularZoneLimit"
{
}

COrientationCharacteristicNominalBaseType::COrientationCharacteristicNominalBaseType(COrientationCharacteristicNominalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(other.GetNode())
    , CircularZoneLimit(*this)	// "CircularZoneLimit"
    , DirectionalZoneLimit(*this)	// "DirectionalZoneLimit"
    , RectangularZoneLimit(*this)	// "RectangularZoneLimit"
{
}

void COrientationCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationCharacteristicStatsEvalType::COrientationCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , DatumsOkStats(*this)	// "DatumsOkStats"
    , BonusStats(*this)	// "BonusStats"
    , ReferenceLengthStats(*this)	// "ReferenceLengthStats"
{
}

COrientationCharacteristicStatsEvalType::COrientationCharacteristicStatsEvalType(COrientationCharacteristicStatsEvalType const& other)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , DatumsOkStats(*this)	// "DatumsOkStats"
    , BonusStats(*this)	// "BonusStats"
    , ReferenceLengthStats(*this)	// "ReferenceLengthStats"
{
}

void COrientationCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationDiametricalZoneType::COrientationDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
{
}

COrientationDiametricalZoneType::COrientationDiametricalZoneType(COrientationDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
{
}

void COrientationDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationEnumType::COrientationEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COrientationEnumType::COrientationEnumType(COrientationEnumType const& other)
    : TypeBase(other.GetNode())
{
}


COrientationPlanarZoneType::COrientationPlanarZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
{
}

COrientationPlanarZoneType::COrientationPlanarZoneType(COrientationPlanarZoneType const& other)
    : TypeBase(other.GetNode())
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
{
}

void COrientationPlanarZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationPlanarZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationPlaneEnumType::COrientationPlaneEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COrientationPlaneEnumType::COrientationPlaneEnumType(COrientationPlaneEnumType const& other)
    : TypeBase(other.GetNode())
{
}


COrientationPlaneType::COrientationPlaneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , OrientationPlaneEnum(*this)	// "OrientationPlaneEnum"
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
{
}

COrientationPlaneType::COrientationPlaneType(COrientationPlaneType const& other)
    : TypeBase(other.GetNode())
    , OrientationPlaneEnum(*this)	// "OrientationPlaneEnum"
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
{
}

void COrientationPlaneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationPlaneType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationZoneShapeType::COrientationZoneShapeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DiametricalZone(*this)	// "DiametricalZone"
    , PlanarZone(*this)	// "PlanarZone"
{
}

COrientationZoneShapeType::COrientationZoneShapeType(COrientationZoneShapeType const& other)
    : TypeBase(other.GetNode())
    , DiametricalZone(*this)	// "DiametricalZone"
    , PlanarZone(*this)	// "PlanarZone"
{
}

void COrientationZoneShapeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationZoneShapeType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientedLatitudeLongitudeSweepType::COrientedLatitudeLongitudeSweepType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLatitudeLongitudeSweepType(node)
    , DirNorthPole(*this)	// "DirNorthPole"
{
}

COrientedLatitudeLongitudeSweepType::COrientedLatitudeLongitudeSweepType(COrientedLatitudeLongitudeSweepType const& other)
    : ::qif191::t::CLatitudeLongitudeSweepType(other.GetNode())
    , DirNorthPole(*this)	// "DirNorthPole"
{
}

void COrientedLatitudeLongitudeSweepType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientedLatitudeLongitudeSweepType"), _T("http://qifstandards.org/xsd/qif2"));
}

COriginReferenceType::COriginReferenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureItemId(*this)	// "FeatureItemId"
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
{
}

COriginReferenceType::COriginReferenceType(COriginReferenceType const& other)
    : TypeBase(other.GetNode())
    , FeatureItemId(*this)	// "FeatureItemId"
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , DatumDefinitionId(*this)	// "DatumDefinitionId"
{
}

void COriginReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OriginReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

COtherMeasureFeatureMethodType::COtherMeasureFeatureMethodType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasureFeatureMethodBaseType(node)
{
}

COtherMeasureFeatureMethodType::COtherMeasureFeatureMethodType(COtherMeasureFeatureMethodType const& other)
    : ::qif191::t::CMeasureFeatureMethodBaseType(other.GetNode())
{
}

void COtherMeasureFeatureMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OtherMeasureFeatureMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

COtherUnitsType::COtherUnitsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AreaUnit(*this)	// "AreaUnit"
    , AngularUnit(*this)	// "AngularUnit"
    , ForceUnit(*this)	// "ForceUnit"
    , LinearUnit(*this)	// "LinearUnit"
    , MassUnit(*this)	// "MassUnit"
    , PressureUnit(*this)	// "PressureUnit"
    , SpeedUnit(*this)	// "SpeedUnit"
    , TemperatureUnit(*this)	// "TemperatureUnit"
    , TimeUnit(*this)	// "TimeUnit"
{
}

COtherUnitsType::COtherUnitsType(COtherUnitsType const& other)
    : TypeBase(other.GetNode())
    , AreaUnit(*this)	// "AreaUnit"
    , AngularUnit(*this)	// "AngularUnit"
    , ForceUnit(*this)	// "ForceUnit"
    , LinearUnit(*this)	// "LinearUnit"
    , MassUnit(*this)	// "MassUnit"
    , PressureUnit(*this)	// "PressureUnit"
    , SpeedUnit(*this)	// "SpeedUnit"
    , TemperatureUnit(*this)	// "TemperatureUnit"
    , TimeUnit(*this)	// "TimeUnit"
{
}

void COtherUnitsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OtherUnitsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPMIDisplaySetType::CPMIDisplaySetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PMIDisplay(*this)	// "PMIDisplay"
{
}

CPMIDisplaySetType::CPMIDisplaySetType(CPMIDisplaySetType const& other)
    : TypeBase(other.GetNode())
    , PMIDisplay(*this)	// "PMIDisplay"
{
}

void CPMIDisplaySetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PMIDisplaySetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPMIDisplayType::CPMIDisplayType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Color(*this)	// "Color"
    , Plane(*this)	// "Plane"
    , Texts(*this)	// "Texts"
    , Leader(*this)	// "Leader"
    , LeaderCircular(*this)	// "LeaderCircular"
    , LeaderDoubleHead(*this)	// "LeaderDoubleHead"
    , LeaderDoubleHeadCircular(*this)	// "LeaderDoubleHeadCircular"
    , LeaderDoubleHeadExtend(*this)	// "LeaderDoubleHeadExtend"
    , LeaderExtend(*this)	// "LeaderExtend"
    , WitnessLines(*this)	// "WitnessLines"
    , Frames(*this)	// "Frames"
    , Balloon(*this)	// "Balloon"
    , Reference(*this)	// "Reference"
{
}

CPMIDisplayType::CPMIDisplayType(CPMIDisplayType const& other)
    : TypeBase(other.GetNode())
    , Color(*this)	// "Color"
    , Plane(*this)	// "Plane"
    , Texts(*this)	// "Texts"
    , Leader(*this)	// "Leader"
    , LeaderCircular(*this)	// "LeaderCircular"
    , LeaderDoubleHead(*this)	// "LeaderDoubleHead"
    , LeaderDoubleHeadCircular(*this)	// "LeaderDoubleHeadCircular"
    , LeaderDoubleHeadExtend(*this)	// "LeaderDoubleHeadExtend"
    , LeaderExtend(*this)	// "LeaderExtend"
    , WitnessLines(*this)	// "WitnessLines"
    , Frames(*this)	// "Frames"
    , Balloon(*this)	// "Balloon"
    , Reference(*this)	// "Reference"
{
}

void CPMIDisplayType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PMIDisplayType"), _T("http://qifstandards.org/xsd/qif2"));
}

CParallelismCharacteristicActualType::CParallelismCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicActualBaseType(node)
{
}

CParallelismCharacteristicActualType::CParallelismCharacteristicActualType(CParallelismCharacteristicActualType const& other)
    : ::qif191::t::COrientationCharacteristicActualBaseType(other.GetNode())
{
}

void CParallelismCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ParallelismCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CParallelismCharacteristicDefinitionType::CParallelismCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicDefinitionBaseType(node)
{
}

CParallelismCharacteristicDefinitionType::CParallelismCharacteristicDefinitionType(CParallelismCharacteristicDefinitionType const& other)
    : ::qif191::t::COrientationCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CParallelismCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ParallelismCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CParallelismCharacteristicItemType::CParallelismCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicItemBaseType(node)
{
}

CParallelismCharacteristicItemType::CParallelismCharacteristicItemType(CParallelismCharacteristicItemType const& other)
    : ::qif191::t::COrientationCharacteristicItemBaseType(other.GetNode())
{
}

void CParallelismCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ParallelismCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CParallelismCharacteristicNominalType::CParallelismCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicNominalBaseType(node)
{
}

CParallelismCharacteristicNominalType::CParallelismCharacteristicNominalType(CParallelismCharacteristicNominalType const& other)
    : ::qif191::t::COrientationCharacteristicNominalBaseType(other.GetNode())
{
}

void CParallelismCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ParallelismCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CParallelismCharacteristicStatsEvalType::CParallelismCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicStatsEvalType(node)
{
}

CParallelismCharacteristicStatsEvalType::CParallelismCharacteristicStatsEvalType(CParallelismCharacteristicStatsEvalType const& other)
    : ::qif191::t::COrientationCharacteristicStatsEvalType(other.GetNode())
{
}

void CParallelismCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ParallelismCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CParameterRangeType::CParameterRangeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CParameterRangeType::CParameterRangeType(CParameterRangeType const& other)
    : TypeBase(other.GetNode())
{
}


CPartFamilyType::CPartFamilyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PrimaryShapeClass(*this)	// "PrimaryShapeClass"
    , MinimumTolerance(*this)	// "MinimumTolerance"
    , MinimumBoundingBox(*this)	// "MinimumBoundingBox"
    , PrimaryManufacturingMethod(*this)	// "PrimaryManufacturingMethod"
{
}

CPartFamilyType::CPartFamilyType(CPartFamilyType const& other)
    : TypeBase(other.GetNode())
    , PrimaryShapeClass(*this)	// "PrimaryShapeClass"
    , MinimumTolerance(*this)	// "MinimumTolerance"
    , MinimumBoundingBox(*this)	// "MinimumBoundingBox"
    , PrimaryManufacturingMethod(*this)	// "PrimaryManufacturingMethod"
{
}

void CPartFamilyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartFamilyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPartNoteSetType::CPartNoteSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , PartNote(*this)	// "PartNote"
{
}

CPartNoteSetType::CPartNoteSetType(CPartNoteSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , PartNote(*this)	// "PartNote"
{
}

void CPartNoteSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartNoteSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPartNoteType::CPartNoteType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDrawableBaseType(node)
    , Text(*this)	// "Text"
    , PartNoteIds(*this)	// "PartNoteIds"
{
}

CPartNoteType::CPartNoteType(CPartNoteType const& other)
    : ::qif191::t::CDrawableBaseType(other.GetNode())
    , Text(*this)	// "Text"
    , PartNoteIds(*this)	// "PartNoteIds"
{
}

void CPartNoteType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartNoteType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPartSetType::CPartSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Part(*this)	// "Part"
{
}

CPartSetType::CPartSetType(CPartSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Part(*this)	// "Part"
{
}

void CPartSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPartType::CPartType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProductDefinitionBaseType(node)
    , DefinitionInternal(*this)	// "DefinitionInternal"
    , DefinitionExternal(*this)	// "DefinitionExternal"
    , PartFamily(*this)	// "PartFamily"
{
}

CPartType::CPartType(CPartType const& other)
    : ::qif191::t::CProductDefinitionBaseType(other.GetNode())
    , DefinitionInternal(*this)	// "DefinitionInternal"
    , DefinitionExternal(*this)	// "DefinitionExternal"
    , PartFamily(*this)	// "PartFamily"
{
}

void CPartType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPartialInspectionType::CPartialInspectionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BaselineProductNumber(*this)	// "BaselineProductNumber"
    , BaselineProductVersion(*this)	// "BaselineProductVersion"
    , ReasonForPartialInspection(*this)	// "ReasonForPartialInspection"
{
}

CPartialInspectionType::CPartialInspectionType(CPartialInspectionType const& other)
    : TypeBase(other.GetNode())
    , BaselineProductNumber(*this)	// "BaselineProductNumber"
    , BaselineProductVersion(*this)	// "BaselineProductVersion"
    , ReasonForPartialInspection(*this)	// "ReasonForPartialInspection"
{
}

void CPartialInspectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartialInspectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPartiallyOrderedActionGroupType::CPartiallyOrderedActionGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionGroupBaseType(node)
    , StepsWithPredecessors(*this)	// "StepsWithPredecessors"
{
}

CPartiallyOrderedActionGroupType::CPartiallyOrderedActionGroupType(CPartiallyOrderedActionGroupType const& other)
    : ::qif191::t::CActionGroupBaseType(other.GetNode())
    , StepsWithPredecessors(*this)	// "StepsWithPredecessors"
{
}

void CPartiallyOrderedActionGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PartiallyOrderedActionGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPathTriangulationCoreType::CPathTriangulationCoreType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Edges(*this)	// "Edges"
    , EdgesBinary(*this)	// "EdgesBinary"
{
}

CPathTriangulationCoreType::CPathTriangulationCoreType(CPathTriangulationCoreType const& other)
    : TypeBase(other.GetNode())
    , Edges(*this)	// "Edges"
    , EdgesBinary(*this)	// "EdgesBinary"
{
}

void CPathTriangulationCoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PathTriangulationCoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPathTriangulationType::CPathTriangulationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometryBaseType(node)
    , PathTriangulationCore(*this)	// "PathTriangulationCore"
    , MeshTriangle(*this)	// "MeshTriangle"
{
}

CPathTriangulationType::CPathTriangulationType(CPathTriangulationType const& other)
    : ::qif191::t::CGeometryBaseType(other.GetNode())
    , PathTriangulationCore(*this)	// "PathTriangulationCore"
    , MeshTriangle(*this)	// "MeshTriangle"
{
}

void CPathTriangulationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PathTriangulationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPatternFeatureActualType::CPatternFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureActualBaseType(node)
{
}

CPatternFeatureActualType::CPatternFeatureActualType(CPatternFeatureActualType const& other)
    : ::qif191::t::CCompositeFeatureActualBaseType(other.GetNode())
{
}

void CPatternFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PatternFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPatternFeatureDefinitionType::CPatternFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(node)
{
}

CPatternFeatureDefinitionType::CPatternFeatureDefinitionType(CPatternFeatureDefinitionType const& other)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(other.GetNode())
{
}

void CPatternFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PatternFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPatternFeatureItemType::CPatternFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureItemBaseType(node)
{
}

CPatternFeatureItemType::CPatternFeatureItemType(CPatternFeatureItemType const& other)
    : ::qif191::t::CCompositeFeatureItemBaseType(other.GetNode())
{
}

void CPatternFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PatternFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPatternFeatureNominalType::CPatternFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureNominalBaseType(node)
{
}

CPatternFeatureNominalType::CPatternFeatureNominalType(CPatternFeatureNominalType const& other)
    : ::qif191::t::CCompositeFeatureNominalBaseType(other.GetNode())
{
}

void CPatternFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PatternFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPerpendicularityCharacteristicActualType::CPerpendicularityCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicActualBaseType(node)
{
}

CPerpendicularityCharacteristicActualType::CPerpendicularityCharacteristicActualType(CPerpendicularityCharacteristicActualType const& other)
    : ::qif191::t::COrientationCharacteristicActualBaseType(other.GetNode())
{
}

void CPerpendicularityCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PerpendicularityCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPerpendicularityCharacteristicDefinitionType::CPerpendicularityCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicDefinitionBaseType(node)
{
}

CPerpendicularityCharacteristicDefinitionType::CPerpendicularityCharacteristicDefinitionType(CPerpendicularityCharacteristicDefinitionType const& other)
    : ::qif191::t::COrientationCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CPerpendicularityCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PerpendicularityCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPerpendicularityCharacteristicItemType::CPerpendicularityCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicItemBaseType(node)
{
}

CPerpendicularityCharacteristicItemType::CPerpendicularityCharacteristicItemType(CPerpendicularityCharacteristicItemType const& other)
    : ::qif191::t::COrientationCharacteristicItemBaseType(other.GetNode())
{
}

void CPerpendicularityCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PerpendicularityCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPerpendicularityCharacteristicNominalType::CPerpendicularityCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicNominalBaseType(node)
{
}

CPerpendicularityCharacteristicNominalType::CPerpendicularityCharacteristicNominalType(CPerpendicularityCharacteristicNominalType const& other)
    : ::qif191::t::COrientationCharacteristicNominalBaseType(other.GetNode())
{
}

void CPerpendicularityCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PerpendicularityCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPerpendicularityCharacteristicStatsEvalType::CPerpendicularityCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::COrientationCharacteristicStatsEvalType(node)
{
}

CPerpendicularityCharacteristicStatsEvalType::CPerpendicularityCharacteristicStatsEvalType(CPerpendicularityCharacteristicStatsEvalType const& other)
    : ::qif191::t::COrientationCharacteristicStatsEvalType(other.GetNode())
{
}

void CPerpendicularityCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PerpendicularityCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPhysicalModelType::CPhysicalModelType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
    , Description(*this)	// "Description"
    , Author(*this)	// "Author"
    , Location(*this)	// "Location"
    , ModelNumber(*this)	// "ModelNumber"
{
}

CPhysicalModelType::CPhysicalModelType(CPhysicalModelType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
    , Description(*this)	// "Description"
    , Author(*this)	// "Author"
    , Location(*this)	// "Location"
    , ModelNumber(*this)	// "ModelNumber"
{
}

void CPhysicalModelType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PhysicalModelType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPickSomeActionGroupType::CPickSomeActionGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionGroupBaseType(node)
    , Steps(*this)	// "Steps"
    , NumberOfSteps(*this)	// "NumberOfSteps"
{
}

CPickSomeActionGroupType::CPickSomeActionGroupType(CPickSomeActionGroupType const& other)
    : ::qif191::t::CActionGroupBaseType(other.GetNode())
    , Steps(*this)	// "Steps"
    , NumberOfSteps(*this)	// "NumberOfSteps"
{
}

void CPickSomeActionGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PickSomeActionGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlanElementBaseType::CPlanElementBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , WorkInstructionIds(*this)	// "WorkInstructionIds"
{
}

CPlanElementBaseType::CPlanElementBaseType(CPlanElementBaseType const& other)
    : TypeBase(other.GetNode())
    , WorkInstructionIds(*this)	// "WorkInstructionIds"
{
}

void CPlanElementBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlanElementBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlane23CoreType::CPlane23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , DomainU(*this)	// "@DomainU"
    , DomainV(*this)	// "@DomainV"
    , Origin(*this)	// "Origin"
    , DirU(*this)	// "DirU"
    , DirV(*this)	// "DirV"
{
}

CPlane23CoreType::CPlane23CoreType(CPlane23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , DomainU(*this)	// "@DomainU"
    , DomainV(*this)	// "@DomainV"
    , Origin(*this)	// "Origin"
    , DirU(*this)	// "DirU"
    , DirV(*this)	// "DirV"
{
}

void CPlane23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Plane23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlane23Type::CPlane23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Plane23Core(*this)	// "Plane23Core"
    , Transform(*this)	// "Transform"
{
}

CPlane23Type::CPlane23Type(CPlane23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Plane23Core(*this)	// "Plane23Core"
    , Transform(*this)	// "Transform"
{
}

void CPlane23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Plane23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneActualDeterminationType::CPlaneActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CPlaneActualDeterminationType::CPlaneActualDeterminationType(CPlaneActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CPlaneActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneBestFitType::CPlaneBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPlaneBestFitType::CPlaneBestFitType(CPlaneBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPlaneBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneCastType::CPlaneCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPlaneCastType::CPlaneCastType(CPlaneCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPlaneCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneCheckedFeatureType::CPlaneCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CPlaneCheckedFeatureType::CPlaneCheckedFeatureType(CPlaneCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CPlaneCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneCheckedType::CPlaneCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CPlaneCheckedType::CPlaneCheckedType(CPlaneCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CPlaneCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneClippingType::CPlaneClippingType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAuxiliaryPlaneBaseType(node)
    , Index(*this)	// "@Index"
    , Enable(*this)	// "@Enable"
{
}

CPlaneClippingType::CPlaneClippingType(CPlaneClippingType const& other)
    : ::qif191::t::CAuxiliaryPlaneBaseType(other.GetNode())
    , Index(*this)	// "@Index"
    , Enable(*this)	// "@Enable"
{
}

void CPlaneClippingType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneClippingType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneConstructionMethodType::CPlaneConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Midplane(*this)	// "Midplane"
    , Offset(*this)	// "Offset"
    , Perpendicular(*this)	// "Perpendicular"
    , Parallel(*this)	// "Parallel"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , TangentThrough(*this)	// "TangentThrough"
    , Transform(*this)	// "Transform"
    , Extract(*this)	// "Extract"
{
}

CPlaneConstructionMethodType::CPlaneConstructionMethodType(CPlaneConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Midplane(*this)	// "Midplane"
    , Offset(*this)	// "Offset"
    , Perpendicular(*this)	// "Perpendicular"
    , Parallel(*this)	// "Parallel"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , TangentThrough(*this)	// "TangentThrough"
    , Transform(*this)	// "Transform"
    , Extract(*this)	// "Extract"
{
}

void CPlaneConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneCopyType::CPlaneCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePlane(*this)	// "BasePlane"
{
}

CPlaneCopyType::CPlaneCopyType(CPlaneCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePlane(*this)	// "BasePlane"
{
}

void CPlaneCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneExtractType::CPlaneExtractType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
{
}

CPlaneExtractType::CPlaneExtractType(CPlaneExtractType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
{
}

void CPlaneExtractType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneExtractType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneFeatureActualType::CPlaneFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , PolyLine(*this)	// "PolyLine"
    , Form(*this)	// "Form"
{
}

CPlaneFeatureActualType::CPlaneFeatureActualType(CPlaneFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , PolyLine(*this)	// "PolyLine"
    , Form(*this)	// "Form"
{
}

void CPlaneFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneFeatureDefinitionType::CPlaneFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CPlaneFeatureDefinitionType::CPlaneFeatureDefinitionType(CPlaneFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CPlaneFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneFeatureItemType::CPlaneFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CPlaneFeatureItemType::CPlaneFeatureItemType(CPlaneFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CPlaneFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneFeatureNominalType::CPlaneFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , PolyLine(*this)	// "PolyLine"
{
}

CPlaneFeatureNominalType::CPlaneFeatureNominalType(CPlaneFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
    , PolyLine(*this)	// "PolyLine"
{
}

void CPlaneFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneMidplaneType::CPlaneMidplaneType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePlane(*this)	// "BasePlane"
{
}

CPlaneMidplaneType::CPlaneMidplaneType(CPlaneMidplaneType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePlane(*this)	// "BasePlane"
{
}

void CPlaneMidplaneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneMidplaneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneOffsetType::CPlaneOffsetType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePlane(*this)	// "BasePlane"
    , Offset(*this)	// "Offset"
{
}

CPlaneOffsetType::CPlaneOffsetType(CPlaneOffsetType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePlane(*this)	// "BasePlane"
    , Offset(*this)	// "Offset"
{
}

void CPlaneOffsetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneOffsetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneParallelType::CPlaneParallelType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ParallelFeature(*this)	// "ParallelFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CPlaneParallelType::CPlaneParallelType(CPlaneParallelType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ParallelFeature(*this)	// "ParallelFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CPlaneParallelType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneParallelType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlanePerpendicularType::CPlanePerpendicularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , PerpendicularFeature(*this)	// "PerpendicularFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CPlanePerpendicularType::CPlanePerpendicularType(CPlanePerpendicularType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , PerpendicularFeature(*this)	// "PerpendicularFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CPlanePerpendicularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlanePerpendicularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlanePointSamplingStrategyEnumType::CPlanePointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPlanePointSamplingStrategyEnumType::CPlanePointSamplingStrategyEnumType(CPlanePointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CPlanePointSamplingStrategyType::CPlanePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CPlanePointSamplingStrategyType::CPlanePointSamplingStrategyType(CPlanePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CPlanePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlanePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneRecompType::CPlaneRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CPlaneRecompType::CPlaneRecompType(CPlaneRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CPlaneRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneReferenceType::CPlaneReferenceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAuxiliaryPlaneBaseType(node)
{
}

CPlaneReferenceType::CPlaneReferenceType(CPlaneReferenceType const& other)
    : ::qif191::t::CAuxiliaryPlaneBaseType(other.GetNode())
{
}

void CPlaneReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneTangentThroughType::CPlaneTangentThroughType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , TangentFeature(*this)	// "TangentFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

CPlaneTangentThroughType::CPlaneTangentThroughType(CPlaneTangentThroughType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , TangentFeature(*this)	// "TangentFeature"
    , PointFeature(*this)	// "PointFeature"
{
}

void CPlaneTangentThroughType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneTangentThroughType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneTransformType::CPlaneTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePlane(*this)	// "BasePlane"
    , Transformation(*this)	// "Transformation"
{
}

CPlaneTransformType::CPlaneTransformType(CPlaneTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePlane(*this)	// "BasePlane"
    , Transformation(*this)	// "Transformation"
{
}

void CPlaneTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneType::CPlaneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

CPlaneType::CPlaneType(CPlaneType const& other)
    : TypeBase(other.GetNode())
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

void CPlaneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlaneXType::CPlaneXType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPlaneType(node)
    , Direction(*this)	// "Direction"
{
}

CPlaneXType::CPlaneXType(CPlaneXType const& other)
    : ::qif191::t::CPlaneType(other.GetNode())
    , Direction(*this)	// "Direction"
{
}

void CPlaneXType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlaneXType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlusType::CPlusType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(node)
{
}

CPlusType::CPlusType(CPlusType const& other)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(other.GetNode())
{
}

void CPlusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPoint2dSimpleType::CPoint2dSimpleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPoint2dSimpleType::CPoint2dSimpleType(CPoint2dSimpleType const& other)
    : TypeBase(other.GetNode())
{
}


CPointAccuracyTestType::CPointAccuracyTestType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCMMAccuracyTestBaseType(node)
    , Accuracy(*this)	// "Accuracy"
{
}

CPointAccuracyTestType::CPointAccuracyTestType(CPointAccuracyTestType const& other)
    : ::qif191::t::CCMMAccuracyTestBaseType(other.GetNode())
    , Accuracy(*this)	// "Accuracy"
{
}

void CPointAccuracyTestType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointAccuracyTestType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointActualDeterminationType::CPointActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CPointActualDeterminationType::CPointActualDeterminationType(CPointActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CPointActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointAndVectorType::CPointAndVectorType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StartPoint(*this)	// "StartPoint"
    , Vector(*this)	// "Vector"
{
}

CPointAndVectorType::CPointAndVectorType(CPointAndVectorType const& other)
    : TypeBase(other.GetNode())
    , StartPoint(*this)	// "StartPoint"
    , Vector(*this)	// "Vector"
{
}

void CPointAndVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointAndVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointAuxiliaryType::CPointAuxiliaryType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAuxiliaryBaseType(node)
    , XYZ(*this)	// "XYZ"
{
}

CPointAuxiliaryType::CPointAuxiliaryType(CPointAuxiliaryType const& other)
    : ::qif191::t::CAuxiliaryBaseType(other.GetNode())
    , XYZ(*this)	// "XYZ"
{
}

void CPointAuxiliaryType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointAuxiliaryType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointCheckedFeatureType::CPointCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CPointCheckedFeatureType::CPointCheckedFeatureType(CPointCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CPointCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointCheckedType::CPointCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CPointCheckedType::CPointCheckedType(CPointCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CPointCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointCloudSetType::CPointCloudSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , PointCloud(*this)	// "PointCloud"
{
}

CPointCloudSetType::CPointCloudSetType(CPointCloudSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , PointCloud(*this)	// "PointCloud"
{
}

void CPointCloudSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointCloudSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointCloudType::CPointCloudType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
    , Points(*this)	// "Points"
    , PointsBinary(*this)	// "PointsBinary"
    , Normals(*this)	// "Normals"
    , NormalsBinary(*this)	// "NormalsBinary"
    , PointsVisible(*this)	// "PointsVisible"
    , PointsVisibleBinary(*this)	// "PointsVisibleBinary"
    , PointsHidden(*this)	// "PointsHidden"
    , PointsHiddenBinary(*this)	// "PointsHiddenBinary"
    , PointsColor(*this)	// "PointsColor"
    , PointsColorBinary(*this)	// "PointsColorBinary"
{
}

CPointCloudType::CPointCloudType(CPointCloudType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
    , Points(*this)	// "Points"
    , PointsBinary(*this)	// "PointsBinary"
    , Normals(*this)	// "Normals"
    , NormalsBinary(*this)	// "NormalsBinary"
    , PointsVisible(*this)	// "PointsVisible"
    , PointsVisibleBinary(*this)	// "PointsVisibleBinary"
    , PointsHidden(*this)	// "PointsHidden"
    , PointsHiddenBinary(*this)	// "PointsHiddenBinary"
    , PointsColor(*this)	// "PointsColor"
    , PointsColorBinary(*this)	// "PointsColorBinary"
{
}

void CPointCloudType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointCloudType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointConstructionMethodType::CPointConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromCone(*this)	// "FromCone"
    , FromScan(*this)	// "FromScan"
    , CenterOfGravity(*this)	// "CenterOfGravity"
    , Pierce(*this)	// "Pierce"
    , MidPoint(*this)	// "MidPoint"
    , MovePoint(*this)	// "MovePoint"
    , MovePointVector(*this)	// "MovePointVector"
    , MovePointAxis(*this)	// "MovePointAxis"
    , Extreme(*this)	// "Extreme"
{
}

CPointConstructionMethodType::CPointConstructionMethodType(CPointConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , Intersection(*this)	// "Intersection"
    , Projection(*this)	// "Projection"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromCone(*this)	// "FromCone"
    , FromScan(*this)	// "FromScan"
    , CenterOfGravity(*this)	// "CenterOfGravity"
    , Pierce(*this)	// "Pierce"
    , MidPoint(*this)	// "MidPoint"
    , MovePoint(*this)	// "MovePoint"
    , MovePointVector(*this)	// "MovePointVector"
    , MovePointAxis(*this)	// "MovePointAxis"
    , Extreme(*this)	// "Extreme"
{
}

void CPointConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveActualDeterminationType::CPointDefinedCurveActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CPointDefinedCurveActualDeterminationType::CPointDefinedCurveActualDeterminationType(CPointDefinedCurveActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CPointDefinedCurveActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveBestFitType::CPointDefinedCurveBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPointDefinedCurveBestFitType::CPointDefinedCurveBestFitType(CPointDefinedCurveBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPointDefinedCurveBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveCheckedFeatureType::CPointDefinedCurveCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CPointDefinedCurveCheckedFeatureType::CPointDefinedCurveCheckedFeatureType(CPointDefinedCurveCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CPointDefinedCurveCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveCheckedType::CPointDefinedCurveCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CPointDefinedCurveCheckedType::CPointDefinedCurveCheckedType(CPointDefinedCurveCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CPointDefinedCurveCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveConstructionMethodType::CPointDefinedCurveConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
    , Extract(*this)	// "Extract"
{
}

CPointDefinedCurveConstructionMethodType::CPointDefinedCurveConstructionMethodType(CPointDefinedCurveConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
    , Extract(*this)	// "Extract"
{
}

void CPointDefinedCurveConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveCopyType::CPointDefinedCurveCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePointDefinedCurve(*this)	// "BasePointDefinedCurve"
{
}

CPointDefinedCurveCopyType::CPointDefinedCurveCopyType(CPointDefinedCurveCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePointDefinedCurve(*this)	// "BasePointDefinedCurve"
{
}

void CPointDefinedCurveCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveExtractType::CPointDefinedCurveExtractType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , CurveFeature(*this)	// "CurveFeature"
{
}

CPointDefinedCurveExtractType::CPointDefinedCurveExtractType(CPointDefinedCurveExtractType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , CurveFeature(*this)	// "CurveFeature"
{
}

void CPointDefinedCurveExtractType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveExtractType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveFeatureActualType::CPointDefinedCurveFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , DefiningPoints(*this)	// "DefiningPoints"
    , Plane(*this)	// "Plane"
    , Form(*this)	// "Form"
{
}

CPointDefinedCurveFeatureActualType::CPointDefinedCurveFeatureActualType(CPointDefinedCurveFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , DefiningPoints(*this)	// "DefiningPoints"
    , Plane(*this)	// "Plane"
    , Form(*this)	// "Form"
{
}

void CPointDefinedCurveFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveFeatureDefinitionType::CPointDefinedCurveFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CPointDefinedCurveFeatureDefinitionType::CPointDefinedCurveFeatureDefinitionType(CPointDefinedCurveFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CPointDefinedCurveFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveFeatureItemType::CPointDefinedCurveFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CPointDefinedCurveFeatureItemType::CPointDefinedCurveFeatureItemType(CPointDefinedCurveFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CPointDefinedCurveFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveFeatureNominalType::CPointDefinedCurveFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , DefiningPoints(*this)	// "DefiningPoints"
    , Plane(*this)	// "Plane"
{
}

CPointDefinedCurveFeatureNominalType::CPointDefinedCurveFeatureNominalType(CPointDefinedCurveFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , DefiningPoints(*this)	// "DefiningPoints"
    , Plane(*this)	// "Plane"
{
}

void CPointDefinedCurveFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveFromScanType::CPointDefinedCurveFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

CPointDefinedCurveFromScanType::CPointDefinedCurveFromScanType(CPointDefinedCurveFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

void CPointDefinedCurveFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurvePointSamplingStrategyType::CPointDefinedCurvePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CPointDefinedCurvePointSamplingStrategyType::CPointDefinedCurvePointSamplingStrategyType(CPointDefinedCurvePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CPointDefinedCurvePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurvePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveRecompType::CPointDefinedCurveRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CPointDefinedCurveRecompType::CPointDefinedCurveRecompType(CPointDefinedCurveRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CPointDefinedCurveRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedCurveTransformType::CPointDefinedCurveTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePointDefinedCurve(*this)	// "BasePointDefinedCurve"
    , Transformation(*this)	// "Transformation"
{
}

CPointDefinedCurveTransformType::CPointDefinedCurveTransformType(CPointDefinedCurveTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePointDefinedCurve(*this)	// "BasePointDefinedCurve"
    , Transformation(*this)	// "Transformation"
{
}

void CPointDefinedCurveTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedCurveTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedPointSamplingStrategyEnumType::CPointDefinedPointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointDefinedPointSamplingStrategyEnumType::CPointDefinedPointSamplingStrategyEnumType(CPointDefinedPointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CPointDefinedSurfaceActualDeterminationType::CPointDefinedSurfaceActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CPointDefinedSurfaceActualDeterminationType::CPointDefinedSurfaceActualDeterminationType(CPointDefinedSurfaceActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CPointDefinedSurfaceActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceBestFitType::CPointDefinedSurfaceBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPointDefinedSurfaceBestFitType::CPointDefinedSurfaceBestFitType(CPointDefinedSurfaceBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPointDefinedSurfaceBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceCheckedFeatureType::CPointDefinedSurfaceCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CPointDefinedSurfaceCheckedFeatureType::CPointDefinedSurfaceCheckedFeatureType(CPointDefinedSurfaceCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CPointDefinedSurfaceCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceCheckedType::CPointDefinedSurfaceCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CPointDefinedSurfaceCheckedType::CPointDefinedSurfaceCheckedType(CPointDefinedSurfaceCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CPointDefinedSurfaceCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceConstructionMethodType::CPointDefinedSurfaceConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Transform(*this)	// "Transform"
    , Extract(*this)	// "Extract"
{
}

CPointDefinedSurfaceConstructionMethodType::CPointDefinedSurfaceConstructionMethodType(CPointDefinedSurfaceConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Transform(*this)	// "Transform"
    , Extract(*this)	// "Extract"
{
}

void CPointDefinedSurfaceConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceCopyType::CPointDefinedSurfaceCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePointDefinedSurface(*this)	// "BasePointDefinedSurface"
{
}

CPointDefinedSurfaceCopyType::CPointDefinedSurfaceCopyType(CPointDefinedSurfaceCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePointDefinedSurface(*this)	// "BasePointDefinedSurface"
{
}

void CPointDefinedSurfaceCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceExtractType::CPointDefinedSurfaceExtractType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
{
}

CPointDefinedSurfaceExtractType::CPointDefinedSurfaceExtractType(CPointDefinedSurfaceExtractType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
{
}

void CPointDefinedSurfaceExtractType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceExtractType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceFeatureActualType::CPointDefinedSurfaceFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , DefiningPoints(*this)	// "DefiningPoints"
    , Form(*this)	// "Form"
{
}

CPointDefinedSurfaceFeatureActualType::CPointDefinedSurfaceFeatureActualType(CPointDefinedSurfaceFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , DefiningPoints(*this)	// "DefiningPoints"
    , Form(*this)	// "Form"
{
}

void CPointDefinedSurfaceFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceFeatureDefinitionType::CPointDefinedSurfaceFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CPointDefinedSurfaceFeatureDefinitionType::CPointDefinedSurfaceFeatureDefinitionType(CPointDefinedSurfaceFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CPointDefinedSurfaceFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceFeatureItemType::CPointDefinedSurfaceFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CPointDefinedSurfaceFeatureItemType::CPointDefinedSurfaceFeatureItemType(CPointDefinedSurfaceFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CPointDefinedSurfaceFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceFeatureNominalType::CPointDefinedSurfaceFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , DefiningPoints(*this)	// "DefiningPoints"
{
}

CPointDefinedSurfaceFeatureNominalType::CPointDefinedSurfaceFeatureNominalType(CPointDefinedSurfaceFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , DefiningPoints(*this)	// "DefiningPoints"
{
}

void CPointDefinedSurfaceFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfacePointSamplingStrategyType::CPointDefinedSurfacePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CPointDefinedSurfacePointSamplingStrategyType::CPointDefinedSurfacePointSamplingStrategyType(CPointDefinedSurfacePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CPointDefinedSurfacePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfacePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceRecompType::CPointDefinedSurfaceRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CPointDefinedSurfaceRecompType::CPointDefinedSurfaceRecompType(CPointDefinedSurfaceRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CPointDefinedSurfaceRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedSurfaceTransformType::CPointDefinedSurfaceTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePointDefinedSurface(*this)	// "BasePointDefinedSurface"
    , Transformation(*this)	// "Transformation"
{
}

CPointDefinedSurfaceTransformType::CPointDefinedSurfaceTransformType(CPointDefinedSurfaceTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePointDefinedSurface(*this)	// "BasePointDefinedSurface"
    , Transformation(*this)	// "Transformation"
{
}

void CPointDefinedSurfaceTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedSurfaceTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDeviationStatsEvalType::CPointDeviationStatsEvalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MeasurePointActualIds(*this)	// "MeasurePointActualIds"
    , DeviationStats(*this)	// "DeviationStats"
{
}

CPointDeviationStatsEvalType::CPointDeviationStatsEvalType(CPointDeviationStatsEvalType const& other)
    : TypeBase(other.GetNode())
    , MeasurePointActualIds(*this)	// "MeasurePointActualIds"
    , DeviationStats(*this)	// "DeviationStats"
{
}

void CPointDeviationStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDeviationStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDeviationType::CPointDeviationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MeasurePointActualId(*this)	// "MeasurePointActualId"
    , Deviation(*this)	// "Deviation"
{
}

CPointDeviationType::CPointDeviationType(CPointDeviationType const& other)
    : TypeBase(other.GetNode())
    , MeasurePointActualId(*this)	// "MeasurePointActualId"
    , Deviation(*this)	// "Deviation"
{
}

void CPointDeviationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDeviationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDeviationsStatsEvalType::CPointDeviationsStatsEvalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointDeviationStats(*this)	// "PointDeviationStats"
{
}

CPointDeviationsStatsEvalType::CPointDeviationsStatsEvalType(CPointDeviationsStatsEvalType const& other)
    : TypeBase(other.GetNode())
    , PointDeviationStats(*this)	// "PointDeviationStats"
{
}

void CPointDeviationsStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDeviationsStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDeviationsType::CPointDeviationsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointDeviation(*this)	// "PointDeviation"
{
}

CPointDeviationsType::CPointDeviationsType(CPointDeviationsType const& other)
    : TypeBase(other.GetNode())
    , PointDeviation(*this)	// "PointDeviation"
{
}

void CPointDeviationsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDeviationsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointEntityType::CPointEntityType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometryBaseType(node)
    , XYZ(*this)	// "XYZ"
{
}

CPointEntityType::CPointEntityType(CPointEntityType const& other)
    : ::qif191::t::CGeometryBaseType(other.GetNode())
    , XYZ(*this)	// "XYZ"
{
}

void CPointEntityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointEntityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureActualType::CPointFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
{
}

CPointFeatureActualType::CPointFeatureActualType(CPointFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
{
}

void CPointFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureCastType::CPointFeatureCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPointFeatureCastType::CPointFeatureCastType(CPointFeatureCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPointFeatureCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureCenterOfGravityType::CPointFeatureCenterOfGravityType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPointFeatureCenterOfGravityType::CPointFeatureCenterOfGravityType(CPointFeatureCenterOfGravityType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPointFeatureCenterOfGravityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureCenterOfGravityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureCopyType::CPointFeatureCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePointFeature(*this)	// "BasePointFeature"
{
}

CPointFeatureCopyType::CPointFeatureCopyType(CPointFeatureCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePointFeature(*this)	// "BasePointFeature"
{
}

void CPointFeatureCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureDefinitionType::CPointFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
{
}

CPointFeatureDefinitionType::CPointFeatureDefinitionType(CPointFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
{
}

void CPointFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureExtremeType::CPointFeatureExtremeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
    , Minimum(*this)	// "Minimum"
    , BaseAxisFeature(*this)	// "BaseAxisFeature"
    , Vector(*this)	// "Vector"
    , Radial(*this)	// "Radial"
    , Xaxis(*this)	// "Xaxis"
    , Yaxis(*this)	// "Yaxis"
    , Zaxis(*this)	// "Zaxis"
{
}

CPointFeatureExtremeType::CPointFeatureExtremeType(CPointFeatureExtremeType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
    , Minimum(*this)	// "Minimum"
    , BaseAxisFeature(*this)	// "BaseAxisFeature"
    , Vector(*this)	// "Vector"
    , Radial(*this)	// "Radial"
    , Xaxis(*this)	// "Xaxis"
    , Yaxis(*this)	// "Yaxis"
    , Zaxis(*this)	// "Zaxis"
{
}

void CPointFeatureExtremeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureExtremeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureFromConeType::CPointFeatureFromConeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCone(*this)	// "BaseCone"
{
}

CPointFeatureFromConeType::CPointFeatureFromConeType(CPointFeatureFromConeType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCone(*this)	// "BaseCone"
{
}

void CPointFeatureFromConeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureFromConeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureFromScanType::CPointFeatureFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , RetrievalMethod(*this)	// "RetrievalMethod"
{
}

CPointFeatureFromScanType::CPointFeatureFromScanType(CPointFeatureFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , RetrievalMethod(*this)	// "RetrievalMethod"
{
}

void CPointFeatureFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureIntersectionType::CPointFeatureIntersectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , IntersectionFeature(*this)	// "IntersectionFeature"
{
}

CPointFeatureIntersectionType::CPointFeatureIntersectionType(CPointFeatureIntersectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , IntersectionFeature(*this)	// "IntersectionFeature"
{
}

void CPointFeatureIntersectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureIntersectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureItemType::CPointFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
{
}

CPointFeatureItemType::CPointFeatureItemType(CPointFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
{
}

void CPointFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureMidPointType::CPointFeatureMidPointType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CPointFeatureMidPointType::CPointFeatureMidPointType(CPointFeatureMidPointType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CPointFeatureMidPointType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureMidPointType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureMovePointAxisType::CPointFeatureMovePointAxisType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseLocationFeature(*this)	// "BaseLocationFeature"
    , Distance(*this)	// "Distance"
    , BaseAxisFeature(*this)	// "BaseAxisFeature"
{
}

CPointFeatureMovePointAxisType::CPointFeatureMovePointAxisType(CPointFeatureMovePointAxisType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseLocationFeature(*this)	// "BaseLocationFeature"
    , Distance(*this)	// "Distance"
    , BaseAxisFeature(*this)	// "BaseAxisFeature"
{
}

void CPointFeatureMovePointAxisType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureMovePointAxisType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureMovePointType::CPointFeatureMovePointType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
    , Offset(*this)	// "Offset"
    , DirectionalOffset(*this)	// "DirectionalOffset"
{
}

CPointFeatureMovePointType::CPointFeatureMovePointType(CPointFeatureMovePointType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
    , Offset(*this)	// "Offset"
    , DirectionalOffset(*this)	// "DirectionalOffset"
{
}

void CPointFeatureMovePointType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureMovePointType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureMovePointVectorType::CPointFeatureMovePointVectorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
    , Distance(*this)	// "Distance"
    , Vector(*this)	// "Vector"
{
}

CPointFeatureMovePointVectorType::CPointFeatureMovePointVectorType(CPointFeatureMovePointVectorType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
    , Distance(*this)	// "Distance"
    , Vector(*this)	// "Vector"
{
}

void CPointFeatureMovePointVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureMovePointVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureNominalType::CPointFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
{
}

CPointFeatureNominalType::CPointFeatureNominalType(CPointFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Normal(*this)	// "Normal"
{
}

void CPointFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeaturePierceType::CPointFeaturePierceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , CurveFeature(*this)	// "CurveFeature"
{
}

CPointFeaturePierceType::CPointFeaturePierceType(CPointFeaturePierceType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , CurveFeature(*this)	// "CurveFeature"
{
}

void CPointFeaturePierceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeaturePierceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureProjectionType::CPointFeatureProjectionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , ProjectionPlane(*this)	// "ProjectionPlane"
    , ProjectionFeature(*this)	// "ProjectionFeature"
{
}

CPointFeatureProjectionType::CPointFeatureProjectionType(CPointFeatureProjectionType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , ProjectionPlane(*this)	// "ProjectionPlane"
    , ProjectionFeature(*this)	// "ProjectionFeature"
{
}

void CPointFeatureProjectionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureProjectionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointFeatureTransformType::CPointFeatureTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BasePointFeature(*this)	// "BasePointFeature"
    , Transformation(*this)	// "Transformation"
{
}

CPointFeatureTransformType::CPointFeatureTransformType(CPointFeatureTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BasePointFeature(*this)	// "BasePointFeature"
    , Transformation(*this)	// "Transformation"
{
}

void CPointFeatureTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointFeatureTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointIndexType::CPointIndexType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Single(*this)	// "Single"
    , Range(*this)	// "Range"
    , All(*this)	// "All"
{
}

CPointIndexType::CPointIndexType(CPointIndexType const& other)
    : TypeBase(other.GetNode())
    , Single(*this)	// "Single"
    , Range(*this)	// "Range"
    , All(*this)	// "All"
{
}

void CPointIndexType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointIndexType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointListActualType::CPointListActualType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
    , MeasurePoint(*this)	// "MeasurePoint"
{
}

CPointListActualType::CPointListActualType(CPointListActualType const& other)
    : TypeBase(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
    , MeasurePoint(*this)	// "MeasurePoint"
{
}

void CPointListActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointListActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointListNominalType::CPointListNominalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , MeasurePoint(*this)	// "MeasurePoint"
{
}

CPointListNominalType::CPointListNominalType(CPointListNominalType const& other)
    : TypeBase(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , MeasurePoint(*this)	// "MeasurePoint"
{
}

void CPointListNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointListNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointPointSamplingStrategyEnumType::CPointPointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointPointSamplingStrategyEnumType::CPointPointSamplingStrategyEnumType(CPointPointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CPointPointSamplingStrategyType::CPointPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CPointPointSamplingStrategyType::CPointPointSamplingStrategyType(CPointPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CPointPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointProfileCharacteristicActualType::CPointProfileCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicActualBaseType(node)
{
}

CPointProfileCharacteristicActualType::CPointProfileCharacteristicActualType(CPointProfileCharacteristicActualType const& other)
    : ::qif191::t::CProfileCharacteristicActualBaseType(other.GetNode())
{
}

void CPointProfileCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointProfileCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointProfileCharacteristicDefinitionType::CPointProfileCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(node)
{
}

CPointProfileCharacteristicDefinitionType::CPointProfileCharacteristicDefinitionType(CPointProfileCharacteristicDefinitionType const& other)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CPointProfileCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointProfileCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointProfileCharacteristicItemType::CPointProfileCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicItemBaseType(node)
{
}

CPointProfileCharacteristicItemType::CPointProfileCharacteristicItemType(CPointProfileCharacteristicItemType const& other)
    : ::qif191::t::CProfileCharacteristicItemBaseType(other.GetNode())
{
}

void CPointProfileCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointProfileCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointProfileCharacteristicNominalType::CPointProfileCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(node)
{
}

CPointProfileCharacteristicNominalType::CPointProfileCharacteristicNominalType(CPointProfileCharacteristicNominalType const& other)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(other.GetNode())
{
}

void CPointProfileCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointProfileCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointProfileCharacteristicStatsEvalType::CPointProfileCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(node)
{
}

CPointProfileCharacteristicStatsEvalType::CPointProfileCharacteristicStatsEvalType(CPointProfileCharacteristicStatsEvalType const& other)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CPointProfileCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointProfileCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointRangeType::CPointRangeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Start(*this)	// "Start"
    , Stop(*this)	// "Stop"
{
}

CPointRangeType::CPointRangeType(CPointRangeType const& other)
    : TypeBase(other.GetNode())
    , Start(*this)	// "Start"
    , Stop(*this)	// "Stop"
{
}

void CPointRangeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointRangeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointRuleBaseType::CPointRuleBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CQIFRuleBaseType(node)
{
}

CPointRuleBaseType::CPointRuleBaseType(CPointRuleBaseType const& other)
    : ::qif191::t::CQIFRuleBaseType(other.GetNode())
{
}

void CPointRuleBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointRuleBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointSamplingStrategyEnumBaseType::CPointSamplingStrategyEnumBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointSamplingStrategyEnumBaseType::CPointSamplingStrategyEnumBaseType(CPointSamplingStrategyEnumBaseType const& other)
    : TypeBase(other.GetNode())
{
}


CPointSetType::CPointSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Point(*this)	// "Point"
{
}

CPointSetType::CPointSetType(CPointSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Point(*this)	// "Point"
{
}

void CPointSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointSimpleType::CPointSimpleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointSimpleType::CPointSimpleType(CPointSimpleType const& other)
    : TypeBase(other.GetNode())
{
}


CPointType::CPointType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPointSimpleTypeType(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

CPointType::CPointType(CPointType const& other)
    : ::qif191::t::CPointSimpleTypeType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

void CPointType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointWithNameType::CPointWithNameType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Point(*this)	// "Point"
    , Name(*this)	// "Name"
{
}

CPointWithNameType::CPointWithNameType(CPointWithNameType const& other)
    : TypeBase(other.GetNode())
    , Point(*this)	// "Point"
    , Name(*this)	// "Name"
{
}

void CPointWithNameType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointWithNameType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointWithNormalBaseType::CPointWithNormalBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

CPointWithNormalBaseType::CPointWithNormalBaseType(CPointWithNormalBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Point(*this)	// "Point"
    , Normal(*this)	// "Normal"
{
}

void CPointWithNormalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointWithNormalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPolyLineType::CPolyLineType(xercesc::DOMNode* const& node)
    : ::qif191::t::CArrayPointType(node)
{
}

CPolyLineType::CPolyLineType(CPolyLineType const& other)
    : ::qif191::t::CArrayPointType(other.GetNode())
{
}

void CPolyLineType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PolyLineType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPolyline12CoreType::CPolyline12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Points(*this)	// "Points"
    , PointsBinary(*this)	// "PointsBinary"
{
}

CPolyline12CoreType::CPolyline12CoreType(CPolyline12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Points(*this)	// "Points"
    , PointsBinary(*this)	// "PointsBinary"
{
}

void CPolyline12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Polyline12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPolyline12Type::CPolyline12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , Polyline12Core(*this)	// "Polyline12Core"
{
}

CPolyline12Type::CPolyline12Type(CPolyline12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , Polyline12Core(*this)	// "Polyline12Core"
{
}

void CPolyline12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Polyline12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CPolyline13CoreType::CPolyline13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Points(*this)	// "Points"
    , PointsBinary(*this)	// "PointsBinary"
{
}

CPolyline13CoreType::CPolyline13CoreType(CPolyline13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Points(*this)	// "Points"
    , PointsBinary(*this)	// "PointsBinary"
{
}

void CPolyline13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Polyline13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPolyline13Type::CPolyline13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , Polyline13Core(*this)	// "Polyline13Core"
    , Transform(*this)	// "Transform"
{
}

CPolyline13Type::CPolyline13Type(CPolyline13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , Polyline13Core(*this)	// "Polyline13Core"
    , Transform(*this)	// "Transform"
{
}

void CPolyline13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Polyline13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionCapabilityCalculationEnumType::CPositionCapabilityCalculationEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPositionCapabilityCalculationEnumType::CPositionCapabilityCalculationEnumType(CPositionCapabilityCalculationEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CPositionCharacteristicActualType::CPositionCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicActualBaseType(node)
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
    , SecondCompositeSegmentPositionActual(*this)	// "SecondCompositeSegmentPositionActual"
    , ThirdCompositeSegmentPositionActual(*this)	// "ThirdCompositeSegmentPositionActual"
    , FourthCompositeSegmentPositionActual(*this)	// "FourthCompositeSegmentPositionActual"
{
}

CPositionCharacteristicActualType::CPositionCharacteristicActualType(CPositionCharacteristicActualType const& other)
    : ::qif191::t::CLocationCharacteristicActualBaseType(other.GetNode())
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
    , SecondCompositeSegmentPositionActual(*this)	// "SecondCompositeSegmentPositionActual"
    , ThirdCompositeSegmentPositionActual(*this)	// "ThirdCompositeSegmentPositionActual"
    , FourthCompositeSegmentPositionActual(*this)	// "FourthCompositeSegmentPositionActual"
{
}

void CPositionCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionCharacteristicDefinitionType::CPositionCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicDefinitionBaseType(node)
    , MaterialCondition(*this)	// "MaterialCondition"
    , ZoneShape(*this)	// "ZoneShape"
    , ProjectedToleranceZoneValue(*this)	// "ProjectedToleranceZoneValue"
    , SecondCompositeSegmentPositionDefinition(*this)	// "SecondCompositeSegmentPositionDefinition"
    , ThirdCompositeSegmentPositionDefinition(*this)	// "ThirdCompositeSegmentPositionDefinition"
    , FourthCompositeSegmentPositionDefinition(*this)	// "FourthCompositeSegmentPositionDefinition"
    , ToPointToleranceValue(*this)	// "ToPointToleranceValue"
    , OrientationOnly(*this)	// "OrientationOnly"
{
}

CPositionCharacteristicDefinitionType::CPositionCharacteristicDefinitionType(CPositionCharacteristicDefinitionType const& other)
    : ::qif191::t::CLocationCharacteristicDefinitionBaseType(other.GetNode())
    , MaterialCondition(*this)	// "MaterialCondition"
    , ZoneShape(*this)	// "ZoneShape"
    , ProjectedToleranceZoneValue(*this)	// "ProjectedToleranceZoneValue"
    , SecondCompositeSegmentPositionDefinition(*this)	// "SecondCompositeSegmentPositionDefinition"
    , ThirdCompositeSegmentPositionDefinition(*this)	// "ThirdCompositeSegmentPositionDefinition"
    , FourthCompositeSegmentPositionDefinition(*this)	// "FourthCompositeSegmentPositionDefinition"
    , ToPointToleranceValue(*this)	// "ToPointToleranceValue"
    , OrientationOnly(*this)	// "OrientationOnly"
{
}

void CPositionCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionCharacteristicItemType::CPositionCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicItemBaseType(node)
{
}

CPositionCharacteristicItemType::CPositionCharacteristicItemType(CPositionCharacteristicItemType const& other)
    : ::qif191::t::CLocationCharacteristicItemBaseType(other.GetNode())
{
}

void CPositionCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionCharacteristicNominalType::CPositionCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CPositionCharacteristicNominalType::CPositionCharacteristicNominalType(CPositionCharacteristicNominalType const& other)
    : ::qif191::t::CLocationCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CPositionCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionCharacteristicStatsEvalType::CPositionCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , CompositeSegmentsStats(*this)	// "CompositeSegmentsStats"
{
}

CPositionCharacteristicStatsEvalType::CPositionCharacteristicStatsEvalType(CPositionCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLocationCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , CompositeSegmentsStats(*this)	// "CompositeSegmentsStats"
{
}

void CPositionCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionDiametricalZoneType::CPositionDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Dimensionality(*this)	// "Dimensionality"
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
    , ElongatedZone(*this)	// "ElongatedZone"
{
}

CPositionDiametricalZoneType::CPositionDiametricalZoneType(CPositionDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
    , Dimensionality(*this)	// "Dimensionality"
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
    , ElongatedZone(*this)	// "ElongatedZone"
{
}

void CPositionDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionNonDiametricalZoneType::CPositionNonDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Dimensionality(*this)	// "Dimensionality"
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
    , BoundaryZone(*this)	// "BoundaryZone"
{
}

CPositionNonDiametricalZoneType::CPositionNonDiametricalZoneType(CPositionNonDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
    , Dimensionality(*this)	// "Dimensionality"
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
    , BoundaryZone(*this)	// "BoundaryZone"
{
}

void CPositionNonDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionNonDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionSphericalZoneType::CPositionSphericalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Dimensionality(*this)	// "Dimensionality"
{
}

CPositionSphericalZoneType::CPositionSphericalZoneType(CPositionSphericalZoneType const& other)
    : TypeBase(other.GetNode())
    , Dimensionality(*this)	// "Dimensionality"
{
}

void CPositionSphericalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionSphericalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionZoneShapeType::CPositionZoneShapeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SphericalZone(*this)	// "SphericalZone"
    , DiametricalZone(*this)	// "DiametricalZone"
    , NonDiametricalZone(*this)	// "NonDiametricalZone"
{
}

CPositionZoneShapeType::CPositionZoneShapeType(CPositionZoneShapeType const& other)
    : TypeBase(other.GetNode())
    , SphericalZone(*this)	// "SphericalZone"
    , DiametricalZone(*this)	// "DiametricalZone"
    , NonDiametricalZone(*this)	// "NonDiametricalZone"
{
}

void CPositionZoneShapeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionZoneShapeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositiveDecimalType::CPositiveDecimalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPositiveDecimalType::CPositiveDecimalType(CPositiveDecimalType const& other)
    : TypeBase(other.GetNode())
{
}


CPreInspectionTraceabilityType::CPreInspectionTraceabilityType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , InspectingOrganization(*this)	// "InspectingOrganization"
    , CustomerOrganization(*this)	// "CustomerOrganization"
    , SupplierCode(*this)	// "SupplierCode"
    , PurchaseOrderNumber(*this)	// "PurchaseOrderNumber"
    , OrderNumber(*this)	// "OrderNumber"
    , AsmPathIds(*this)	// "AsmPathIds"
    , ReportNumber(*this)	// "ReportNumber"
    , InspectionScope(*this)	// "InspectionScope"
    , InspectionMode(*this)	// "InspectionMode"
    , PartialInspection(*this)	// "PartialInspection"
    , NotableEvents(*this)	// "NotableEvents"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , SecurityClassification(*this)	// "SecurityClassification"
    , PlantLocation(*this)	// "PlantLocation"
    , ReferencedQIFPlanInstanceQPId(*this)	// "ReferencedQIFPlanInstanceQPId"
    , ReferencedQIFPlan(*this)	// "ReferencedQIFPlan"
    , FormalStandard(*this)	// "FormalStandard"
{
}

CPreInspectionTraceabilityType::CPreInspectionTraceabilityType(CPreInspectionTraceabilityType const& other)
    : TypeBase(other.GetNode())
    , InspectingOrganization(*this)	// "InspectingOrganization"
    , CustomerOrganization(*this)	// "CustomerOrganization"
    , SupplierCode(*this)	// "SupplierCode"
    , PurchaseOrderNumber(*this)	// "PurchaseOrderNumber"
    , OrderNumber(*this)	// "OrderNumber"
    , AsmPathIds(*this)	// "AsmPathIds"
    , ReportNumber(*this)	// "ReportNumber"
    , InspectionScope(*this)	// "InspectionScope"
    , InspectionMode(*this)	// "InspectionMode"
    , PartialInspection(*this)	// "PartialInspection"
    , NotableEvents(*this)	// "NotableEvents"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , SecurityClassification(*this)	// "SecurityClassification"
    , PlantLocation(*this)	// "PlantLocation"
    , ReferencedQIFPlanInstanceQPId(*this)	// "ReferencedQIFPlanInstanceQPId"
    , ReferencedQIFPlan(*this)	// "ReferencedQIFPlan"
    , FormalStandard(*this)	// "FormalStandard"
{
}

void CPreInspectionTraceabilityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PreInspectionTraceabilityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrecedenceEnumType::CPrecedenceEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPrecedenceEnumType::CPrecedenceEnumType(CPrecedenceEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CPrecedenceType::CPrecedenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PrecedenceEnum(*this)	// "PrecedenceEnum"
    , OtherPrecedence(*this)	// "OtherPrecedence"
{
}

CPrecedenceType::CPrecedenceType(CPrecedenceType const& other)
    : TypeBase(other.GetNode())
    , PrecedenceEnum(*this)	// "PrecedenceEnum"
    , OtherPrecedence(*this)	// "OtherPrecedence"
{
}

void CPrecedenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PrecedenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPredecessorsType::CPredecessorsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Predecessor(*this)	// "Predecessor"
{
}

CPredecessorsType::CPredecessorsType(CPredecessorsType const& other)
    : TypeBase(other.GetNode())
    , Predecessor(*this)	// "Predecessor"
{
}

void CPredecessorsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PredecessorsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureCharacteristicActualBaseType::CPressureCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CPressureCharacteristicActualBaseType::CPressureCharacteristicActualBaseType(CPressureCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CPressureCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureCharacteristicDefinitionBaseType::CPressureCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CPressureCharacteristicDefinitionBaseType::CPressureCharacteristicDefinitionBaseType(CPressureCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CPressureCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureCharacteristicItemBaseType::CPressureCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CPressureCharacteristicItemBaseType::CPressureCharacteristicItemBaseType(CPressureCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CPressureCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureCharacteristicNominalBaseType::CPressureCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CPressureCharacteristicNominalBaseType::CPressureCharacteristicNominalBaseType(CPressureCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CPressureCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureToleranceType::CPressureToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CPressureToleranceType::CPressureToleranceType(CPressureToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CPressureToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureUnitType::CPressureUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CPressureUnitType::CPressureUnitType(CPressureUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CPressureUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPressureValueType::CPressureValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , pressureUnit(*this)	// "@pressureUnit"
{
}

CPressureValueType::CPressureValueType(CPressureValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , pressureUnit(*this)	// "@pressureUnit"
{
}

void CPressureValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PressureValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrimaryAlignmentOperationType::CPrimaryAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , PrimaryEntity(*this)	// "PrimaryEntity"
    , PrimaryAxis(*this)	// "PrimaryAxis"
{
}

CPrimaryAlignmentOperationType::CPrimaryAlignmentOperationType(CPrimaryAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , PrimaryEntity(*this)	// "PrimaryEntity"
    , PrimaryAxis(*this)	// "PrimaryAxis"
{
}

void CPrimaryAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PrimaryAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrimaryUnitsType::CPrimaryUnitsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AreaUnit(*this)	// "AreaUnit"
    , AngularUnit(*this)	// "AngularUnit"
    , ForceUnit(*this)	// "ForceUnit"
    , LinearUnit(*this)	// "LinearUnit"
    , MassUnit(*this)	// "MassUnit"
    , PressureUnit(*this)	// "PressureUnit"
    , SpeedUnit(*this)	// "SpeedUnit"
    , TemperatureUnit(*this)	// "TemperatureUnit"
    , TimeUnit(*this)	// "TimeUnit"
{
}

CPrimaryUnitsType::CPrimaryUnitsType(CPrimaryUnitsType const& other)
    : TypeBase(other.GetNode())
    , AreaUnit(*this)	// "AreaUnit"
    , AngularUnit(*this)	// "AngularUnit"
    , ForceUnit(*this)	// "ForceUnit"
    , LinearUnit(*this)	// "LinearUnit"
    , MassUnit(*this)	// "MassUnit"
    , PressureUnit(*this)	// "PressureUnit"
    , SpeedUnit(*this)	// "SpeedUnit"
    , TemperatureUnit(*this)	// "TemperatureUnit"
    , TimeUnit(*this)	// "TimeUnit"
{
}

void CPrimaryUnitsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PrimaryUnitsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrintedDrawingType::CPrintedDrawingType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
    , Description(*this)	// "Description"
    , Author(*this)	// "Author"
    , DrawingNumber(*this)	// "DrawingNumber"
    , AdditionalChanges(*this)	// "AdditionalChanges"
    , Location(*this)	// "Location"
{
}

CPrintedDrawingType::CPrintedDrawingType(CPrintedDrawingType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Name(*this)	// "Name"
    , Version(*this)	// "Version"
    , Description(*this)	// "Description"
    , Author(*this)	// "Author"
    , DrawingNumber(*this)	// "DrawingNumber"
    , AdditionalChanges(*this)	// "AdditionalChanges"
    , Location(*this)	// "Location"
{
}

void CPrintedDrawingType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PrintedDrawingType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrismPointSamplingStrategyEnumType::CPrismPointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPrismPointSamplingStrategyEnumType::CPrismPointSamplingStrategyEnumType(CPrismPointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CProbingDeviceType::CProbingDeviceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementDeviceType(node)
    , WorkingVolume(*this)	// "WorkingVolume"
    , EffectiveWorkingVolume(*this)	// "EffectiveWorkingVolume"
    , Resolution(*this)	// "Resolution"
{
}

CProbingDeviceType::CProbingDeviceType(CProbingDeviceType const& other)
    : ::qif191::t::CMeasurementDeviceType(other.GetNode())
    , WorkingVolume(*this)	// "WorkingVolume"
    , EffectiveWorkingVolume(*this)	// "EffectiveWorkingVolume"
    , Resolution(*this)	// "Resolution"
{
}

void CProbingDeviceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProbingDeviceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProcessDifferenceStudyPlanType::CProcessDifferenceStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyPlanBaseType(node)
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , LinearAbsoluteDifference(*this)	// "LinearAbsoluteDifference"
    , AngularAbsoluteDifference(*this)	// "AngularAbsoluteDifference"
    , AreaAbsoluteDifference(*this)	// "AreaAbsoluteDifference"
    , ForceAbsoluteDifference(*this)	// "ForceAbsoluteDifference"
    , MassAbsoluteDifference(*this)	// "MassAbsoluteDifference"
    , PressureAbsoluteDifference(*this)	// "PressureAbsoluteDifference"
    , SpeedAbsoluteDifference(*this)	// "SpeedAbsoluteDifference"
    , TemperatureAbsoluteDifference(*this)	// "TemperatureAbsoluteDifference"
    , TimeAbsoluteDifference(*this)	// "TimeAbsoluteDifference"
    , UserDefinedUnitAbsoluteDifference(*this)	// "UserDefinedUnitAbsoluteDifference"
    , RelativeDifference(*this)	// "RelativeDifference"
{
}

CProcessDifferenceStudyPlanType::CProcessDifferenceStudyPlanType(CProcessDifferenceStudyPlanType const& other)
    : ::qif191::t::CStatisticalStudyPlanBaseType(other.GetNode())
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , LinearAbsoluteDifference(*this)	// "LinearAbsoluteDifference"
    , AngularAbsoluteDifference(*this)	// "AngularAbsoluteDifference"
    , AreaAbsoluteDifference(*this)	// "AreaAbsoluteDifference"
    , ForceAbsoluteDifference(*this)	// "ForceAbsoluteDifference"
    , MassAbsoluteDifference(*this)	// "MassAbsoluteDifference"
    , PressureAbsoluteDifference(*this)	// "PressureAbsoluteDifference"
    , SpeedAbsoluteDifference(*this)	// "SpeedAbsoluteDifference"
    , TemperatureAbsoluteDifference(*this)	// "TemperatureAbsoluteDifference"
    , TimeAbsoluteDifference(*this)	// "TimeAbsoluteDifference"
    , UserDefinedUnitAbsoluteDifference(*this)	// "UserDefinedUnitAbsoluteDifference"
    , RelativeDifference(*this)	// "RelativeDifference"
{
}

void CProcessDifferenceStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProcessDifferenceStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProcessDifferenceStudyResultsType::CProcessDifferenceStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , LinearAbsoluteDifference(*this)	// "LinearAbsoluteDifference"
    , AngularAbsoluteDifference(*this)	// "AngularAbsoluteDifference"
    , AreaAbsoluteDifference(*this)	// "AreaAbsoluteDifference"
    , ForceAbsoluteDifference(*this)	// "ForceAbsoluteDifference"
    , MassAbsoluteDifference(*this)	// "MassAbsoluteDifference"
    , PressureAbsoluteDifference(*this)	// "PressureAbsoluteDifference"
    , SpeedAbsoluteDifference(*this)	// "SpeedAbsoluteDifference"
    , TemperatureAbsoluteDifference(*this)	// "TemperatureAbsoluteDifference"
    , TimeAbsoluteDifference(*this)	// "TimeAbsoluteDifference"
    , UserDefinedUnitAbsoluteDifference(*this)	// "UserDefinedUnitAbsoluteDifference"
    , RelativeDifference(*this)	// "RelativeDifference"
{
}

CProcessDifferenceStudyResultsType::CProcessDifferenceStudyResultsType(CProcessDifferenceStudyResultsType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , NumberOfSamples(*this)	// "NumberOfSamples"
    , SubgroupSize(*this)	// "SubgroupSize"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , LinearAbsoluteDifference(*this)	// "LinearAbsoluteDifference"
    , AngularAbsoluteDifference(*this)	// "AngularAbsoluteDifference"
    , AreaAbsoluteDifference(*this)	// "AreaAbsoluteDifference"
    , ForceAbsoluteDifference(*this)	// "ForceAbsoluteDifference"
    , MassAbsoluteDifference(*this)	// "MassAbsoluteDifference"
    , PressureAbsoluteDifference(*this)	// "PressureAbsoluteDifference"
    , SpeedAbsoluteDifference(*this)	// "SpeedAbsoluteDifference"
    , TemperatureAbsoluteDifference(*this)	// "TemperatureAbsoluteDifference"
    , TimeAbsoluteDifference(*this)	// "TimeAbsoluteDifference"
    , UserDefinedUnitAbsoluteDifference(*this)	// "UserDefinedUnitAbsoluteDifference"
    , RelativeDifference(*this)	// "RelativeDifference"
{
}

void CProcessDifferenceStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProcessDifferenceStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProcessParameterType::CProcessParameterType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ParameterType(*this)	// "ParameterType"
    , ParameterValue(*this)	// "ParameterValue"
{
}

CProcessParameterType::CProcessParameterType(CProcessParameterType const& other)
    : TypeBase(other.GetNode())
    , ParameterType(*this)	// "ParameterType"
    , ParameterValue(*this)	// "ParameterValue"
{
}

void CProcessParameterType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProcessParameterType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProductDefinitionBaseType::CProductDefinitionBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Name(*this)	// "Name"
    , QPId(*this)	// "QPId"
    , ModelNumber(*this)	// "ModelNumber"
    , Description(*this)	// "Description"
    , Version(*this)	// "Version"
    , Material(*this)	// "Material"
    , SecurityClassification(*this)	// "SecurityClassification"
    , ExportControlClassification(*this)	// "ExportControlClassification"
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
    , CharacteristicNominalIds(*this)	// "CharacteristicNominalIds"
    , PartNoteIds(*this)	// "PartNoteIds"
    , DatumDefinitionIds(*this)	// "DatumDefinitionIds"
    , DatumTargetDefinitionIds(*this)	// "DatumTargetDefinitionIds"
    , DatumReferenceFrameIds(*this)	// "DatumReferenceFrameIds"
{
}

CProductDefinitionBaseType::CProductDefinitionBaseType(CProductDefinitionBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Name(*this)	// "Name"
    , QPId(*this)	// "QPId"
    , ModelNumber(*this)	// "ModelNumber"
    , Description(*this)	// "Description"
    , Version(*this)	// "Version"
    , Material(*this)	// "Material"
    , SecurityClassification(*this)	// "SecurityClassification"
    , ExportControlClassification(*this)	// "ExportControlClassification"
    , FeatureNominalIds(*this)	// "FeatureNominalIds"
    , CharacteristicNominalIds(*this)	// "CharacteristicNominalIds"
    , PartNoteIds(*this)	// "PartNoteIds"
    , DatumDefinitionIds(*this)	// "DatumDefinitionIds"
    , DatumTargetDefinitionIds(*this)	// "DatumTargetDefinitionIds"
    , DatumReferenceFrameIds(*this)	// "DatumReferenceFrameIds"
{
}

void CProductDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProductDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProductTraceabilityType::CProductTraceabilityType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ReportNumber(*this)	// "ReportNumber"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , FixtureId(*this)	// "FixtureId"
    , NotableEventIds(*this)	// "NotableEventIds"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

CProductTraceabilityType::CProductTraceabilityType(CProductTraceabilityType const& other)
    : TypeBase(other.GetNode())
    , ReportNumber(*this)	// "ReportNumber"
    , ManufacturingProcessId(*this)	// "ManufacturingProcessId"
    , FixtureId(*this)	// "FixtureId"
    , NotableEventIds(*this)	// "NotableEventIds"
    , InspectionSoftwareItems(*this)	// "InspectionSoftwareItems"
    , InspectionProgram(*this)	// "InspectionProgram"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

void CProductTraceabilityType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProductTraceabilityType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProductType::CProductType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Header(*this)	// "Header"
    , GeometrySet(*this)	// "GeometrySet"
    , TopologySet(*this)	// "TopologySet"
    , PartNoteSet(*this)	// "PartNoteSet"
    , ViewSet(*this)	// "ViewSet"
    , LayerSet(*this)	// "LayerSet"
    , CoordinateSystemSet(*this)	// "CoordinateSystemSet"
    , VisualizationSet(*this)	// "VisualizationSet"
    , AuxiliarySet(*this)	// "AuxiliarySet"
    , PartSet(*this)	// "PartSet"
    , AssemblySet(*this)	// "AssemblySet"
    , ComponentSet(*this)	// "ComponentSet"
    , RootPart(*this)	// "RootPart"
    , RootAssembly(*this)	// "RootAssembly"
    , RootComponent(*this)	// "RootComponent"
    , AsmPaths(*this)	// "AsmPaths"
{
}

CProductType::CProductType(CProductType const& other)
    : TypeBase(other.GetNode())
    , Header(*this)	// "Header"
    , GeometrySet(*this)	// "GeometrySet"
    , TopologySet(*this)	// "TopologySet"
    , PartNoteSet(*this)	// "PartNoteSet"
    , ViewSet(*this)	// "ViewSet"
    , LayerSet(*this)	// "LayerSet"
    , CoordinateSystemSet(*this)	// "CoordinateSystemSet"
    , VisualizationSet(*this)	// "VisualizationSet"
    , AuxiliarySet(*this)	// "AuxiliarySet"
    , PartSet(*this)	// "PartSet"
    , AssemblySet(*this)	// "AssemblySet"
    , ComponentSet(*this)	// "ComponentSet"
    , RootPart(*this)	// "RootPart"
    , RootAssembly(*this)	// "RootAssembly"
    , RootComponent(*this)	// "RootComponent"
    , AsmPaths(*this)	// "AsmPaths"
{
}

void CProductType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProductType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProductionStudyPlanType::CProductionStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(node)
    , SamplingMethod(*this)	// "SamplingMethod"
    , ControlMethod(*this)	// "ControlMethod"
{
}

CProductionStudyPlanType::CProductionStudyPlanType(CProductionStudyPlanType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(other.GetNode())
    , SamplingMethod(*this)	// "SamplingMethod"
    , ControlMethod(*this)	// "ControlMethod"
{
}

void CProductionStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProductionStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProductionStudyResultsType::CProductionStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyResultsBaseType(node)
    , ControlIssueDetails(*this)	// "ControlIssueDetails"
{
}

CProductionStudyResultsType::CProductionStudyResultsType(CProductionStudyResultsType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyResultsBaseType(other.GetNode())
    , ControlIssueDetails(*this)	// "ControlIssueDetails"
{
}

void CProductionStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProductionStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileCharacteristicActualBaseType::CProfileCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(node)
    , WorstPositiveDeviation(*this)	// "WorstPositiveDeviation"
    , WorstNegativeDeviation(*this)	// "WorstNegativeDeviation"
    , PointDeviations(*this)	// "PointDeviations"
    , DatumsOk(*this)	// "DatumsOk"
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
    , SecondCompositeSegmentProfileActual(*this)	// "SecondCompositeSegmentProfileActual"
    , ThirdCompositeSegmentProfileActual(*this)	// "ThirdCompositeSegmentProfileActual"
    , FourthCompositeSegmentProfileActual(*this)	// "FourthCompositeSegmentProfileActual"
{
}

CProfileCharacteristicActualBaseType::CProfileCharacteristicActualBaseType(CProfileCharacteristicActualBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(other.GetNode())
    , WorstPositiveDeviation(*this)	// "WorstPositiveDeviation"
    , WorstNegativeDeviation(*this)	// "WorstNegativeDeviation"
    , PointDeviations(*this)	// "PointDeviations"
    , DatumsOk(*this)	// "DatumsOk"
    , DRFTransformActualId(*this)	// "DRFTransformActualId"
    , SecondCompositeSegmentProfileActual(*this)	// "SecondCompositeSegmentProfileActual"
    , ThirdCompositeSegmentProfileActual(*this)	// "ThirdCompositeSegmentProfileActual"
    , FourthCompositeSegmentProfileActual(*this)	// "FourthCompositeSegmentProfileActual"
{
}

void CProfileCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileCharacteristicDefinitionBaseType::CProfileCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(node)
    , OuterDisposition(*this)	// "OuterDisposition"
    , UnequalZone(*this)	// "UnequalZone"
    , OffsetZone(*this)	// "OffsetZone"
    , SecondCompositeSegmentProfileDefinition(*this)	// "SecondCompositeSegmentProfileDefinition"
    , ThirdCompositeSegmentProfileDefinition(*this)	// "ThirdCompositeSegmentProfileDefinition"
    , FourthCompositeSegmentProfileDefinition(*this)	// "FourthCompositeSegmentProfileDefinition"
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , OrientationOnly(*this)	// "OrientationOnly"
{
}

CProfileCharacteristicDefinitionBaseType::CProfileCharacteristicDefinitionBaseType(CProfileCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(other.GetNode())
    , OuterDisposition(*this)	// "OuterDisposition"
    , UnequalZone(*this)	// "UnequalZone"
    , OffsetZone(*this)	// "OffsetZone"
    , SecondCompositeSegmentProfileDefinition(*this)	// "SecondCompositeSegmentProfileDefinition"
    , ThirdCompositeSegmentProfileDefinition(*this)	// "ThirdCompositeSegmentProfileDefinition"
    , FourthCompositeSegmentProfileDefinition(*this)	// "FourthCompositeSegmentProfileDefinition"
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
    , OrientationOnly(*this)	// "OrientationOnly"
{
}

void CProfileCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileCharacteristicItemBaseType::CProfileCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(node)
{
}

CProfileCharacteristicItemBaseType::CProfileCharacteristicItemBaseType(CProfileCharacteristicItemBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(other.GetNode())
{
}

void CProfileCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileCharacteristicNominalBaseType::CProfileCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CProfileCharacteristicNominalBaseType::CProfileCharacteristicNominalBaseType(CProfileCharacteristicNominalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CProfileCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileCharacteristicStatsEvalBaseType::CProfileCharacteristicStatsEvalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , WorstPositiveDeviationStats(*this)	// "WorstPositiveDeviationStats"
    , WorstNegativeDeviationStats(*this)	// "WorstNegativeDeviationStats"
    , PointDeviationsStats(*this)	// "PointDeviationsStats"
    , DatumsOkStats(*this)	// "DatumsOkStats"
    , CompositeSegmentsStats(*this)	// "CompositeSegmentsStats"
{
}

CProfileCharacteristicStatsEvalBaseType::CProfileCharacteristicStatsEvalBaseType(CProfileCharacteristicStatsEvalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , WorstPositiveDeviationStats(*this)	// "WorstPositiveDeviationStats"
    , WorstNegativeDeviationStats(*this)	// "WorstNegativeDeviationStats"
    , PointDeviationsStats(*this)	// "PointDeviationsStats"
    , DatumsOkStats(*this)	// "DatumsOkStats"
    , CompositeSegmentsStats(*this)	// "CompositeSegmentsStats"
{
}

void CProfileCharacteristicStatsEvalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileCharacteristicStatsEvalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileGroupFeatureActualType::CProfileGroupFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureActualBaseType(node)
{
}

CProfileGroupFeatureActualType::CProfileGroupFeatureActualType(CProfileGroupFeatureActualType const& other)
    : ::qif191::t::CCompositeFeatureActualBaseType(other.GetNode())
{
}

void CProfileGroupFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileGroupFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileGroupFeatureDefinitionType::CProfileGroupFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(node)
{
}

CProfileGroupFeatureDefinitionType::CProfileGroupFeatureDefinitionType(CProfileGroupFeatureDefinitionType const& other)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(other.GetNode())
{
}

void CProfileGroupFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileGroupFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileGroupFeatureItemType::CProfileGroupFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureItemBaseType(node)
{
}

CProfileGroupFeatureItemType::CProfileGroupFeatureItemType(CProfileGroupFeatureItemType const& other)
    : ::qif191::t::CCompositeFeatureItemBaseType(other.GetNode())
{
}

void CProfileGroupFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileGroupFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CProfileGroupFeatureNominalType::CProfileGroupFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureNominalBaseType(node)
{
}

CProfileGroupFeatureNominalType::CProfileGroupFeatureNominalType(CProfileGroupFeatureNominalType const& other)
    : ::qif191::t::CCompositeFeatureNominalBaseType(other.GetNode())
{
}

void CProfileGroupFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ProfileGroupFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFDocumentHeaderType::CQIFDocumentHeaderType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Scope(*this)	// "Scope"
{
}

CQIFDocumentHeaderType::CQIFDocumentHeaderType(CQIFDocumentHeaderType const& other)
    : TypeBase(other.GetNode())
    , Application(*this)	// "Application"
    , Author(*this)	// "Author"
    , ApplicationSource(*this)	// "ApplicationSource"
    , Description(*this)	// "Description"
    , Scope(*this)	// "Scope"
{
}

void CQIFDocumentHeaderType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFDocumentHeaderType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFDocumentType::CQIFDocumentType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , versionQIF(*this)	// "@versionQIF"
    , QIFIdMax(*this)	// "@QIFIdMax"
    , Attributes(*this)	// "Attributes"
    , Versions(*this)	// "Versions"
    , ThisDocumentInstanceQPId(*this)	// "ThisDocumentInstanceQPId"
    , Header(*this)	// "Header"
    , PreInspectionTraceability(*this)	// "PreInspectionTraceability"
    , FileUnits(*this)	// "FileUnits"
    , DatumDefinitions(*this)	// "DatumDefinitions"
    , DatumTargetDefinitions(*this)	// "DatumTargetDefinitions"
    , Transforms(*this)	// "Transforms"
    , CoordinateSystems(*this)	// "CoordinateSystems"
    , DatumReferenceFrames(*this)	// "DatumReferenceFrames"
    , MeasurementResources(*this)	// "MeasurementResources"
    , ThreadSpecifications(*this)	// "ThreadSpecifications"
    , Product(*this)	// "Product"
    , Features(*this)	// "Features"
    , Characteristics(*this)	// "Characteristics"
    , MeasurementPlan(*this)	// "MeasurementPlan"
    , MeasurementsResults(*this)	// "MeasurementsResults"
    , Statistics(*this)	// "Statistics"
    , ManufacturingProcessTraceabilities(*this)	// "ManufacturingProcessTraceabilities"
    , Rules(*this)	// "Rules"
    , UserDataXML(*this)	// "UserDataXML"
{
}

CQIFDocumentType::CQIFDocumentType(CQIFDocumentType const& other)
    : TypeBase(other.GetNode())
    , versionQIF(*this)	// "@versionQIF"
    , QIFIdMax(*this)	// "@QIFIdMax"
    , Attributes(*this)	// "Attributes"
    , Versions(*this)	// "Versions"
    , ThisDocumentInstanceQPId(*this)	// "ThisDocumentInstanceQPId"
    , Header(*this)	// "Header"
    , PreInspectionTraceability(*this)	// "PreInspectionTraceability"
    , FileUnits(*this)	// "FileUnits"
    , DatumDefinitions(*this)	// "DatumDefinitions"
    , DatumTargetDefinitions(*this)	// "DatumTargetDefinitions"
    , Transforms(*this)	// "Transforms"
    , CoordinateSystems(*this)	// "CoordinateSystems"
    , DatumReferenceFrames(*this)	// "DatumReferenceFrames"
    , MeasurementResources(*this)	// "MeasurementResources"
    , ThreadSpecifications(*this)	// "ThreadSpecifications"
    , Product(*this)	// "Product"
    , Features(*this)	// "Features"
    , Characteristics(*this)	// "Characteristics"
    , MeasurementPlan(*this)	// "MeasurementPlan"
    , MeasurementsResults(*this)	// "MeasurementsResults"
    , Statistics(*this)	// "Statistics"
    , ManufacturingProcessTraceabilities(*this)	// "ManufacturingProcessTraceabilities"
    , Rules(*this)	// "Rules"
    , UserDataXML(*this)	// "UserDataXML"
{
}

void CQIFDocumentType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFDocumentType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFIdType::CQIFIdType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQIFIdType::CQIFIdType(CQIFIdType const& other)
    : TypeBase(other.GetNode())
{
}


CQIFReferenceFullType::CQIFReferenceFullType(xercesc::DOMNode* const& node)
    : ::qif191::t::CQIFReferenceType(node)
    , AsmPath(*this)	// "@AsmPath"
{
}

CQIFReferenceFullType::CQIFReferenceFullType(CQIFReferenceFullType const& other)
    : ::qif191::t::CQIFReferenceType(other.GetNode())
    , AsmPath(*this)	// "@AsmPath"
{
}

void CQIFReferenceFullType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFReferenceFullType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFReferenceType::CQIFReferenceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CQIFIdTypeType(node)
{
}

CQIFReferenceType::CQIFReferenceType(CQIFReferenceType const& other)
    : ::qif191::t::CQIFIdTypeType(other.GetNode())
{
}

void CQIFReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFRuleBaseType::CQIFRuleBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , name(*this)	// "@name"
{
}

CQIFRuleBaseType::CQIFRuleBaseType(CQIFRuleBaseType const& other)
    : TypeBase(other.GetNode())
    , name(*this)	// "@name"
{
}

void CQIFRuleBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFRuleBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFRulesType::CQIFRulesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Version(*this)	// "Version"
    , RulesUnits(*this)	// "RulesUnits"
    , FeatureRules(*this)	// "FeatureRules"
    , DMESelectionRules(*this)	// "DMESelectionRules"
{
}

CQIFRulesType::CQIFRulesType(CQIFRulesType const& other)
    : TypeBase(other.GetNode())
    , Version(*this)	// "Version"
    , RulesUnits(*this)	// "RulesUnits"
    , FeatureRules(*this)	// "FeatureRules"
    , DMESelectionRules(*this)	// "DMESelectionRules"
{
}

void CQIFRulesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFRulesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQPIdReferenceType::CQPIdReferenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQPIdReferenceType::CQPIdReferenceType(CQPIdReferenceType const& other)
    : TypeBase(other.GetNode())
{
}


CQPIdType::CQPIdType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQPIdType::CQPIdType(CQPIdType const& other)
    : TypeBase(other.GetNode())
{
}


CQualificationType::CQualificationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
{
}

CQualificationType::CQualificationType(CQualificationType const& other)
    : TypeBase(other.GetNode())
    , Attributes(*this)	// "Attributes"
    , Description(*this)	// "Description"
{
}

void CQualificationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QualificationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQualificationsType::CQualificationsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Qualification(*this)	// "Qualification"
{
}

CQualificationsType::CQualificationsType(CQualificationsType const& other)
    : TypeBase(other.GetNode())
    , Qualification(*this)	// "Qualification"
{
}

void CQualificationsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QualificationsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQuaternionType::CQuaternionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Value2(*this)	// "Value"
{
}

CQuaternionType::CQuaternionType(CQuaternionType const& other)
    : TypeBase(other.GetNode())
    , Value2(*this)	// "Value"
{
}

void CQuaternionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QuaternionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRadialDifferentialScaleType::CRadialDifferentialScaleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PerpendicularScaleFactor(*this)	// "PerpendicularScaleFactor"
    , ParallelScaleFactor(*this)	// "ParallelScaleFactor"
    , Direction(*this)	// "Direction"
{
}

CRadialDifferentialScaleType::CRadialDifferentialScaleType(CRadialDifferentialScaleType const& other)
    : TypeBase(other.GetNode())
    , PerpendicularScaleFactor(*this)	// "PerpendicularScaleFactor"
    , ParallelScaleFactor(*this)	// "ParallelScaleFactor"
    , Direction(*this)	// "Direction"
{
}

void CRadialDifferentialScaleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RadialDifferentialScaleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRadiusCharacteristicActualType::CRadiusCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CRadiusCharacteristicActualType::CRadiusCharacteristicActualType(CRadiusCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CRadiusCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RadiusCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRadiusCharacteristicDefinitionType::CRadiusCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
    , ControlledRadius(*this)	// "ControlledRadius"
{
}

CRadiusCharacteristicDefinitionType::CRadiusCharacteristicDefinitionType(CRadiusCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
    , ControlledRadius(*this)	// "ControlledRadius"
{
}

void CRadiusCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RadiusCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRadiusCharacteristicItemType::CRadiusCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CRadiusCharacteristicItemType::CRadiusCharacteristicItemType(CRadiusCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CRadiusCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RadiusCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRadiusCharacteristicNominalType::CRadiusCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CRadiusCharacteristicNominalType::CRadiusCharacteristicNominalType(CRadiusCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CRadiusCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RadiusCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRadiusCharacteristicStatsEvalType::CRadiusCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CRadiusCharacteristicStatsEvalType::CRadiusCharacteristicStatsEvalType(CRadiusCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CRadiusCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RadiusCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRectangleType::CRectangleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Length(*this)	// "Length"
    , CornerPoint(*this)	// "CornerPoint"
    , Width(*this)	// "Width"
    , WidthDirection(*this)	// "WidthDirection"
    , LengthDirection(*this)	// "LengthDirection"
{
}

CRectangleType::CRectangleType(CRectangleType const& other)
    : TypeBase(other.GetNode())
    , Length(*this)	// "Length"
    , CornerPoint(*this)	// "CornerPoint"
    , Width(*this)	// "Width"
    , WidthDirection(*this)	// "WidthDirection"
    , LengthDirection(*this)	// "LengthDirection"
{
}

void CRectangleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RectangleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRectangularUnitAreaType::CRectangularUnitAreaType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , RectangularUnitAreaLength(*this)	// "RectangularUnitAreaLength"
    , RectangularUnitAreaWidth(*this)	// "RectangularUnitAreaWidth"
    , RectangularUnitAreaOrientation(*this)	// "RectangularUnitAreaOrientation"
{
}

CRectangularUnitAreaType::CRectangularUnitAreaType(CRectangularUnitAreaType const& other)
    : TypeBase(other.GetNode())
    , RectangularUnitAreaLength(*this)	// "RectangularUnitAreaLength"
    , RectangularUnitAreaWidth(*this)	// "RectangularUnitAreaWidth"
    , RectangularUnitAreaOrientation(*this)	// "RectangularUnitAreaOrientation"
{
}

void CRectangularUnitAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RectangularUnitAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CReducedDatumEnumType::CReducedDatumEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CReducedDatumEnumType::CReducedDatumEnumType(CReducedDatumEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CReferencedComponentEnumType::CReferencedComponentEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CReferencedComponentEnumType::CReferencedComponentEnumType(CReferencedComponentEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CResolutionType::CResolutionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CombinedResolution(*this)	// "CombinedResolution"
    , XYZResolution(*this)	// "XYZResolution"
{
}

CResolutionType::CResolutionType(CResolutionType const& other)
    : TypeBase(other.GetNode())
    , CombinedResolution(*this)	// "CombinedResolution"
    , XYZResolution(*this)	// "XYZResolution"
{
}

void CResolutionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ResolutionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRetrievalMethodEnumType::CRetrievalMethodEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CRetrievalMethodEnumType::CRetrievalMethodEnumType(CRetrievalMethodEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CRevolution23CoreType::CRevolution23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , Angle(*this)	// "@Angle"
    , Axis(*this)	// "Axis"
    , Generatrix(*this)	// "Generatrix"
{
}

CRevolution23CoreType::CRevolution23CoreType(CRevolution23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , Angle(*this)	// "@Angle"
    , Axis(*this)	// "Axis"
    , Generatrix(*this)	// "Generatrix"
{
}

void CRevolution23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Revolution23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRevolution23Type::CRevolution23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Revolution23Core(*this)	// "Revolution23Core"
    , Transform(*this)	// "Transform"
{
}

CRevolution23Type::CRevolution23Type(CRevolution23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Revolution23Core(*this)	// "Revolution23Core"
    , Transform(*this)	// "Transform"
{
}

void CRevolution23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Revolution23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CRotaryTableType::CRotaryTableType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , LocationOnCMM(*this)	// "LocationOnCMM"
    , AxisDirection(*this)	// "AxisDirection"
    , ZeroIndexDirection(*this)	// "ZeroIndexDirection"
    , TableRadius(*this)	// "TableRadius"
    , TableErrors(*this)	// "TableErrors"
{
}

CRotaryTableType::CRotaryTableType(CRotaryTableType const& other)
    : TypeBase(other.GetNode())
    , LocationOnCMM(*this)	// "LocationOnCMM"
    , AxisDirection(*this)	// "AxisDirection"
    , ZeroIndexDirection(*this)	// "ZeroIndexDirection"
    , TableRadius(*this)	// "TableRadius"
    , TableErrors(*this)	// "TableErrors"
{
}

void CRotaryTableType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RotaryTableType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRuled23CoreType::CRuled23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , TurnedSecondCurve(*this)	// "@TurnedSecondCurve"
    , Curve(*this)	// "Curve"
{
}

CRuled23CoreType::CRuled23CoreType(CRuled23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , TurnedSecondCurve(*this)	// "@TurnedSecondCurve"
    , Curve(*this)	// "Curve"
{
}

void CRuled23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Ruled23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRuled23Type::CRuled23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Ruled23Core(*this)	// "Ruled23Core"
    , Transform(*this)	// "Transform"
{
}

CRuled23Type::CRuled23Type(CRuled23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Ruled23Core(*this)	// "Ruled23Core"
    , Transform(*this)	// "Transform"
{
}

void CRuled23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Ruled23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutCharacteristicActualBaseType::CRunoutCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(node)
    , DatumsOk(*this)	// "DatumsOk"
{
}

CRunoutCharacteristicActualBaseType::CRunoutCharacteristicActualBaseType(CRunoutCharacteristicActualBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicActualBaseType(other.GetNode())
    , DatumsOk(*this)	// "DatumsOk"
{
}

void CRunoutCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutCharacteristicDefinitionBaseType::CRunoutCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(node)
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
{
}

CRunoutCharacteristicDefinitionBaseType::CRunoutCharacteristicDefinitionBaseType(CRunoutCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicDefinitionBaseType(other.GetNode())
    , DatumReferenceFrameId(*this)	// "DatumReferenceFrameId"
{
}

void CRunoutCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutCharacteristicItemBaseType::CRunoutCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(node)
{
}

CRunoutCharacteristicItemBaseType::CRunoutCharacteristicItemBaseType(CRunoutCharacteristicItemBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicItemBaseType(other.GetNode())
{
}

void CRunoutCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutCharacteristicNominalBaseType::CRunoutCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CRunoutCharacteristicNominalBaseType::CRunoutCharacteristicNominalBaseType(CRunoutCharacteristicNominalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CRunoutCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutCharacteristicStatsEvalBaseType::CRunoutCharacteristicStatsEvalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , DatumsOkStats(*this)	// "DatumsOkStats"
{
}

CRunoutCharacteristicStatsEvalBaseType::CRunoutCharacteristicStatsEvalBaseType(CRunoutCharacteristicStatsEvalBaseType const& other)
    : ::qif191::t::CGeometricCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , DatumsOkStats(*this)	// "DatumsOkStats"
{
}

void CRunoutCharacteristicStatsEvalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutCharacteristicStatsEvalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutGroupFeatureActualType::CRunoutGroupFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureActualBaseType(node)
{
}

CRunoutGroupFeatureActualType::CRunoutGroupFeatureActualType(CRunoutGroupFeatureActualType const& other)
    : ::qif191::t::CCompositeFeatureActualBaseType(other.GetNode())
{
}

void CRunoutGroupFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutGroupFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutGroupFeatureDefinitionType::CRunoutGroupFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(node)
{
}

CRunoutGroupFeatureDefinitionType::CRunoutGroupFeatureDefinitionType(CRunoutGroupFeatureDefinitionType const& other)
    : ::qif191::t::CCompositeFeatureDefinitionBaseType(other.GetNode())
{
}

void CRunoutGroupFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutGroupFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutGroupFeatureItemType::CRunoutGroupFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureItemBaseType(node)
{
}

CRunoutGroupFeatureItemType::CRunoutGroupFeatureItemType(CRunoutGroupFeatureItemType const& other)
    : ::qif191::t::CCompositeFeatureItemBaseType(other.GetNode())
{
}

void CRunoutGroupFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutGroupFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRunoutGroupFeatureNominalType::CRunoutGroupFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCompositeFeatureNominalBaseType(node)
{
}

CRunoutGroupFeatureNominalType::CRunoutGroupFeatureNominalType(CRunoutGroupFeatureNominalType const& other)
    : ::qif191::t::CCompositeFeatureNominalBaseType(other.GetNode())
{
}

void CRunoutGroupFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RunoutGroupFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSamplingIntervalEnumType::CSamplingIntervalEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSamplingIntervalEnumType::CSamplingIntervalEnumType(CSamplingIntervalEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSamplingIntervalType::CSamplingIntervalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SamplingIntervalEnum(*this)	// "SamplingIntervalEnum"
    , OtherSamplingInterval(*this)	// "OtherSamplingInterval"
{
}

CSamplingIntervalType::CSamplingIntervalType(CSamplingIntervalType const& other)
    : TypeBase(other.GetNode())
    , SamplingIntervalEnum(*this)	// "SamplingIntervalEnum"
    , OtherSamplingInterval(*this)	// "OtherSamplingInterval"
{
}

void CSamplingIntervalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SamplingIntervalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSamplingMethodType::CSamplingMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SampleSize(*this)	// "SampleSize"
    , SamplingPeriod(*this)	// "SamplingPeriod"
    , SamplingFrequency(*this)	// "SamplingFrequency"
    , SamplingInterval(*this)	// "SamplingInterval"
{
}

CSamplingMethodType::CSamplingMethodType(CSamplingMethodType const& other)
    : TypeBase(other.GetNode())
    , SampleSize(*this)	// "SampleSize"
    , SamplingPeriod(*this)	// "SamplingPeriod"
    , SamplingFrequency(*this)	// "SamplingFrequency"
    , SamplingInterval(*this)	// "SamplingInterval"
{
}

void CSamplingMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SamplingMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSamplingRigorIsType::CSamplingRigorIsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , val(*this)	// "@val"
{
}

CSamplingRigorIsType::CSamplingRigorIsType(CSamplingRigorIsType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , val(*this)	// "@val"
{
}

void CSamplingRigorIsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SamplingRigorIsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSavedViewType::CSavedViewType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCameraBaseType(node)
    , CharacteristicNominalVisibleIds(*this)	// "CharacteristicNominalVisibleIds"
    , CharacteristicNominalHiddenIds(*this)	// "CharacteristicNominalHiddenIds"
    , BodyIds(*this)	// "BodyIds"
    , ComponentIds(*this)	// "ComponentIds"
    , PlaneClippingIds(*this)	// "PlaneClippingIds"
{
}

CSavedViewType::CSavedViewType(CSavedViewType const& other)
    : ::qif191::t::CCameraBaseType(other.GetNode())
    , CharacteristicNominalVisibleIds(*this)	// "CharacteristicNominalVisibleIds"
    , CharacteristicNominalHiddenIds(*this)	// "CharacteristicNominalHiddenIds"
    , BodyIds(*this)	// "BodyIds"
    , ComponentIds(*this)	// "ComponentIds"
    , PlaneClippingIds(*this)	// "PlaneClippingIds"
{
}

void CSavedViewType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SavedViewType"), _T("http://qifstandards.org/xsd/qif2"));
}

CScaleType::CScaleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Origin(*this)	// "Origin"
    , UniformScale(*this)	// "UniformScale"
    , RadialDifferentialScale(*this)	// "RadialDifferentialScale"
    , AxialDifferentialScale(*this)	// "AxialDifferentialScale"
{
}

CScaleType::CScaleType(CScaleType const& other)
    : TypeBase(other.GetNode())
    , Origin(*this)	// "Origin"
    , UniformScale(*this)	// "UniformScale"
    , RadialDifferentialScale(*this)	// "RadialDifferentialScale"
    , AxialDifferentialScale(*this)	// "AxialDifferentialScale"
{
}

void CScaleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ScaleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSecondaryAlignmentOperationType::CSecondaryAlignmentOperationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAlignmentOperationBaseType(node)
    , SecondaryEntity(*this)	// "SecondaryEntity"
    , SecondaryAxis(*this)	// "SecondaryAxis"
    , RotationAxis(*this)	// "RotationAxis"
{
}

CSecondaryAlignmentOperationType::CSecondaryAlignmentOperationType(CSecondaryAlignmentOperationType const& other)
    : ::qif191::t::CAlignmentOperationBaseType(other.GetNode())
    , SecondaryEntity(*this)	// "SecondaryEntity"
    , SecondaryAxis(*this)	// "SecondaryAxis"
    , RotationAxis(*this)	// "RotationAxis"
{
}

void CSecondaryAlignmentOperationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SecondaryAlignmentOperationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSectionModifierEnumType::CSectionModifierEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSectionModifierEnumType::CSectionModifierEnumType(CSectionModifierEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSecurityClassificationEnumType::CSecurityClassificationEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSecurityClassificationEnumType::CSecurityClassificationEnumType(CSecurityClassificationEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSecurityClassificationType::CSecurityClassificationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SecurityClassificationEnum(*this)	// "SecurityClassificationEnum"
    , OtherSecurityClassification(*this)	// "OtherSecurityClassification"
{
}

CSecurityClassificationType::CSecurityClassificationType(CSecurityClassificationType const& other)
    : TypeBase(other.GetNode())
    , SecurityClassificationEnum(*this)	// "SecurityClassificationEnum"
    , OtherSecurityClassification(*this)	// "OtherSecurityClassification"
{
}

void CSecurityClassificationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SecurityClassificationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSegment12CoreType::CSegment12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

CSegment12CoreType::CSegment12CoreType(CSegment12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

void CSegment12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Segment12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSegment12Type::CSegment12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , Segment12Core(*this)	// "Segment12Core"
{
}

CSegment12Type::CSegment12Type(CSegment12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , Segment12Core(*this)	// "Segment12Core"
{
}

void CSegment12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Segment12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSegment13CoreType::CSegment13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

CSegment13CoreType::CSegment13CoreType(CSegment13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , StartPoint(*this)	// "StartPoint"
    , EndPoint(*this)	// "EndPoint"
{
}

void CSegment13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Segment13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSegment13Type::CSegment13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , Segment13Core(*this)	// "Segment13Core"
    , Transform(*this)	// "Transform"
{
}

CSegment13Type::CSegment13Type(CSegment13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , Segment13Core(*this)	// "Segment13Core"
    , Transform(*this)	// "Transform"
{
}

void CSegment13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Segment13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSensorType::CSensorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementResourceBaseType(node)
    , Qualifications(*this)	// "Qualifications"
    , AAngle(*this)	// "AAngle"
    , BAngle(*this)	// "BAngle"
{
}

CSensorType::CSensorType(CSensorType const& other)
    : ::qif191::t::CMeasurementResourceBaseType(other.GetNode())
    , Qualifications(*this)	// "Qualifications"
    , AAngle(*this)	// "AAngle"
    , BAngle(*this)	// "BAngle"
{
}

void CSensorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SensorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSensorsType::CSensorsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Sensor(*this)	// "Sensor"
    , TouchProbe(*this)	// "TouchProbe"
{
}

CSensorsType::CSensorsType(CSensorsType const& other)
    : TypeBase(other.GetNode())
    , Sensor(*this)	// "Sensor"
    , TouchProbe(*this)	// "TouchProbe"
{
}

void CSensorsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SensorsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSequencedBaseFeatureType::CSequencedBaseFeatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBaseFeatureType(node)
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

CSequencedBaseFeatureType::CSequencedBaseFeatureType(CSequencedBaseFeatureType const& other)
    : ::qif191::t::CBaseFeatureType(other.GetNode())
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

void CSequencedBaseFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SequencedBaseFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSequencedDatumType::CSequencedDatumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SimpleDatum(*this)	// "SimpleDatum"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

CSequencedDatumType::CSequencedDatumType(CSequencedDatumType const& other)
    : TypeBase(other.GetNode())
    , SimpleDatum(*this)	// "SimpleDatum"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

void CSequencedDatumType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SequencedDatumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSetFeatureType::CSetFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSetFeatureType::CSetFeatureType(CSetFeatureType const& other)
    : TypeBase(other.GetNode())
{
}

void CSetFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SetFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CShapeClassEnumType::CShapeClassEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CShapeClassEnumType::CShapeClassEnumType(CShapeClassEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CShapeClassIsType::CShapeClassIsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBooleanExpressionBaseType(node)
    , val(*this)	// "@val"
{
}

CShapeClassIsType::CShapeClassIsType(CShapeClassIsType const& other)
    : ::qif191::t::CBooleanExpressionBaseType(other.GetNode())
    , val(*this)	// "@val"
{
}

void CShapeClassIsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ShapeClassIsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CShapeClassType::CShapeClassType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ShapeClassEnum(*this)	// "ShapeClassEnum"
    , OtherShapeClass(*this)	// "OtherShapeClass"
{
}

CShapeClassType::CShapeClassType(CShapeClassType const& other)
    : TypeBase(other.GetNode())
    , ShapeClassEnum(*this)	// "ShapeClassEnum"
    , OtherShapeClass(*this)	// "OtherShapeClass"
{
}

void CShapeClassType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ShapeClassType"), _T("http://qifstandards.org/xsd/qif2"));
}

CShellFormEnumType::CShellFormEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CShellFormEnumType::CShellFormEnumType(CShellFormEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CShellSetType::CShellSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Shell(*this)	// "Shell"
{
}

CShellSetType::CShellSetType(CShellSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Shell(*this)	// "Shell"
{
}

void CShellSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ShellSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CShellType::CShellType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
    , Turned(*this)	// "@Turned"
    , Closed(*this)	// "@Closed"
    , Form(*this)	// "@Form"
    , FaceIds(*this)	// "FaceIds"
{
}

CShellType::CShellType(CShellType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
    , Turned(*this)	// "@Turned"
    , Closed(*this)	// "@Closed"
    , Form(*this)	// "@Form"
    , FaceIds(*this)	// "FaceIds"
{
}

void CShellType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ShellType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSignOffsType::CSignOffsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Employee(*this)	// "Employee"
{
}

CSignOffsType::CSignOffsType(CSignOffsType const& other)
    : TypeBase(other.GetNode())
    , Employee(*this)	// "Employee"
{
}

void CSignOffsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SignOffsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSimpleStudyPlanType::CSimpleStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(node)
{
}

CSimpleStudyPlanType::CSimpleStudyPlanType(CSimpleStudyPlanType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyPlanBaseType(other.GetNode())
{
}

void CSimpleStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SimpleStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSimpleStudyResultsType::CSimpleStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMultipleProductInstanceStudyResultsBaseType(node)
{
}

CSimpleStudyResultsType::CSimpleStudyResultsType(CSimpleStudyResultsType const& other)
    : ::qif191::t::CMultipleProductInstanceStudyResultsBaseType(other.GetNode())
{
}

void CSimpleStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SimpleStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSingleLeadThreadSpecificationType::CSingleLeadThreadSpecificationType(xercesc::DOMNode* const& node)
    : ::qif191::t::CThreadSpecificationDetailedBaseType(node)
    , ThreadDensity(*this)	// "ThreadDensity"
{
}

CSingleLeadThreadSpecificationType::CSingleLeadThreadSpecificationType(CSingleLeadThreadSpecificationType const& other)
    : ::qif191::t::CThreadSpecificationDetailedBaseType(other.GetNode())
    , ThreadDensity(*this)	// "ThreadDensity"
{
}

void CSingleLeadThreadSpecificationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SingleLeadThreadSpecificationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSlotEndEnumType::CSlotEndEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSlotEndEnumType::CSlotEndEnumType(CSlotEndEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSlotEndType::CSlotEndType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SlotEndEnum(*this)	// "SlotEndEnum"
    , OtherSlotEnd(*this)	// "OtherSlotEnd"
{
}

CSlotEndType::CSlotEndType(CSlotEndType const& other)
    : TypeBase(other.GetNode())
    , SlotEndEnum(*this)	// "SlotEndEnum"
    , OtherSlotEnd(*this)	// "OtherSlotEnd"
{
}

void CSlotEndType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SlotEndType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSoftwareType::CSoftwareType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , VendorName(*this)	// "VendorName"
    , ApplicationName(*this)	// "ApplicationName"
    , Version(*this)	// "Version"
    , Description(*this)	// "Description"
{
}

CSoftwareType::CSoftwareType(CSoftwareType const& other)
    : TypeBase(other.GetNode())
    , VendorName(*this)	// "VendorName"
    , ApplicationName(*this)	// "ApplicationName"
    , Version(*this)	// "Version"
    , Description(*this)	// "Description"
{
}

void CSoftwareType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SoftwareType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpecifiedDecimalType::CSpecifiedDecimalType(xercesc::DOMNode* const& node)
    : ::qif191::xs::CdecimalType(node)
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
{
}

CSpecifiedDecimalType::CSpecifiedDecimalType(CSpecifiedDecimalType const& other)
    : ::qif191::xs::CdecimalType(other.GetNode())
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
{
}

void CSpecifiedDecimalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpecifiedDecimalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedCharacteristicActualBaseType::CSpeedCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CSpeedCharacteristicActualBaseType::CSpeedCharacteristicActualBaseType(CSpeedCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CSpeedCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedCharacteristicDefinitionBaseType::CSpeedCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CSpeedCharacteristicDefinitionBaseType::CSpeedCharacteristicDefinitionBaseType(CSpeedCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CSpeedCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedCharacteristicItemBaseType::CSpeedCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CSpeedCharacteristicItemBaseType::CSpeedCharacteristicItemBaseType(CSpeedCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CSpeedCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedCharacteristicNominalBaseType::CSpeedCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CSpeedCharacteristicNominalBaseType::CSpeedCharacteristicNominalBaseType(CSpeedCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CSpeedCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedToleranceType::CSpeedToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CSpeedToleranceType::CSpeedToleranceType(CSpeedToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CSpeedToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedUnitType::CSpeedUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CSpeedUnitType::CSpeedUnitType(CSpeedUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CSpeedUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpeedValueType::CSpeedValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , speedUnit(*this)	// "@speedUnit"
{
}

CSpeedValueType::CSpeedValueType(CSpeedValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , speedUnit(*this)	// "@speedUnit"
{
}

void CSpeedValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpeedValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphere23CoreType::CSphere23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , TurnedV(*this)	// "@TurnedV"
    , Diameter(*this)	// "Diameter"
    , Location(*this)	// "Location"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

CSphere23CoreType::CSphere23CoreType(CSphere23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , TurnedV(*this)	// "@TurnedV"
    , Diameter(*this)	// "Diameter"
    , Location(*this)	// "Location"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

void CSphere23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Sphere23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphere23Type::CSphere23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Sphere23Core(*this)	// "Sphere23Core"
    , Transform(*this)	// "Transform"
{
}

CSphere23Type::CSphere23Type(CSphere23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Sphere23Core(*this)	// "Sphere23Core"
    , Transform(*this)	// "Transform"
{
}

void CSphere23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Sphere23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereActualDeterminationType::CSphereActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CSphereActualDeterminationType::CSphereActualDeterminationType(CSphereActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CSphereActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereBestFitType::CSphereBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CSphereBestFitType::CSphereBestFitType(CSphereBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CSphereBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereCastType::CSphereCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CSphereCastType::CSphereCastType(CSphereCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CSphereCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereCheckedFeatureType::CSphereCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CSphereCheckedFeatureType::CSphereCheckedFeatureType(CSphereCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CSphereCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereCheckedType::CSphereCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CSphereCheckedType::CSphereCheckedType(CSphereCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CSphereCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereConstructionMethodType::CSphereConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

CSphereConstructionMethodType::CSphereConstructionMethodType(CSphereConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void CSphereConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereCopyType::CSphereCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseSphere(*this)	// "BaseSphere"
{
}

CSphereCopyType::CSphereCopyType(CSphereCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseSphere(*this)	// "BaseSphere"
{
}

void CSphereCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereFeatureActualType::CSphereFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

CSphereFeatureActualType::CSphereFeatureActualType(CSphereFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

void CSphereFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereFeatureDefinitionType::CSphereFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
{
}

CSphereFeatureDefinitionType::CSphereFeatureDefinitionType(CSphereFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
{
}

void CSphereFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereFeatureItemType::CSphereFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CSphereFeatureItemType::CSphereFeatureItemType(CSphereFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CSphereFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereFeatureNominalType::CSphereFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

CSphereFeatureNominalType::CSphereFeatureNominalType(CSphereFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

void CSphereFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereFromScanType::CSphereFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Vector(*this)	// "Vector"
{
}

CSphereFromScanType::CSphereFromScanType(CSphereFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
    , Vector(*this)	// "Vector"
{
}

void CSphereFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpherePointSamplingStrategyEnumType::CSpherePointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSpherePointSamplingStrategyEnumType::CSpherePointSamplingStrategyEnumType(CSpherePointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSpherePointSamplingStrategyType::CSpherePointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CSpherePointSamplingStrategyType::CSpherePointSamplingStrategyType(CSpherePointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CSpherePointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpherePointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereRecompType::CSphereRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CSphereRecompType::CSphereRecompType(CSphereRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CSphereRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereTransformType::CSphereTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseSphere(*this)	// "BaseSphere"
    , Transformation(*this)	// "Transformation"
{
}

CSphereTransformType::CSphereTransformType(CSphereTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseSphere(*this)	// "BaseSphere"
    , Transformation(*this)	// "Transformation"
{
}

void CSphereTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphereType::CSphereType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CenterPoint(*this)	// "CenterPoint"
    , Diameter(*this)	// "Diameter"
{
}

CSphereType::CSphereType(CSphereType const& other)
    : TypeBase(other.GetNode())
    , CenterPoint(*this)	// "CenterPoint"
    , Diameter(*this)	// "Diameter"
{
}

void CSphereType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphereType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentActualDeterminationType::CSphericalSegmentActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CSphericalSegmentActualDeterminationType::CSphericalSegmentActualDeterminationType(CSphericalSegmentActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CSphericalSegmentActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentBestFitType::CSphericalSegmentBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CSphericalSegmentBestFitType::CSphericalSegmentBestFitType(CSphericalSegmentBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CSphericalSegmentBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentCastType::CSphericalSegmentCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CSphericalSegmentCastType::CSphericalSegmentCastType(CSphericalSegmentCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CSphericalSegmentCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentCheckedFeatureType::CSphericalSegmentCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CSphericalSegmentCheckedFeatureType::CSphericalSegmentCheckedFeatureType(CSphericalSegmentCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CSphericalSegmentCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentCheckedType::CSphericalSegmentCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CSphericalSegmentCheckedType::CSphericalSegmentCheckedType(CSphericalSegmentCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CSphericalSegmentCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentConstructionMethodType::CSphericalSegmentConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CSphericalSegmentConstructionMethodType::CSphericalSegmentConstructionMethodType(CSphericalSegmentConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CSphericalSegmentConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentCopyType::CSphericalSegmentCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseSphericalSegment(*this)	// "BaseSphericalSegment"
{
}

CSphericalSegmentCopyType::CSphericalSegmentCopyType(CSphericalSegmentCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseSphericalSegment(*this)	// "BaseSphericalSegment"
{
}

void CSphericalSegmentCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentFeatureActualType::CSphericalSegmentFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

CSphericalSegmentFeatureActualType::CSphericalSegmentFeatureActualType(CSphericalSegmentFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , Diameter(*this)	// "Diameter"
    , DiameterMin(*this)	// "DiameterMin"
    , DiameterMax(*this)	// "DiameterMax"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

void CSphericalSegmentFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentFeatureDefinitionType::CSphericalSegmentFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
{
}

CSphericalSegmentFeatureDefinitionType::CSphericalSegmentFeatureDefinitionType(CSphericalSegmentFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Diameter(*this)	// "Diameter"
{
}

void CSphericalSegmentFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentFeatureItemType::CSphericalSegmentFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CSphericalSegmentFeatureItemType::CSphericalSegmentFeatureItemType(CSphericalSegmentFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CSphericalSegmentFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentFeatureNominalType::CSphericalSegmentFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

CSphericalSegmentFeatureNominalType::CSphericalSegmentFeatureNominalType(CSphericalSegmentFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

void CSphericalSegmentFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentPointSamplingStrategyType::CSphericalSegmentPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CSphericalSegmentPointSamplingStrategyType::CSphericalSegmentPointSamplingStrategyType(CSphericalSegmentPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CSphericalSegmentPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentRecompType::CSphericalSegmentRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CSphericalSegmentRecompType::CSphericalSegmentRecompType(CSphericalSegmentRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CSphericalSegmentRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSphericalSegmentTransformType::CSphericalSegmentTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseSphericalSegment(*this)	// "BaseSphericalSegment"
    , Transformation(*this)	// "Transformation"
{
}

CSphericalSegmentTransformType::CSphericalSegmentTransformType(CSphericalSegmentTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseSphericalSegment(*this)	// "BaseSphericalSegment"
    , Transformation(*this)	// "Transformation"
{
}

void CSphericalSegmentTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SphericalSegmentTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpline12CoreType::CSpline12CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Normalized(*this)	// "@Normalized"
    , Knots(*this)	// "Knots"
    , Orders(*this)	// "Orders"
    , Coefficients(*this)	// "Coefficients"
{
}

CSpline12CoreType::CSpline12CoreType(CSpline12CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Normalized(*this)	// "@Normalized"
    , Knots(*this)	// "Knots"
    , Orders(*this)	// "Orders"
    , Coefficients(*this)	// "Coefficients"
{
}

void CSpline12CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Spline12CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpline12Type::CSpline12Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve12BaseType(node)
    , Spline12Core(*this)	// "Spline12Core"
{
}

CSpline12Type::CSpline12Type(CSpline12Type const& other)
    : ::qif191::t::CCurve12BaseType(other.GetNode())
    , Spline12Core(*this)	// "Spline12Core"
{
}

void CSpline12Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Spline12Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpline13CoreType::CSpline13CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurveCoreBaseType(node)
    , Normalized(*this)	// "@Normalized"
    , Knots(*this)	// "Knots"
    , Orders(*this)	// "Orders"
    , Coefficients(*this)	// "Coefficients"
{
}

CSpline13CoreType::CSpline13CoreType(CSpline13CoreType const& other)
    : ::qif191::t::CCurveCoreBaseType(other.GetNode())
    , Normalized(*this)	// "@Normalized"
    , Knots(*this)	// "Knots"
    , Orders(*this)	// "Orders"
    , Coefficients(*this)	// "Coefficients"
{
}

void CSpline13CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Spline13CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpline13Type::CSpline13Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CCurve13BaseType(node)
    , Spline13Core(*this)	// "Spline13Core"
    , Transform(*this)	// "Transform"
{
}

CSpline13Type::CSpline13Type(CSpline13Type const& other)
    : ::qif191::t::CCurve13BaseType(other.GetNode())
    , Spline13Core(*this)	// "Spline13Core"
    , Transform(*this)	// "Transform"
{
}

void CSpline13Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Spline13Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpline23CoreType::CSpline23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , Normalized(*this)	// "@Normalized"
    , KnotsU(*this)	// "KnotsU"
    , KnotsV(*this)	// "KnotsV"
    , OrdersU(*this)	// "OrdersU"
    , OrdersV(*this)	// "OrdersV"
    , Coefficients(*this)	// "Coefficients"
{
}

CSpline23CoreType::CSpline23CoreType(CSpline23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , Normalized(*this)	// "@Normalized"
    , KnotsU(*this)	// "KnotsU"
    , KnotsV(*this)	// "KnotsV"
    , OrdersU(*this)	// "OrdersU"
    , OrdersV(*this)	// "OrdersV"
    , Coefficients(*this)	// "Coefficients"
{
}

void CSpline23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Spline23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpline23Type::CSpline23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Spline23Core(*this)	// "Spline23Core"
    , Transform(*this)	// "Transform"
{
}

CSpline23Type::CSpline23Type(CSpline23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Spline23Core(*this)	// "Spline23Core"
    , Transform(*this)	// "Transform"
{
}

void CSpline23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Spline23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSquareCharacteristicActualType::CSquareCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CSquareCharacteristicActualType::CSquareCharacteristicActualType(CSquareCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CSquareCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SquareCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSquareCharacteristicDefinitionType::CSquareCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CSquareCharacteristicDefinitionType::CSquareCharacteristicDefinitionType(CSquareCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CSquareCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SquareCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSquareCharacteristicItemType::CSquareCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CSquareCharacteristicItemType::CSquareCharacteristicItemType(CSquareCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CSquareCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SquareCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSquareCharacteristicNominalType::CSquareCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CSquareCharacteristicNominalType::CSquareCharacteristicNominalType(CSquareCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CSquareCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SquareCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSquareCharacteristicStatsEvalType::CSquareCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CSquareCharacteristicStatsEvalType::CSquareCharacteristicStatsEvalType(CSquareCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CSquareCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SquareCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStabilityStudyPlanType::CStabilityStudyPlanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyPlanBaseType(node)
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , SampleSize(*this)	// "SampleSize"
    , SampleFrequency(*this)	// "SampleFrequency"
    , SamplingInterval(*this)	// "SamplingInterval"
{
}

CStabilityStudyPlanType::CStabilityStudyPlanType(CStabilityStudyPlanType const& other)
    : ::qif191::t::CStatisticalStudyPlanBaseType(other.GetNode())
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
    , SampleSize(*this)	// "SampleSize"
    , SampleFrequency(*this)	// "SampleFrequency"
    , SamplingInterval(*this)	// "SamplingInterval"
{
}

void CStabilityStudyPlanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StabilityStudyPlanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStabilityStudyResultsType::CStabilityStudyResultsType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatisticalStudyResultsBaseType(node)
    , SampleSize(*this)	// "SampleSize"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

CStabilityStudyResultsType::CStabilityStudyResultsType(CStabilityStudyResultsType const& other)
    : ::qif191::t::CStatisticalStudyResultsBaseType(other.GetNode())
    , SampleSize(*this)	// "SampleSize"
    , MeasurementDeviceIds(*this)	// "MeasurementDeviceIds"
{
}

void CStabilityStudyResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StabilityStudyResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatisticalStudiesResultsType::CStatisticalStudiesResultsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StatisticalStudyResults(*this)	// "StatisticalStudyResults"
    , BiasStudyResults(*this)	// "BiasStudyResults"
    , CapabilityStudyResults(*this)	// "CapabilityStudyResults"
    , FirstArticleStudyResults(*this)	// "FirstArticleStudyResults"
    , GageRandRStudyResults(*this)	// "GageRandRStudyResults"
    , LinearityStudyResults(*this)	// "LinearityStudyResults"
    , ProcessDifferenceStudyResults(*this)	// "ProcessDifferenceStudyResults"
    , ProductionStudyResults(*this)	// "ProductionStudyResults"
    , SimpleStudyResults(*this)	// "SimpleStudyResults"
    , StabilityStudyResults(*this)	// "StabilityStudyResults"
{
}

CStatisticalStudiesResultsType::CStatisticalStudiesResultsType(CStatisticalStudiesResultsType const& other)
    : TypeBase(other.GetNode())
    , StatisticalStudyResults(*this)	// "StatisticalStudyResults"
    , BiasStudyResults(*this)	// "BiasStudyResults"
    , CapabilityStudyResults(*this)	// "CapabilityStudyResults"
    , FirstArticleStudyResults(*this)	// "FirstArticleStudyResults"
    , GageRandRStudyResults(*this)	// "GageRandRStudyResults"
    , LinearityStudyResults(*this)	// "LinearityStudyResults"
    , ProcessDifferenceStudyResults(*this)	// "ProcessDifferenceStudyResults"
    , ProductionStudyResults(*this)	// "ProductionStudyResults"
    , SimpleStudyResults(*this)	// "SimpleStudyResults"
    , StabilityStudyResults(*this)	// "StabilityStudyResults"
{
}

void CStatisticalStudiesResultsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatisticalStudiesResultsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatisticalStudyPlanBaseType::CStatisticalStudyPlanBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , ThisStatisticalStudyPlanInstanceQPId(*this)	// "ThisStatisticalStudyPlanInstanceQPId"
    , FeatureItemIds(*this)	// "FeatureItemIds"
    , CalculateAverageFeatures(*this)	// "CalculateAverageFeatures"
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
    , StatsValuesPerChar(*this)	// "StatsValuesPerChar"
    , StatsValuesPerSubgroup(*this)	// "StatsValuesPerSubgroup"
    , StatsValuesSummary(*this)	// "StatsValuesSummary"
    , PreInspectionTraceability(*this)	// "PreInspectionTraceability"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
    , PlanId(*this)	// "PlanId"
    , CorrectiveActionPlanId(*this)	// "CorrectiveActionPlanId"
{
}

CStatisticalStudyPlanBaseType::CStatisticalStudyPlanBaseType(CStatisticalStudyPlanBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , ThisStatisticalStudyPlanInstanceQPId(*this)	// "ThisStatisticalStudyPlanInstanceQPId"
    , FeatureItemIds(*this)	// "FeatureItemIds"
    , CalculateAverageFeatures(*this)	// "CalculateAverageFeatures"
    , CharacteristicItemIds(*this)	// "CharacteristicItemIds"
    , StatsValuesPerChar(*this)	// "StatsValuesPerChar"
    , StatsValuesPerSubgroup(*this)	// "StatsValuesPerSubgroup"
    , StatsValuesSummary(*this)	// "StatsValuesSummary"
    , PreInspectionTraceability(*this)	// "PreInspectionTraceability"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
    , PlanId(*this)	// "PlanId"
    , CorrectiveActionPlanId(*this)	// "CorrectiveActionPlanId"
{
}

void CStatisticalStudyPlanBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatisticalStudyPlanBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatisticalStudyPlansType::CStatisticalStudyPlansType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StatisticalStudyPlan(*this)	// "StatisticalStudyPlan"
    , BiasStudyPlan(*this)	// "BiasStudyPlan"
    , CapabilityStudyPlan(*this)	// "CapabilityStudyPlan"
    , FirstArticleStudyPlan(*this)	// "FirstArticleStudyPlan"
    , GageRandRStudyPlan(*this)	// "GageRandRStudyPlan"
    , LinearityStudyPlan(*this)	// "LinearityStudyPlan"
    , ProcessDifferenceStudyPlan(*this)	// "ProcessDifferenceStudyPlan"
    , ProductionStudyPlan(*this)	// "ProductionStudyPlan"
    , SimpleStudyPlan(*this)	// "SimpleStudyPlan"
    , StabilityStudyPlan(*this)	// "StabilityStudyPlan"
{
}

CStatisticalStudyPlansType::CStatisticalStudyPlansType(CStatisticalStudyPlansType const& other)
    : TypeBase(other.GetNode())
    , StatisticalStudyPlan(*this)	// "StatisticalStudyPlan"
    , BiasStudyPlan(*this)	// "BiasStudyPlan"
    , CapabilityStudyPlan(*this)	// "CapabilityStudyPlan"
    , FirstArticleStudyPlan(*this)	// "FirstArticleStudyPlan"
    , GageRandRStudyPlan(*this)	// "GageRandRStudyPlan"
    , LinearityStudyPlan(*this)	// "LinearityStudyPlan"
    , ProcessDifferenceStudyPlan(*this)	// "ProcessDifferenceStudyPlan"
    , ProductionStudyPlan(*this)	// "ProductionStudyPlan"
    , SimpleStudyPlan(*this)	// "SimpleStudyPlan"
    , StabilityStudyPlan(*this)	// "StabilityStudyPlan"
{
}

void CStatisticalStudyPlansType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatisticalStudyPlansType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatisticalStudyResultsBaseType::CStatisticalStudyResultsBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , ThisStatisticalStudyResultsInstanceQPId(*this)	// "ThisStatisticalStudyResultsInstanceQPId"
    , Status(*this)	// "Status"
    , StudyIssue(*this)	// "StudyIssue"
    , InspectionTraceability(*this)	// "InspectionTraceability"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
    , StudyId(*this)	// "StudyId"
    , ResultsId(*this)	// "ResultsId"
    , ResultsQPId(*this)	// "ResultsQPId"
    , ResultsFile(*this)	// "ResultsFile"
    , AverageFeature(*this)	// "AverageFeature"
    , CharacteristicsStats(*this)	// "CharacteristicsStats"
    , LinearStatsSummary(*this)	// "LinearStatsSummary"
    , AngularStatsSummary(*this)	// "AngularStatsSummary"
    , AreaStatsSummary(*this)	// "AreaStatsSummary"
    , ForceStatsSummary(*this)	// "ForceStatsSummary"
    , MassStatsSummary(*this)	// "MassStatsSummary"
    , PressureStatsSummary(*this)	// "PressureStatsSummary"
    , SpeedStatsSummary(*this)	// "SpeedStatsSummary"
    , TemperatureStatsSummary(*this)	// "TemperatureStatsSummary"
    , TimeStatsSummary(*this)	// "TimeStatsSummary"
    , UserDefinedUnitStatsSummary(*this)	// "UserDefinedUnitStatsSummary"
    , StatsSummary(*this)	// "StatsSummary"
{
}

CStatisticalStudyResultsBaseType::CStatisticalStudyResultsBaseType(CStatisticalStudyResultsBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , ThisStatisticalStudyResultsInstanceQPId(*this)	// "ThisStatisticalStudyResultsInstanceQPId"
    , Status(*this)	// "Status"
    , StudyIssue(*this)	// "StudyIssue"
    , InspectionTraceability(*this)	// "InspectionTraceability"
    , Name(*this)	// "Name"
    , Description(*this)	// "Description"
    , StudyId(*this)	// "StudyId"
    , ResultsId(*this)	// "ResultsId"
    , ResultsQPId(*this)	// "ResultsQPId"
    , ResultsFile(*this)	// "ResultsFile"
    , AverageFeature(*this)	// "AverageFeature"
    , CharacteristicsStats(*this)	// "CharacteristicsStats"
    , LinearStatsSummary(*this)	// "LinearStatsSummary"
    , AngularStatsSummary(*this)	// "AngularStatsSummary"
    , AreaStatsSummary(*this)	// "AreaStatsSummary"
    , ForceStatsSummary(*this)	// "ForceStatsSummary"
    , MassStatsSummary(*this)	// "MassStatsSummary"
    , PressureStatsSummary(*this)	// "PressureStatsSummary"
    , SpeedStatsSummary(*this)	// "SpeedStatsSummary"
    , TemperatureStatsSummary(*this)	// "TemperatureStatsSummary"
    , TimeStatsSummary(*this)	// "TimeStatsSummary"
    , UserDefinedUnitStatsSummary(*this)	// "UserDefinedUnitStatsSummary"
    , StatsSummary(*this)	// "StatsSummary"
{
}

void CStatisticalStudyResultsBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatisticalStudyResultsBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatisticsType::CStatisticsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Version(*this)	// "Version"
    , StatisticalStudyPlans(*this)	// "StatisticalStudyPlans"
    , StatisticalStudiesResults(*this)	// "StatisticalStudiesResults"
    , CorrectiveActionPlans(*this)	// "CorrectiveActionPlans"
{
}

CStatisticsType::CStatisticsType(CStatisticsType const& other)
    : TypeBase(other.GetNode())
    , Version(*this)	// "Version"
    , StatisticalStudyPlans(*this)	// "StatisticalStudyPlans"
    , StatisticalStudiesResults(*this)	// "StatisticalStudiesResults"
    , CorrectiveActionPlans(*this)	// "CorrectiveActionPlans"
{
}

void CStatisticsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatisticsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsAngularType::CStatsAngularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CStatsAngularType::CStatsAngularType(CStatsAngularType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CStatsAngularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsAngularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsAreaType::CStatsAreaType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , areaUnit(*this)	// "@areaUnit"
{
}

CStatsAreaType::CStatsAreaType(CStatsAreaType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , areaUnit(*this)	// "@areaUnit"
{
}

void CStatsAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsArrayIdType::CStatsArrayIdType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Ids(*this)	// "Ids"
    , Exclusion(*this)	// "Exclusion"
{
}

CStatsArrayIdType::CStatsArrayIdType(CStatsArrayIdType const& other)
    : TypeBase(other.GetNode())
    , Ids(*this)	// "Ids"
    , Exclusion(*this)	// "Exclusion"
{
}

void CStatsArrayIdType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsArrayIdType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsBaseType::CStatsBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , TotalNumber(*this)	// "TotalNumber"
    , SubgroupTotalNumber(*this)	// "SubgroupTotalNumber"
    , EffectiveNumber(*this)	// "EffectiveNumber"
    , SubgroupEffectiveNumber(*this)	// "SubgroupEffectiveNumber"
    , NumberSubgroups(*this)	// "NumberSubgroups"
{
}

CStatsBaseType::CStatsBaseType(CStatsBaseType const& other)
    : TypeBase(other.GetNode())
    , TotalNumber(*this)	// "TotalNumber"
    , SubgroupTotalNumber(*this)	// "SubgroupTotalNumber"
    , EffectiveNumber(*this)	// "EffectiveNumber"
    , SubgroupEffectiveNumber(*this)	// "SubgroupEffectiveNumber"
    , NumberSubgroups(*this)	// "NumberSubgroups"
{
}

void CStatsBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsEvalStatusEnumType::CStatsEvalStatusEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CStatsEvalStatusEnumType::CStatsEvalStatusEnumType(CStatsEvalStatusEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CStatsEvalStatusType::CStatsEvalStatusType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StatsEvalStatusEnum(*this)	// "StatsEvalStatusEnum"
    , OtherStatsEvalStatus(*this)	// "OtherStatsEvalStatus"
{
}

CStatsEvalStatusType::CStatsEvalStatusType(CStatsEvalStatusType const& other)
    : TypeBase(other.GetNode())
    , StatsEvalStatusEnum(*this)	// "StatsEvalStatusEnum"
    , OtherStatsEvalStatus(*this)	// "OtherStatsEvalStatus"
{
}

void CStatsEvalStatusType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsEvalStatusType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsForceType::CStatsForceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , forceUnit(*this)	// "@forceUnit"
{
}

CStatsForceType::CStatsForceType(CStatsForceType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , forceUnit(*this)	// "@forceUnit"
{
}

void CStatsForceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsForceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsLinearType::CStatsLinearType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , linearUnit(*this)	// "@linearUnit"
{
}

CStatsLinearType::CStatsLinearType(CStatsLinearType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
{
}

void CStatsLinearType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsLinearType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsMassType::CStatsMassType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , massUnit(*this)	// "@massUnit"
{
}

CStatsMassType::CStatsMassType(CStatsMassType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , massUnit(*this)	// "@massUnit"
{
}

void CStatsMassType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsMassType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsNumericalBaseType::CStatsNumericalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , Average(*this)	// "Average"
    , SubgroupAverage(*this)	// "SubgroupAverage"
    , Difference(*this)	// "Difference"
    , SubgroupDifference(*this)	// "SubgroupDifference"
    , RootMeanSquare(*this)	// "RootMeanSquare"
    , Maximum(*this)	// "Maximum"
    , MaximumId(*this)	// "MaximumId"
    , SubgroupMaximum(*this)	// "SubgroupMaximum"
    , Minimum(*this)	// "Minimum"
    , MinimumId(*this)	// "MinimumId"
    , SubgroupMinimum(*this)	// "SubgroupMinimum"
    , Range(*this)	// "Range"
    , SubgroupRange(*this)	// "SubgroupRange"
    , AverageRange(*this)	// "AverageRange"
    , StandardDeviation(*this)	// "StandardDeviation"
    , Skew(*this)	// "Skew"
    , Kurtosis(*this)	// "Kurtosis"
    , Normality(*this)	// "Normality"
    , ProcessVariation(*this)	// "ProcessVariation"
    , EstimatedStandardDeviation(*this)	// "EstimatedStandardDeviation"
    , UpperControlLimit(*this)	// "UpperControlLimit"
    , LowerControlLimit(*this)	// "LowerControlLimit"
    , UpperControlLimitRange(*this)	// "UpperControlLimitRange"
    , LowerControlLimitRange(*this)	// "LowerControlLimitRange"
    , NumberOutOfControl(*this)	// "NumberOutOfControl"
    , OutOfControlIds(*this)	// "OutOfControlIds"
    , AppraiserVariation(*this)	// "AppraiserVariation"
    , EquipmentVariation(*this)	// "EquipmentVariation"
    , Interaction(*this)	// "Interaction"
    , GageRandR(*this)	// "GageRandR"
    , PartVariation(*this)	// "PartVariation"
    , TotalVariation(*this)	// "TotalVariation"
    , Linearity(*this)	// "Linearity"
    , Bias(*this)	// "Bias"
    , RelativeLinearity(*this)	// "RelativeLinearity"
    , RelativeBias(*this)	// "RelativeBias"
    , GoodnessOfFit(*this)	// "GoodnessOfFit"
    , RegressionSlope(*this)	// "RegressionSlope"
    , RegressionIntercept(*this)	// "RegressionIntercept"
    , UpperConfidenceLimit(*this)	// "UpperConfidenceLimit"
    , LowerConfidenceLimit(*this)	// "LowerConfidenceLimit"
    , TDistribution(*this)	// "TDistribution"
{
}

CStatsNumericalBaseType::CStatsNumericalBaseType(CStatsNumericalBaseType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , Average(*this)	// "Average"
    , SubgroupAverage(*this)	// "SubgroupAverage"
    , Difference(*this)	// "Difference"
    , SubgroupDifference(*this)	// "SubgroupDifference"
    , RootMeanSquare(*this)	// "RootMeanSquare"
    , Maximum(*this)	// "Maximum"
    , MaximumId(*this)	// "MaximumId"
    , SubgroupMaximum(*this)	// "SubgroupMaximum"
    , Minimum(*this)	// "Minimum"
    , MinimumId(*this)	// "MinimumId"
    , SubgroupMinimum(*this)	// "SubgroupMinimum"
    , Range(*this)	// "Range"
    , SubgroupRange(*this)	// "SubgroupRange"
    , AverageRange(*this)	// "AverageRange"
    , StandardDeviation(*this)	// "StandardDeviation"
    , Skew(*this)	// "Skew"
    , Kurtosis(*this)	// "Kurtosis"
    , Normality(*this)	// "Normality"
    , ProcessVariation(*this)	// "ProcessVariation"
    , EstimatedStandardDeviation(*this)	// "EstimatedStandardDeviation"
    , UpperControlLimit(*this)	// "UpperControlLimit"
    , LowerControlLimit(*this)	// "LowerControlLimit"
    , UpperControlLimitRange(*this)	// "UpperControlLimitRange"
    , LowerControlLimitRange(*this)	// "LowerControlLimitRange"
    , NumberOutOfControl(*this)	// "NumberOutOfControl"
    , OutOfControlIds(*this)	// "OutOfControlIds"
    , AppraiserVariation(*this)	// "AppraiserVariation"
    , EquipmentVariation(*this)	// "EquipmentVariation"
    , Interaction(*this)	// "Interaction"
    , GageRandR(*this)	// "GageRandR"
    , PartVariation(*this)	// "PartVariation"
    , TotalVariation(*this)	// "TotalVariation"
    , Linearity(*this)	// "Linearity"
    , Bias(*this)	// "Bias"
    , RelativeLinearity(*this)	// "RelativeLinearity"
    , RelativeBias(*this)	// "RelativeBias"
    , GoodnessOfFit(*this)	// "GoodnessOfFit"
    , RegressionSlope(*this)	// "RegressionSlope"
    , RegressionIntercept(*this)	// "RegressionIntercept"
    , UpperConfidenceLimit(*this)	// "UpperConfidenceLimit"
    , LowerConfidenceLimit(*this)	// "LowerConfidenceLimit"
    , TDistribution(*this)	// "TDistribution"
{
}

void CStatsNumericalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsNumericalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsPassFailType::CStatsPassFailType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , FailurePercentage(*this)	// "FailurePercentage"
    , NumberFailures(*this)	// "NumberFailures"
{
}

CStatsPassFailType::CStatsPassFailType(CStatsPassFailType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , FailurePercentage(*this)	// "FailurePercentage"
    , NumberFailures(*this)	// "NumberFailures"
{
}

void CStatsPassFailType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsPassFailType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsPressureType::CStatsPressureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , pressureUnit(*this)	// "@pressureUnit"
{
}

CStatsPressureType::CStatsPressureType(CStatsPressureType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , pressureUnit(*this)	// "@pressureUnit"
{
}

void CStatsPressureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsPressureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsSpeedType::CStatsSpeedType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , speedUnit(*this)	// "@speedUnit"
{
}

CStatsSpeedType::CStatsSpeedType(CStatsSpeedType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , speedUnit(*this)	// "@speedUnit"
{
}

void CStatsSpeedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsSpeedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsTemperatureType::CStatsTemperatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

CStatsTemperatureType::CStatsTemperatureType(CStatsTemperatureType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

void CStatsTemperatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsTemperatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsTimeType::CStatsTimeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsBaseType(node)
    , timeUnit(*this)	// "@timeUnit"
{
}

CStatsTimeType::CStatsTimeType(CStatsTimeType const& other)
    : ::qif191::t::CStatsBaseType(other.GetNode())
    , timeUnit(*this)	// "@timeUnit"
{
}

void CStatsTimeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsTimeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsUserDefinedUnitType::CStatsUserDefinedUnitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsNumericalBaseType(node)
    , unitName(*this)	// "@unitName"
{
}

CStatsUserDefinedUnitType::CStatsUserDefinedUnitType(CStatsUserDefinedUnitType const& other)
    : ::qif191::t::CStatsNumericalBaseType(other.GetNode())
    , unitName(*this)	// "@unitName"
{
}

void CStatsUserDefinedUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsUserDefinedUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsValuesEnumType::CStatsValuesEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CStatsValuesEnumType::CStatsValuesEnumType(CStatsValuesEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CStatsWithTolAngularType::CStatsWithTolAngularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CStatsWithTolAngularType::CStatsWithTolAngularType(CStatsWithTolAngularType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CStatsWithTolAngularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolAngularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolAreaType::CStatsWithTolAreaType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , areaUnit(*this)	// "@areaUnit"
{
}

CStatsWithTolAreaType::CStatsWithTolAreaType(CStatsWithTolAreaType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , areaUnit(*this)	// "@areaUnit"
{
}

void CStatsWithTolAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolForceType::CStatsWithTolForceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , forceUnit(*this)	// "@forceUnit"
{
}

CStatsWithTolForceType::CStatsWithTolForceType(CStatsWithTolForceType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , forceUnit(*this)	// "@forceUnit"
{
}

void CStatsWithTolForceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolForceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolLinearType::CStatsWithTolLinearType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , linearUnit(*this)	// "@linearUnit"
{
}

CStatsWithTolLinearType::CStatsWithTolLinearType(CStatsWithTolLinearType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
{
}

void CStatsWithTolLinearType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolLinearType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolMassType::CStatsWithTolMassType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , massUnit(*this)	// "@massUnit"
{
}

CStatsWithTolMassType::CStatsWithTolMassType(CStatsWithTolMassType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , massUnit(*this)	// "@massUnit"
{
}

void CStatsWithTolMassType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolMassType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolNumericalBaseType::CStatsWithTolNumericalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsNumericalBaseType(node)
    , NumberOutOfTolerance(*this)	// "NumberOutOfTolerance"
    , OutOfToleranceIds(*this)	// "OutOfToleranceIds"
    , SubgroupNumberOutOfTolerance(*this)	// "SubgroupNumberOutOfTolerance"
    , NumberOverUpperTolerance(*this)	// "NumberOverUpperTolerance"
    , OverUpperToleranceIds(*this)	// "OverUpperToleranceIds"
    , SubgroupNumberOverUpperTolerance(*this)	// "SubgroupNumberOverUpperTolerance"
    , NumberUnderLowerTolerance(*this)	// "NumberUnderLowerTolerance"
    , UnderLowerToleranceIds(*this)	// "UnderLowerToleranceIds"
    , SubgroupNumberUnderLowerTolerance(*this)	// "SubgroupNumberUnderLowerTolerance"
    , Cp(*this)	// "Cp"
    , Cpk(*this)	// "Cpk"
    , Pp(*this)	// "Pp"
    , Ppk(*this)	// "Ppk"
    , Cm(*this)	// "Cm"
    , Cmk(*this)	// "Cmk"
    , RelativeAppraiserVariation(*this)	// "RelativeAppraiserVariation"
    , RelativeEquipmentVariation(*this)	// "RelativeEquipmentVariation"
    , RelativeInteraction(*this)	// "RelativeInteraction"
    , RelativeGageRandR(*this)	// "RelativeGageRandR"
    , RelativePartVariation(*this)	// "RelativePartVariation"
    , RelativeTotalVariation(*this)	// "RelativeTotalVariation"
{
}

CStatsWithTolNumericalBaseType::CStatsWithTolNumericalBaseType(CStatsWithTolNumericalBaseType const& other)
    : ::qif191::t::CStatsNumericalBaseType(other.GetNode())
    , NumberOutOfTolerance(*this)	// "NumberOutOfTolerance"
    , OutOfToleranceIds(*this)	// "OutOfToleranceIds"
    , SubgroupNumberOutOfTolerance(*this)	// "SubgroupNumberOutOfTolerance"
    , NumberOverUpperTolerance(*this)	// "NumberOverUpperTolerance"
    , OverUpperToleranceIds(*this)	// "OverUpperToleranceIds"
    , SubgroupNumberOverUpperTolerance(*this)	// "SubgroupNumberOverUpperTolerance"
    , NumberUnderLowerTolerance(*this)	// "NumberUnderLowerTolerance"
    , UnderLowerToleranceIds(*this)	// "UnderLowerToleranceIds"
    , SubgroupNumberUnderLowerTolerance(*this)	// "SubgroupNumberUnderLowerTolerance"
    , Cp(*this)	// "Cp"
    , Cpk(*this)	// "Cpk"
    , Pp(*this)	// "Pp"
    , Ppk(*this)	// "Ppk"
    , Cm(*this)	// "Cm"
    , Cmk(*this)	// "Cmk"
    , RelativeAppraiserVariation(*this)	// "RelativeAppraiserVariation"
    , RelativeEquipmentVariation(*this)	// "RelativeEquipmentVariation"
    , RelativeInteraction(*this)	// "RelativeInteraction"
    , RelativeGageRandR(*this)	// "RelativeGageRandR"
    , RelativePartVariation(*this)	// "RelativePartVariation"
    , RelativeTotalVariation(*this)	// "RelativeTotalVariation"
{
}

void CStatsWithTolNumericalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolNumericalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolPressureType::CStatsWithTolPressureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , pressureUnit(*this)	// "@pressureUnit"
{
}

CStatsWithTolPressureType::CStatsWithTolPressureType(CStatsWithTolPressureType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , pressureUnit(*this)	// "@pressureUnit"
{
}

void CStatsWithTolPressureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolPressureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolSpeedType::CStatsWithTolSpeedType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , speedUnit(*this)	// "@speedUnit"
{
}

CStatsWithTolSpeedType::CStatsWithTolSpeedType(CStatsWithTolSpeedType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , speedUnit(*this)	// "@speedUnit"
{
}

void CStatsWithTolSpeedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolSpeedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolTemperatureType::CStatsWithTolTemperatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

CStatsWithTolTemperatureType::CStatsWithTolTemperatureType(CStatsWithTolTemperatureType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

void CStatsWithTolTemperatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolTemperatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolTimeType::CStatsWithTolTimeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , timeUnit(*this)	// "@timeUnit"
{
}

CStatsWithTolTimeType::CStatsWithTolTimeType(CStatsWithTolTimeType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , timeUnit(*this)	// "@timeUnit"
{
}

void CStatsWithTolTimeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolTimeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsWithTolUserDefinedUnitType::CStatsWithTolUserDefinedUnitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CStatsWithTolNumericalBaseType(node)
    , unitName(*this)	// "@unitName"
{
}

CStatsWithTolUserDefinedUnitType::CStatsWithTolUserDefinedUnitType(CStatsWithTolUserDefinedUnitType const& other)
    : ::qif191::t::CStatsWithTolNumericalBaseType(other.GetNode())
    , unitName(*this)	// "@unitName"
{
}

void CStatsWithTolUserDefinedUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsWithTolUserDefinedUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStepWithPredecessorsType::CStepWithPredecessorsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Predecessors(*this)	// "Predecessors"
    , Step(*this)	// "Step"
{
}

CStepWithPredecessorsType::CStepWithPredecessorsType(CStepWithPredecessorsType const& other)
    : TypeBase(other.GetNode())
    , Predecessors(*this)	// "Predecessors"
    , Step(*this)	// "Step"
{
}

void CStepWithPredecessorsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StepWithPredecessorsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStepsWithPredecessorsType::CStepsWithPredecessorsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StepWithPredecessors(*this)	// "StepWithPredecessors"
{
}

CStepsWithPredecessorsType::CStepsWithPredecessorsType(CStepsWithPredecessorsType const& other)
    : TypeBase(other.GetNode())
    , StepWithPredecessors(*this)	// "StepWithPredecessors"
{
}

void CStepsWithPredecessorsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StepsWithPredecessorsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessCharacteristicActualType::CStraightnessCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicActualBaseType(node)
    , MaxStraightness(*this)	// "MaxStraightness"
    , ZoneOrientation(*this)	// "ZoneOrientation"
    , ZoneLine(*this)	// "ZoneLine"
{
}

CStraightnessCharacteristicActualType::CStraightnessCharacteristicActualType(CStraightnessCharacteristicActualType const& other)
    : ::qif191::t::CFormCharacteristicActualBaseType(other.GetNode())
    , MaxStraightness(*this)	// "MaxStraightness"
    , ZoneOrientation(*this)	// "ZoneOrientation"
    , ZoneLine(*this)	// "ZoneLine"
{
}

void CStraightnessCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessCharacteristicDefinitionType::CStraightnessCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , ToleranceValue(*this)	// "ToleranceValue"
    , ToleranceZonePerUnitLength(*this)	// "ToleranceZonePerUnitLength"
    , MaterialCondition(*this)	// "MaterialCondition"
    , ZoneShape(*this)	// "ZoneShape"
{
}

CStraightnessCharacteristicDefinitionType::CStraightnessCharacteristicDefinitionType(CStraightnessCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , ToleranceValue(*this)	// "ToleranceValue"
    , ToleranceZonePerUnitLength(*this)	// "ToleranceZonePerUnitLength"
    , MaterialCondition(*this)	// "MaterialCondition"
    , ZoneShape(*this)	// "ZoneShape"
{
}

void CStraightnessCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessCharacteristicItemType::CStraightnessCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicItemBaseType(node)
{
}

CStraightnessCharacteristicItemType::CStraightnessCharacteristicItemType(CStraightnessCharacteristicItemType const& other)
    : ::qif191::t::CFormCharacteristicItemBaseType(other.GetNode())
{
}

void CStraightnessCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessCharacteristicNominalType::CStraightnessCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CStraightnessCharacteristicNominalType::CStraightnessCharacteristicNominalType(CStraightnessCharacteristicNominalType const& other)
    : ::qif191::t::CFormCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CStraightnessCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessCharacteristicStatsEvalType::CStraightnessCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(node)
    , MaxStraightnessStats(*this)	// "MaxStraightnessStats"
{
}

CStraightnessCharacteristicStatsEvalType::CStraightnessCharacteristicStatsEvalType(CStraightnessCharacteristicStatsEvalType const& other)
    : ::qif191::t::CFormCharacteristicStatsEvalBaseType(other.GetNode())
    , MaxStraightnessStats(*this)	// "MaxStraightnessStats"
{
}

void CStraightnessCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessDiametricalZoneType::CStraightnessDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CStraightnessDiametricalZoneType::CStraightnessDiametricalZoneType(CStraightnessDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
{
}

void CStraightnessDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessNonDiametricalZoneType::CStraightnessNonDiametricalZoneType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
{
}

CStraightnessNonDiametricalZoneType::CStraightnessNonDiametricalZoneType(CStraightnessNonDiametricalZoneType const& other)
    : TypeBase(other.GetNode())
    , ZoneOrientationVector(*this)	// "ZoneOrientationVector"
{
}

void CStraightnessNonDiametricalZoneType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessNonDiametricalZoneType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStraightnessZoneShapeType::CStraightnessZoneShapeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DiametricalZone(*this)	// "DiametricalZone"
    , NonDiametricalZone(*this)	// "NonDiametricalZone"
{
}

CStraightnessZoneShapeType::CStraightnessZoneShapeType(CStraightnessZoneShapeType const& other)
    : TypeBase(other.GetNode())
    , DiametricalZone(*this)	// "DiametricalZone"
    , NonDiametricalZone(*this)	// "NonDiametricalZone"
{
}

void CStraightnessZoneShapeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StraightnessZoneShapeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStringValuesType::CStringValuesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , StringValue(*this)	// "StringValue"
{
}

CStringValuesType::CStringValuesType(CStringValuesType const& other)
    : TypeBase(other.GetNode())
    , StringValue(*this)	// "StringValue"
{
}

void CStringValuesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StringValuesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStudyIssueType::CStudyIssueType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Traceability(*this)	// "Traceability"
    , AssignableCauseIds(*this)	// "AssignableCauseIds"
    , CorrectiveActionIds(*this)	// "CorrectiveActionIds"
    , Resolution(*this)	// "Resolution"
    , CharacteristicIds(*this)	// "CharacteristicIds"
    , SubgroupIds(*this)	// "SubgroupIds"
{
}

CStudyIssueType::CStudyIssueType(CStudyIssueType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Traceability(*this)	// "Traceability"
    , AssignableCauseIds(*this)	// "AssignableCauseIds"
    , CorrectiveActionIds(*this)	// "CorrectiveActionIds"
    , Resolution(*this)	// "Resolution"
    , CharacteristicIds(*this)	// "CharacteristicIds"
    , SubgroupIds(*this)	// "SubgroupIds"
{
}

void CStudyIssueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StudyIssueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSubgroupDecimalType::CSubgroupDecimalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualDecimalType(node)
    , subgroupId(*this)	// "@subgroupId"
{
}

CSubgroupDecimalType::CSubgroupDecimalType(CSubgroupDecimalType const& other)
    : ::qif191::t::CActualDecimalType(other.GetNode())
    , subgroupId(*this)	// "@subgroupId"
{
}

void CSubgroupDecimalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SubgroupDecimalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSubgroupIntegerType::CSubgroupIntegerType(xercesc::DOMNode* const& node)
    : ::qif191::xs::CpositiveIntegerType(node)
    , subgroupId(*this)	// "@subgroupId"
{
}

CSubgroupIntegerType::CSubgroupIntegerType(CSubgroupIntegerType const& other)
    : ::qif191::xs::CpositiveIntegerType(other.GetNode())
    , subgroupId(*this)	// "@subgroupId"
{
}

void CSubgroupIntegerType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SubgroupIntegerType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSubgroupStatsValuesEnumType::CSubgroupStatsValuesEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSubgroupStatsValuesEnumType::CSubgroupStatsValuesEnumType(CSubgroupStatsValuesEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSubstituteFeatureAlgorithmBaseType::CSubstituteFeatureAlgorithmBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSubstituteFeatureAlgorithmBaseType::CSubstituteFeatureAlgorithmBaseType(CSubstituteFeatureAlgorithmBaseType const& other)
    : TypeBase(other.GetNode())
{
}

void CSubstituteFeatureAlgorithmBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SubstituteFeatureAlgorithmBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsAngularType::CSummaryStatisticsAngularType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , angularUnit(*this)	// "@angularUnit"
{
}

CSummaryStatisticsAngularType::CSummaryStatisticsAngularType(CSummaryStatisticsAngularType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , angularUnit(*this)	// "@angularUnit"
{
}

void CSummaryStatisticsAngularType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsAngularType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsAreaType::CSummaryStatisticsAreaType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , areaUnit(*this)	// "@areaUnit"
{
}

CSummaryStatisticsAreaType::CSummaryStatisticsAreaType(CSummaryStatisticsAreaType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , areaUnit(*this)	// "@areaUnit"
{
}

void CSummaryStatisticsAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsForceType::CSummaryStatisticsForceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , forceUnit(*this)	// "@forceUnit"
{
}

CSummaryStatisticsForceType::CSummaryStatisticsForceType(CSummaryStatisticsForceType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , forceUnit(*this)	// "@forceUnit"
{
}

void CSummaryStatisticsForceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsForceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsLinearType::CSummaryStatisticsLinearType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , linearUnit(*this)	// "@linearUnit"
{
}

CSummaryStatisticsLinearType::CSummaryStatisticsLinearType(CSummaryStatisticsLinearType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
{
}

void CSummaryStatisticsLinearType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsLinearType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsMassType::CSummaryStatisticsMassType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , massUnit(*this)	// "@massUnit"
{
}

CSummaryStatisticsMassType::CSummaryStatisticsMassType(CSummaryStatisticsMassType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , massUnit(*this)	// "@massUnit"
{
}

void CSummaryStatisticsMassType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsMassType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsPressureType::CSummaryStatisticsPressureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , pressureUnit(*this)	// "@pressureUnit"
{
}

CSummaryStatisticsPressureType::CSummaryStatisticsPressureType(CSummaryStatisticsPressureType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , pressureUnit(*this)	// "@pressureUnit"
{
}

void CSummaryStatisticsPressureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsPressureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsSpeedType::CSummaryStatisticsSpeedType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , speedUnit(*this)	// "@speedUnit"
{
}

CSummaryStatisticsSpeedType::CSummaryStatisticsSpeedType(CSummaryStatisticsSpeedType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , speedUnit(*this)	// "@speedUnit"
{
}

void CSummaryStatisticsSpeedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsSpeedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsTemperatureType::CSummaryStatisticsTemperatureType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

CSummaryStatisticsTemperatureType::CSummaryStatisticsTemperatureType(CSummaryStatisticsTemperatureType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

void CSummaryStatisticsTemperatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsTemperatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsTimeType::CSummaryStatisticsTimeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , timeUnit(*this)	// "@timeUnit"
{
}

CSummaryStatisticsTimeType::CSummaryStatisticsTimeType(CSummaryStatisticsTimeType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , timeUnit(*this)	// "@timeUnit"
{
}

void CSummaryStatisticsTimeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsTimeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsType::CSummaryStatisticsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SummaryType(*this)	// "SummaryType"
    , Average(*this)	// "Average"
    , Maximum(*this)	// "Maximum"
    , Minimum(*this)	// "Minimum"
    , Range(*this)	// "Range"
    , StandardDeviation(*this)	// "StandardDeviation"
{
}

CSummaryStatisticsType::CSummaryStatisticsType(CSummaryStatisticsType const& other)
    : TypeBase(other.GetNode())
    , SummaryType(*this)	// "SummaryType"
    , Average(*this)	// "Average"
    , Maximum(*this)	// "Maximum"
    , Minimum(*this)	// "Minimum"
    , Range(*this)	// "Range"
    , StandardDeviation(*this)	// "StandardDeviation"
{
}

void CSummaryStatisticsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatisticsUserDefinedUnitType::CSummaryStatisticsUserDefinedUnitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSummaryStatisticsType(node)
    , unitName(*this)	// "@unitName"
{
}

CSummaryStatisticsUserDefinedUnitType::CSummaryStatisticsUserDefinedUnitType(CSummaryStatisticsUserDefinedUnitType const& other)
    : ::qif191::t::CSummaryStatisticsType(other.GetNode())
    , unitName(*this)	// "@unitName"
{
}

void CSummaryStatisticsUserDefinedUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatisticsUserDefinedUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatsValuesEnumType::CSummaryStatsValuesEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSummaryStatsValuesEnumType::CSummaryStatsValuesEnumType(CSummaryStatsValuesEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSummaryStatsValuesType::CSummaryStatsValuesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SummaryType(*this)	// "SummaryType"
    , SummaryStats(*this)	// "SummaryStats"
{
}

CSummaryStatsValuesType::CSummaryStatsValuesType(CSummaryStatsValuesType const& other)
    : TypeBase(other.GetNode())
    , SummaryType(*this)	// "SummaryType"
    , SummaryStats(*this)	// "SummaryStats"
{
}

void CSummaryStatsValuesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatsValuesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceBaseType::CSurfaceBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CGeometryBaseType(node)
{
}

CSurfaceBaseType::CSurfaceBaseType(CSurfaceBaseType const& other)
    : ::qif191::t::CGeometryBaseType(other.GetNode())
{
}

void CSurfaceBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceCoreBaseType::CSurfaceCoreBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Form(*this)	// "@Form"
{
}

CSurfaceCoreBaseType::CSurfaceCoreBaseType(CSurfaceCoreBaseType const& other)
    : TypeBase(other.GetNode())
    , Form(*this)	// "@Form"
{
}

void CSurfaceCoreBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceCoreBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceCoreType::CSurfaceCoreType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SurfaceCore(*this)	// "SurfaceCore"
    , Cone23Core(*this)	// "Cone23Core"
    , Cylinder23Core(*this)	// "Cylinder23Core"
    , Extrude23Core(*this)	// "Extrude23Core"
    , Nurbs23Core(*this)	// "Nurbs23Core"
    , Offset23Core(*this)	// "Offset23Core"
    , Plane23Core(*this)	// "Plane23Core"
    , Revolution23Core(*this)	// "Revolution23Core"
    , Ruled23Core(*this)	// "Ruled23Core"
    , Sphere23Core(*this)	// "Sphere23Core"
    , Spline23Core(*this)	// "Spline23Core"
    , Torus23Core(*this)	// "Torus23Core"
{
}

CSurfaceCoreType::CSurfaceCoreType(CSurfaceCoreType const& other)
    : TypeBase(other.GetNode())
    , SurfaceCore(*this)	// "SurfaceCore"
    , Cone23Core(*this)	// "Cone23Core"
    , Cylinder23Core(*this)	// "Cylinder23Core"
    , Extrude23Core(*this)	// "Extrude23Core"
    , Nurbs23Core(*this)	// "Nurbs23Core"
    , Offset23Core(*this)	// "Offset23Core"
    , Plane23Core(*this)	// "Plane23Core"
    , Revolution23Core(*this)	// "Revolution23Core"
    , Ruled23Core(*this)	// "Ruled23Core"
    , Sphere23Core(*this)	// "Sphere23Core"
    , Spline23Core(*this)	// "Spline23Core"
    , Torus23Core(*this)	// "Torus23Core"
{
}

void CSurfaceCoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceCoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceMeshSetType::CSurfaceMeshSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , MeshTriangle(*this)	// "MeshTriangle"
{
}

CSurfaceMeshSetType::CSurfaceMeshSetType(CSurfaceMeshSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , MeshTriangle(*this)	// "MeshTriangle"
{
}

void CSurfaceMeshSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceMeshSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionActualDeterminationType::CSurfaceOfRevolutionActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CSurfaceOfRevolutionActualDeterminationType::CSurfaceOfRevolutionActualDeterminationType(CSurfaceOfRevolutionActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CSurfaceOfRevolutionActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionBestFitType::CSurfaceOfRevolutionBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CSurfaceOfRevolutionBestFitType::CSurfaceOfRevolutionBestFitType(CSurfaceOfRevolutionBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CSurfaceOfRevolutionBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionCastType::CSurfaceOfRevolutionCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CSurfaceOfRevolutionCastType::CSurfaceOfRevolutionCastType(CSurfaceOfRevolutionCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CSurfaceOfRevolutionCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionCheckedFeatureType::CSurfaceOfRevolutionCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CSurfaceOfRevolutionCheckedFeatureType::CSurfaceOfRevolutionCheckedFeatureType(CSurfaceOfRevolutionCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CSurfaceOfRevolutionCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionCheckedType::CSurfaceOfRevolutionCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CSurfaceOfRevolutionCheckedType::CSurfaceOfRevolutionCheckedType(CSurfaceOfRevolutionCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CSurfaceOfRevolutionCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionConstructionMethodType::CSurfaceOfRevolutionConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CSurfaceOfRevolutionConstructionMethodType::CSurfaceOfRevolutionConstructionMethodType(CSurfaceOfRevolutionConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CSurfaceOfRevolutionConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionCopyType::CSurfaceOfRevolutionCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseSurfaceOfRevolution(*this)	// "BaseSurfaceOfRevolution"
{
}

CSurfaceOfRevolutionCopyType::CSurfaceOfRevolutionCopyType(CSurfaceOfRevolutionCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseSurfaceOfRevolution(*this)	// "BaseSurfaceOfRevolution"
{
}

void CSurfaceOfRevolutionCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionFeatureActualType::CSurfaceOfRevolutionFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
    , Length(*this)	// "Length"
    , Form(*this)	// "Form"
{
}

CSurfaceOfRevolutionFeatureActualType::CSurfaceOfRevolutionFeatureActualType(CSurfaceOfRevolutionFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
    , Length(*this)	// "Length"
    , Form(*this)	// "Form"
{
}

void CSurfaceOfRevolutionFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionFeatureDefinitionType::CSurfaceOfRevolutionFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , Length(*this)	// "Length"
{
}

CSurfaceOfRevolutionFeatureDefinitionType::CSurfaceOfRevolutionFeatureDefinitionType(CSurfaceOfRevolutionFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , Length(*this)	// "Length"
{
}

void CSurfaceOfRevolutionFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionFeatureItemType::CSurfaceOfRevolutionFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CSurfaceOfRevolutionFeatureItemType::CSurfaceOfRevolutionFeatureItemType(CSurfaceOfRevolutionFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CSurfaceOfRevolutionFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionFeatureNominalType::CSurfaceOfRevolutionFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
    , ReferenceFeatureNominalId(*this)	// "ReferenceFeatureNominalId"
{
}

CSurfaceOfRevolutionFeatureNominalType::CSurfaceOfRevolutionFeatureNominalType(CSurfaceOfRevolutionFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , Sweep(*this)	// "Sweep"
    , ReferenceFeatureNominalId(*this)	// "ReferenceFeatureNominalId"
{
}

void CSurfaceOfRevolutionFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionPointSamplingStrategyEnumType::CSurfaceOfRevolutionPointSamplingStrategyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSurfaceOfRevolutionPointSamplingStrategyEnumType::CSurfaceOfRevolutionPointSamplingStrategyEnumType(CSurfaceOfRevolutionPointSamplingStrategyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSurfaceOfRevolutionPointSamplingStrategyType::CSurfaceOfRevolutionPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CSurfaceOfRevolutionPointSamplingStrategyType::CSurfaceOfRevolutionPointSamplingStrategyType(CSurfaceOfRevolutionPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CSurfaceOfRevolutionPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionRecompType::CSurfaceOfRevolutionRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CSurfaceOfRevolutionRecompType::CSurfaceOfRevolutionRecompType(CSurfaceOfRevolutionRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CSurfaceOfRevolutionRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionTransformType::CSurfaceOfRevolutionTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseSurfaceOfRevolution(*this)	// "BaseSurfaceOfRevolution"
    , Transformation(*this)	// "Transformation"
{
}

CSurfaceOfRevolutionTransformType::CSurfaceOfRevolutionTransformType(CSurfaceOfRevolutionTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseSurfaceOfRevolution(*this)	// "BaseSurfaceOfRevolution"
    , Transformation(*this)	// "Transformation"
{
}

void CSurfaceOfRevolutionTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileCharacteristicActualType::CSurfaceProfileCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicActualBaseType(node)
{
}

CSurfaceProfileCharacteristicActualType::CSurfaceProfileCharacteristicActualType(CSurfaceProfileCharacteristicActualType const& other)
    : ::qif191::t::CProfileCharacteristicActualBaseType(other.GetNode())
{
}

void CSurfaceProfileCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileCharacteristicDefinitionType::CSurfaceProfileCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(node)
    , Extent(*this)	// "Extent"
{
}

CSurfaceProfileCharacteristicDefinitionType::CSurfaceProfileCharacteristicDefinitionType(CSurfaceProfileCharacteristicDefinitionType const& other)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(other.GetNode())
    , Extent(*this)	// "Extent"
{
}

void CSurfaceProfileCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileCharacteristicItemType::CSurfaceProfileCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicItemBaseType(node)
{
}

CSurfaceProfileCharacteristicItemType::CSurfaceProfileCharacteristicItemType(CSurfaceProfileCharacteristicItemType const& other)
    : ::qif191::t::CProfileCharacteristicItemBaseType(other.GetNode())
{
}

void CSurfaceProfileCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileCharacteristicNominalType::CSurfaceProfileCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(node)
    , CircularZoneLimit(*this)	// "CircularZoneLimit"
    , DirectionalZoneLimit(*this)	// "DirectionalZoneLimit"
    , RectangularZoneLimit(*this)	// "RectangularZoneLimit"
{
}

CSurfaceProfileCharacteristicNominalType::CSurfaceProfileCharacteristicNominalType(CSurfaceProfileCharacteristicNominalType const& other)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(other.GetNode())
    , CircularZoneLimit(*this)	// "CircularZoneLimit"
    , DirectionalZoneLimit(*this)	// "DirectionalZoneLimit"
    , RectangularZoneLimit(*this)	// "RectangularZoneLimit"
{
}

void CSurfaceProfileCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileCharacteristicStatsEvalType::CSurfaceProfileCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(node)
{
}

CSurfaceProfileCharacteristicStatsEvalType::CSurfaceProfileCharacteristicStatsEvalType(CSurfaceProfileCharacteristicStatsEvalType const& other)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CSurfaceProfileCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileNonUniformCharacteristicActualType::CSurfaceProfileNonUniformCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicActualBaseType(node)
{
}

CSurfaceProfileNonUniformCharacteristicActualType::CSurfaceProfileNonUniformCharacteristicActualType(CSurfaceProfileNonUniformCharacteristicActualType const& other)
    : ::qif191::t::CProfileCharacteristicActualBaseType(other.GetNode())
{
}

void CSurfaceProfileNonUniformCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileNonUniformCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileNonUniformCharacteristicDefinitionType::CSurfaceProfileNonUniformCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(node)
    , ToPointToleranceValue(*this)	// "ToPointToleranceValue"
{
}

CSurfaceProfileNonUniformCharacteristicDefinitionType::CSurfaceProfileNonUniformCharacteristicDefinitionType(CSurfaceProfileNonUniformCharacteristicDefinitionType const& other)
    : ::qif191::t::CProfileCharacteristicDefinitionBaseType(other.GetNode())
    , ToPointToleranceValue(*this)	// "ToPointToleranceValue"
{
}

void CSurfaceProfileNonUniformCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileNonUniformCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileNonUniformCharacteristicItemType::CSurfaceProfileNonUniformCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicItemBaseType(node)
{
}

CSurfaceProfileNonUniformCharacteristicItemType::CSurfaceProfileNonUniformCharacteristicItemType(CSurfaceProfileNonUniformCharacteristicItemType const& other)
    : ::qif191::t::CProfileCharacteristicItemBaseType(other.GetNode())
{
}

void CSurfaceProfileNonUniformCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileNonUniformCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileNonUniformCharacteristicNominalType::CSurfaceProfileNonUniformCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(node)
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

CSurfaceProfileNonUniformCharacteristicNominalType::CSurfaceProfileNonUniformCharacteristicNominalType(CSurfaceProfileNonUniformCharacteristicNominalType const& other)
    : ::qif191::t::CProfileCharacteristicNominalBaseType(other.GetNode())
    , ZoneLimit(*this)	// "ZoneLimit"
{
}

void CSurfaceProfileNonUniformCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileNonUniformCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceProfileNonUniformCharacteristicStatsEvalType::CSurfaceProfileNonUniformCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(node)
{
}

CSurfaceProfileNonUniformCharacteristicStatsEvalType::CSurfaceProfileNonUniformCharacteristicStatsEvalType(CSurfaceProfileNonUniformCharacteristicStatsEvalType const& other)
    : ::qif191::t::CProfileCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CSurfaceProfileNonUniformCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceProfileNonUniformCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceSetType::CSurfaceSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Surface(*this)	// "Surface"
    , Cone23(*this)	// "Cone23"
    , Cylinder23(*this)	// "Cylinder23"
    , Extrude23(*this)	// "Extrude23"
    , Nurbs23(*this)	// "Nurbs23"
    , Offset23(*this)	// "Offset23"
    , Plane23(*this)	// "Plane23"
    , Revolution23(*this)	// "Revolution23"
    , Ruled23(*this)	// "Ruled23"
    , Sphere23(*this)	// "Sphere23"
    , Spline23(*this)	// "Spline23"
    , Torus23(*this)	// "Torus23"
{
}

CSurfaceSetType::CSurfaceSetType(CSurfaceSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Surface(*this)	// "Surface"
    , Cone23(*this)	// "Cone23"
    , Cylinder23(*this)	// "Cylinder23"
    , Extrude23(*this)	// "Extrude23"
    , Nurbs23(*this)	// "Nurbs23"
    , Offset23(*this)	// "Offset23"
    , Plane23(*this)	// "Plane23"
    , Revolution23(*this)	// "Revolution23"
    , Ruled23(*this)	// "Ruled23"
    , Sphere23(*this)	// "Sphere23"
    , Spline23(*this)	// "Spline23"
    , Torus23(*this)	// "Torus23"
{
}

void CSurfaceSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceSubstituteFeatureAlgorithmEnumType::CSurfaceSubstituteFeatureAlgorithmEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSurfaceSubstituteFeatureAlgorithmEnumType::CSurfaceSubstituteFeatureAlgorithmEnumType(CSurfaceSubstituteFeatureAlgorithmEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CSurfaceSubstituteFeatureAlgorithmType::CSurfaceSubstituteFeatureAlgorithmType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(node)
    , SurfaceSubstituteFeatureAlgorithmEnum(*this)	// "SurfaceSubstituteFeatureAlgorithmEnum"
    , OtherSurfaceSubstituteFeatureAlgorithm(*this)	// "OtherSurfaceSubstituteFeatureAlgorithm"
{
}

CSurfaceSubstituteFeatureAlgorithmType::CSurfaceSubstituteFeatureAlgorithmType(CSurfaceSubstituteFeatureAlgorithmType const& other)
    : ::qif191::t::CSubstituteFeatureAlgorithmBaseType(other.GetNode())
    , SurfaceSubstituteFeatureAlgorithmEnum(*this)	// "SurfaceSubstituteFeatureAlgorithmEnum"
    , OtherSurfaceSubstituteFeatureAlgorithm(*this)	// "OtherSurfaceSubstituteFeatureAlgorithm"
{
}

void CSurfaceSubstituteFeatureAlgorithmType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceSubstituteFeatureAlgorithmType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceTextureCharacteristicActualType::CSurfaceTextureCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , RoughnessAverageValue(*this)	// "RoughnessAverageValue"
{
}

CSurfaceTextureCharacteristicActualType::CSurfaceTextureCharacteristicActualType(CSurfaceTextureCharacteristicActualType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , RoughnessAverageValue(*this)	// "RoughnessAverageValue"
{
}

void CSurfaceTextureCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceTextureCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceTextureCharacteristicDefinitionType::CSurfaceTextureCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , RoughnessAverage(*this)	// "RoughnessAverage"
{
}

CSurfaceTextureCharacteristicDefinitionType::CSurfaceTextureCharacteristicDefinitionType(CSurfaceTextureCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , RoughnessAverage(*this)	// "RoughnessAverage"
{
}

void CSurfaceTextureCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceTextureCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceTextureCharacteristicItemType::CSurfaceTextureCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CSurfaceTextureCharacteristicItemType::CSurfaceTextureCharacteristicItemType(CSurfaceTextureCharacteristicItemType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CSurfaceTextureCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceTextureCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceTextureCharacteristicNominalType::CSurfaceTextureCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
{
}

CSurfaceTextureCharacteristicNominalType::CSurfaceTextureCharacteristicNominalType(CSurfaceTextureCharacteristicNominalType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
{
}

void CSurfaceTextureCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceTextureCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceTextureCharacteristicStatsEvalType::CSurfaceTextureCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , RoughnessAverageValueStats(*this)	// "RoughnessAverageValueStats"
{
}

CSurfaceTextureCharacteristicStatsEvalType::CSurfaceTextureCharacteristicStatsEvalType(CSurfaceTextureCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , RoughnessAverageValueStats(*this)	// "RoughnessAverageValueStats"
{
}

void CSurfaceTextureCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceTextureCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSweepType::CSweepType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , DirBeg(*this)	// "DirBeg"
    , DomainAngle(*this)	// "DomainAngle"
{
}

CSweepType::CSweepType(CSweepType const& other)
    : TypeBase(other.GetNode())
    , DirBeg(*this)	// "DirBeg"
    , DomainAngle(*this)	// "DomainAngle"
{
}

void CSweepType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SweepType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSymmetryCharacteristicActualType::CSymmetryCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicActualBaseType(node)
    , SecondCompositeSegmentSymmetryActual(*this)	// "SecondCompositeSegmentSymmetryActual"
    , ThirdCompositeSegmentSymmetryActual(*this)	// "ThirdCompositeSegmentSymmetryActual"
{
}

CSymmetryCharacteristicActualType::CSymmetryCharacteristicActualType(CSymmetryCharacteristicActualType const& other)
    : ::qif191::t::CLocationCharacteristicActualBaseType(other.GetNode())
    , SecondCompositeSegmentSymmetryActual(*this)	// "SecondCompositeSegmentSymmetryActual"
    , ThirdCompositeSegmentSymmetryActual(*this)	// "ThirdCompositeSegmentSymmetryActual"
{
}

void CSymmetryCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SymmetryCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSymmetryCharacteristicDefinitionType::CSymmetryCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicDefinitionBaseType(node)
    , SecondCompositeSegmentSymmetryDefinition(*this)	// "SecondCompositeSegmentSymmetryDefinition"
    , ThirdCompositeSegmentSymmetryDefinition(*this)	// "ThirdCompositeSegmentSymmetryDefinition"
{
}

CSymmetryCharacteristicDefinitionType::CSymmetryCharacteristicDefinitionType(CSymmetryCharacteristicDefinitionType const& other)
    : ::qif191::t::CLocationCharacteristicDefinitionBaseType(other.GetNode())
    , SecondCompositeSegmentSymmetryDefinition(*this)	// "SecondCompositeSegmentSymmetryDefinition"
    , ThirdCompositeSegmentSymmetryDefinition(*this)	// "ThirdCompositeSegmentSymmetryDefinition"
{
}

void CSymmetryCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SymmetryCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSymmetryCharacteristicItemType::CSymmetryCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicItemBaseType(node)
{
}

CSymmetryCharacteristicItemType::CSymmetryCharacteristicItemType(CSymmetryCharacteristicItemType const& other)
    : ::qif191::t::CLocationCharacteristicItemBaseType(other.GetNode())
{
}

void CSymmetryCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SymmetryCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSymmetryCharacteristicNominalType::CSymmetryCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicNominalBaseType(node)
{
}

CSymmetryCharacteristicNominalType::CSymmetryCharacteristicNominalType(CSymmetryCharacteristicNominalType const& other)
    : ::qif191::t::CLocationCharacteristicNominalBaseType(other.GetNode())
{
}

void CSymmetryCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SymmetryCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSymmetryCharacteristicStatsEvalType::CSymmetryCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLocationCharacteristicStatsEvalType(node)
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , CompositeSegmentsStats(*this)	// "CompositeSegmentsStats"
{
}

CSymmetryCharacteristicStatsEvalType::CSymmetryCharacteristicStatsEvalType(CSymmetryCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLocationCharacteristicStatsEvalType(other.GetNode())
    , CapabilityCalculationMethod(*this)	// "CapabilityCalculationMethod"
    , CompositeSegmentsStats(*this)	// "CompositeSegmentsStats"
{
}

void CSymmetryCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SymmetryCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTableErrorsType::CTableErrorsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , AxialError(*this)	// "AxialError"
    , RadialError(*this)	// "RadialError"
    , TangentialError(*this)	// "TangentialError"
{
}

CTableErrorsType::CTableErrorsType(CTableErrorsType const& other)
    : TypeBase(other.GetNode())
    , AxialError(*this)	// "AxialError"
    , RadialError(*this)	// "RadialError"
    , TangentialError(*this)	// "TangentialError"
{
}

void CTableErrorsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TableErrorsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTargetPointActualType::CTargetPointActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActualPointWithNormalBaseType(node)
{
}

CTargetPointActualType::CTargetPointActualType(CTargetPointActualType const& other)
    : ::qif191::t::CActualPointWithNormalBaseType(other.GetNode())
{
}

void CTargetPointActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TargetPointActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTargetPointNominalType::CTargetPointNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPointWithNormalBaseType(node)
{
}

CTargetPointNominalType::CTargetPointNominalType(CTargetPointNominalType const& other)
    : ::qif191::t::CPointWithNormalBaseType(other.GetNode())
{
}

void CTargetPointNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TargetPointNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTargetPointsActualType::CTargetPointsActualType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
    , TargetPoint(*this)	// "TargetPoint"
{
}

CTargetPointsActualType::CTargetPointsActualType(CTargetPointsActualType const& other)
    : TypeBase(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , combinedUncertainty(*this)	// "@combinedUncertainty"
    , meanError(*this)	// "@meanError"
    , xCombinedUncertainty(*this)	// "@xCombinedUncertainty"
    , xMeanError(*this)	// "@xMeanError"
    , yCombinedUncertainty(*this)	// "@yCombinedUncertainty"
    , yMeanError(*this)	// "@yMeanError"
    , zCombinedUncertainty(*this)	// "@zCombinedUncertainty"
    , zMeanError(*this)	// "@zMeanError"
    , TargetPoint(*this)	// "TargetPoint"
{
}

void CTargetPointsActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TargetPointsActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTargetPointsNominalType::CTargetPointsNominalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , TargetPoint(*this)	// "TargetPoint"
{
}

CTargetPointsNominalType::CTargetPointsNominalType(CTargetPointsNominalType const& other)
    : TypeBase(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
    , TargetPoint(*this)	// "TargetPoint"
{
}

void CTargetPointsNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TargetPointsNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureCharacteristicActualBaseType::CTemperatureCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CTemperatureCharacteristicActualBaseType::CTemperatureCharacteristicActualBaseType(CTemperatureCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CTemperatureCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureCharacteristicDefinitionBaseType::CTemperatureCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CTemperatureCharacteristicDefinitionBaseType::CTemperatureCharacteristicDefinitionBaseType(CTemperatureCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CTemperatureCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureCharacteristicItemBaseType::CTemperatureCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CTemperatureCharacteristicItemBaseType::CTemperatureCharacteristicItemBaseType(CTemperatureCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CTemperatureCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureCharacteristicNominalBaseType::CTemperatureCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CTemperatureCharacteristicNominalBaseType::CTemperatureCharacteristicNominalBaseType(CTemperatureCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CTemperatureCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureToleranceType::CTemperatureToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CTemperatureToleranceType::CTemperatureToleranceType(CTemperatureToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CTemperatureToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureType::CTemperatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Attributes(*this)	// "Attributes"
    , Temperature(*this)	// "Temperature"
    , TimeStamp(*this)	// "TimeStamp"
{
}

CTemperatureType::CTemperatureType(CTemperatureType const& other)
    : TypeBase(other.GetNode())
    , Attributes(*this)	// "Attributes"
    , Temperature(*this)	// "Temperature"
    , TimeStamp(*this)	// "TimeStamp"
{
}

void CTemperatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureUnitType::CTemperatureUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CTemperatureUnitType::CTemperatureUnitType(CTemperatureUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CTemperatureUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperatureValueType::CTemperatureValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

CTemperatureValueType::CTemperatureValueType(CTemperatureValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , temperatureUnit(*this)	// "@temperatureUnit"
{
}

void CTemperatureValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperatureValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTemperaturesType::CTemperaturesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Temperature(*this)	// "Temperature"
{
}

CTemperaturesType::CTemperaturesType(CTemperaturesType const& other)
    : TypeBase(other.GetNode())
    , Temperature(*this)	// "Temperature"
{
}

void CTemperaturesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TemperaturesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTextInstructionType::CTextInstructionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CWorkInstructionBaseType(node)
    , TextInstruction(*this)	// "TextInstruction"
{
}

CTextInstructionType::CTextInstructionType(CTextInstructionType const& other)
    : ::qif191::t::CWorkInstructionBaseType(other.GetNode())
    , TextInstruction(*this)	// "TextInstruction"
{
}

void CTextInstructionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TextInstructionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTextThreadSpecificationType::CTextThreadSpecificationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , TextSpecification(*this)	// "TextSpecification"
{
}

CTextThreadSpecificationType::CTextThreadSpecificationType(CTextThreadSpecificationType const& other)
    : TypeBase(other.GetNode())
    , TextSpecification(*this)	// "TextSpecification"
{
}

void CTextThreadSpecificationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TextThreadSpecificationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTextType::CTextType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Data(*this)	// "Data"
    , XY(*this)	// "XY"
{
}

CTextType::CTextType(CTextType const& other)
    : TypeBase(other.GetNode())
    , Data(*this)	// "Data"
    , XY(*this)	// "XY"
{
}

void CTextType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TextType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTextsType::CTextsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FontIndex(*this)	// "@FontIndex"
    , LineHeight(*this)	// "@LineHeight"
    , N(*this)	// "@N"
    , Text(*this)	// "Text"
{
}

CTextsType::CTextsType(CTextsType const& other)
    : TypeBase(other.GetNode())
    , FontIndex(*this)	// "@FontIndex"
    , LineHeight(*this)	// "@LineHeight"
    , N(*this)	// "@N"
    , Text(*this)	// "Text"
{
}

void CTextsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TextsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThenPointsType::CThenPointsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , NumberOfPoints(*this)	// "NumberOfPoints"
    , MinPoints(*this)	// "MinPoints"
    , PointDensity(*this)	// "PointDensity"
    , MinPointDensity(*this)	// "MinPointDensity"
{
}

CThenPointsType::CThenPointsType(CThenPointsType const& other)
    : TypeBase(other.GetNode())
    , NumberOfPoints(*this)	// "NumberOfPoints"
    , MinPoints(*this)	// "MinPoints"
    , PointDensity(*this)	// "PointDensity"
    , MinPointDensity(*this)	// "MinPointDensity"
{
}

void CThenPointsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThenPointsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThicknessCharacteristicActualType::CThicknessCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CThicknessCharacteristicActualType::CThicknessCharacteristicActualType(CThicknessCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CThicknessCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThicknessCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThicknessCharacteristicDefinitionType::CThicknessCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CThicknessCharacteristicDefinitionType::CThicknessCharacteristicDefinitionType(CThicknessCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CThicknessCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThicknessCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThicknessCharacteristicItemType::CThicknessCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CThicknessCharacteristicItemType::CThicknessCharacteristicItemType(CThicknessCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CThicknessCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThicknessCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThicknessCharacteristicNominalType::CThicknessCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CThicknessCharacteristicNominalType::CThicknessCharacteristicNominalType(CThicknessCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CThicknessCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThicknessCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThicknessCharacteristicStatsEvalType::CThicknessCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CThicknessCharacteristicStatsEvalType::CThicknessCharacteristicStatsEvalType(CThicknessCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CThicknessCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThicknessCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadCharacteristicActualType::CThreadCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , PitchDiameter(*this)	// "PitchDiameter"
    , FunctionalSize(*this)	// "FunctionalSize"
{
}

CThreadCharacteristicActualType::CThreadCharacteristicActualType(CThreadCharacteristicActualType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , PitchDiameter(*this)	// "PitchDiameter"
    , FunctionalSize(*this)	// "FunctionalSize"
{
}

void CThreadCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadCharacteristicDefinitionType::CThreadCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , ThreadSpecificationId(*this)	// "ThreadSpecificationId"
{
}

CThreadCharacteristicDefinitionType::CThreadCharacteristicDefinitionType(CThreadCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , ThreadSpecificationId(*this)	// "ThreadSpecificationId"
{
}

void CThreadCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadCharacteristicItemType::CThreadCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CThreadCharacteristicItemType::CThreadCharacteristicItemType(CThreadCharacteristicItemType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CThreadCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadCharacteristicNominalType::CThreadCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
{
}

CThreadCharacteristicNominalType::CThreadCharacteristicNominalType(CThreadCharacteristicNominalType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
{
}

void CThreadCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadCharacteristicStatsEvalType::CThreadCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ThreadStats(*this)	// "ThreadStats"
    , PitchDiameterStats(*this)	// "PitchDiameterStats"
    , FunctionalSizeStats(*this)	// "FunctionalSizeStats"
{
}

CThreadCharacteristicStatsEvalType::CThreadCharacteristicStatsEvalType(CThreadCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ThreadStats(*this)	// "ThreadStats"
    , PitchDiameterStats(*this)	// "PitchDiameterStats"
    , FunctionalSizeStats(*this)	// "FunctionalSizeStats"
{
}

void CThreadCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadClassEnumType::CThreadClassEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CThreadClassEnumType::CThreadClassEnumType(CThreadClassEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CThreadClassType::CThreadClassType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ThreadClassEnum(*this)	// "ThreadClassEnum"
    , OtherThreadClass(*this)	// "OtherThreadClass"
{
}

CThreadClassType::CThreadClassType(CThreadClassType const& other)
    : TypeBase(other.GetNode())
    , ThreadClassEnum(*this)	// "ThreadClassEnum"
    , OtherThreadClass(*this)	// "OtherThreadClass"
{
}

void CThreadClassType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadClassType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadSeriesEnumType::CThreadSeriesEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CThreadSeriesEnumType::CThreadSeriesEnumType(CThreadSeriesEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CThreadSeriesType::CThreadSeriesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ThreadSeriesEnum(*this)	// "ThreadSeriesEnum"
    , OtherThreadSeries(*this)	// "OtherThreadSeries"
{
}

CThreadSeriesType::CThreadSeriesType(CThreadSeriesType const& other)
    : TypeBase(other.GetNode())
    , ThreadSeriesEnum(*this)	// "ThreadSeriesEnum"
    , OtherThreadSeries(*this)	// "OtherThreadSeries"
{
}

void CThreadSeriesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadSeriesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadSpecificationDetailedBaseType::CThreadSpecificationDetailedBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
    , Diameter(*this)	// "Diameter"
    , ThreadSeries(*this)	// "ThreadSeries"
    , ThreadToleranceClass(*this)	// "ThreadToleranceClass"
    , CrestDiameterToleranceClass(*this)	// "CrestDiameterToleranceClass"
    , LeftHanded(*this)	// "LeftHanded"
    , ModifiedThread(*this)	// "ModifiedThread"
    , ThreadLengthEngagement(*this)	// "ThreadLengthEngagement"
{
}

CThreadSpecificationDetailedBaseType::CThreadSpecificationDetailedBaseType(CThreadSpecificationDetailedBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
    , Diameter(*this)	// "Diameter"
    , ThreadSeries(*this)	// "ThreadSeries"
    , ThreadToleranceClass(*this)	// "ThreadToleranceClass"
    , CrestDiameterToleranceClass(*this)	// "CrestDiameterToleranceClass"
    , LeftHanded(*this)	// "LeftHanded"
    , ModifiedThread(*this)	// "ModifiedThread"
    , ThreadLengthEngagement(*this)	// "ThreadLengthEngagement"
{
}

void CThreadSpecificationDetailedBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadSpecificationDetailedBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadSpecificationType::CThreadSpecificationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SingleLeadSpecification(*this)	// "SingleLeadSpecification"
    , MultiLeadSpecification(*this)	// "MultiLeadSpecification"
    , TextThreadSpecification(*this)	// "TextThreadSpecification"
{
}

CThreadSpecificationType::CThreadSpecificationType(CThreadSpecificationType const& other)
    : TypeBase(other.GetNode())
    , SingleLeadSpecification(*this)	// "SingleLeadSpecification"
    , MultiLeadSpecification(*this)	// "MultiLeadSpecification"
    , TextThreadSpecification(*this)	// "TextThreadSpecification"
{
}

void CThreadSpecificationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadSpecificationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadSpecificationsType::CThreadSpecificationsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ThreadSpecification(*this)	// "ThreadSpecification"
{
}

CThreadSpecificationsType::CThreadSpecificationsType(CThreadSpecificationsType const& other)
    : TypeBase(other.GetNode())
    , ThreadSpecification(*this)	// "ThreadSpecification"
{
}

void CThreadSpecificationsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadSpecificationsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureActualDeterminationType::CThreadedFeatureActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CThreadedFeatureActualDeterminationType::CThreadedFeatureActualDeterminationType(CThreadedFeatureActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CThreadedFeatureActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureActualType::CThreadedFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Axis(*this)	// "Axis"
    , PitchDiameter(*this)	// "PitchDiameter"
    , FunctionalSize(*this)	// "FunctionalSize"
    , Length(*this)	// "Length"
{
}

CThreadedFeatureActualType::CThreadedFeatureActualType(CThreadedFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
    , PitchDiameter(*this)	// "PitchDiameter"
    , FunctionalSize(*this)	// "FunctionalSize"
    , Length(*this)	// "Length"
{
}

void CThreadedFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureBestFitType::CThreadedFeatureBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CThreadedFeatureBestFitType::CThreadedFeatureBestFitType(CThreadedFeatureBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CThreadedFeatureBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureCastType::CThreadedFeatureCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CThreadedFeatureCastType::CThreadedFeatureCastType(CThreadedFeatureCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CThreadedFeatureCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureCheckedFeatureType::CThreadedFeatureCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CThreadedFeatureCheckedFeatureType::CThreadedFeatureCheckedFeatureType(CThreadedFeatureCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CThreadedFeatureCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureCheckedType::CThreadedFeatureCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CThreadedFeatureCheckedType::CThreadedFeatureCheckedType(CThreadedFeatureCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CThreadedFeatureCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureConstructionMethodType::CThreadedFeatureConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromCylinder(*this)	// "FromCylinder"
{
}

CThreadedFeatureConstructionMethodType::CThreadedFeatureConstructionMethodType(CThreadedFeatureConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromCylinder(*this)	// "FromCylinder"
{
}

void CThreadedFeatureConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureCopyType::CThreadedFeatureCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseThreadedFeature(*this)	// "BaseThreadedFeature"
{
}

CThreadedFeatureCopyType::CThreadedFeatureCopyType(CThreadedFeatureCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseThreadedFeature(*this)	// "BaseThreadedFeature"
{
}

void CThreadedFeatureCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureDefinitionType::CThreadedFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , ThreadSpecificationId(*this)	// "ThreadSpecificationId"
    , Length(*this)	// "Length"
    , Bottom(*this)	// "Bottom"
{
}

CThreadedFeatureDefinitionType::CThreadedFeatureDefinitionType(CThreadedFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , ThreadSpecificationId(*this)	// "ThreadSpecificationId"
    , Length(*this)	// "Length"
    , Bottom(*this)	// "Bottom"
{
}

void CThreadedFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureFromCylinderType::CThreadedFeatureFromCylinderType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseCylinder(*this)	// "BaseCylinder"
    , Offset(*this)	// "Offset"
{
}

CThreadedFeatureFromCylinderType::CThreadedFeatureFromCylinderType(CThreadedFeatureFromCylinderType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseCylinder(*this)	// "BaseCylinder"
    , Offset(*this)	// "Offset"
{
}

void CThreadedFeatureFromCylinderType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureFromCylinderType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureItemType::CThreadedFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CThreadedFeatureItemType::CThreadedFeatureItemType(CThreadedFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CThreadedFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureNominalType::CThreadedFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Axis(*this)	// "Axis"
{
}

CThreadedFeatureNominalType::CThreadedFeatureNominalType(CThreadedFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Axis(*this)	// "Axis"
{
}

void CThreadedFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureRecompType::CThreadedFeatureRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CThreadedFeatureRecompType::CThreadedFeatureRecompType(CThreadedFeatureRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CThreadedFeatureRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadedFeatureTransformType::CThreadedFeatureTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseThreadedFeature(*this)	// "BaseThreadedFeature"
    , Transformation(*this)	// "Transformation"
{
}

CThreadedFeatureTransformType::CThreadedFeatureTransformType(CThreadedFeatureTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseThreadedFeature(*this)	// "BaseThreadedFeature"
    , Transformation(*this)	// "Transformation"
{
}

void CThreadedFeatureTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadedFeatureTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeCharacteristicActualBaseType::CTimeCharacteristicActualBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CTimeCharacteristicActualBaseType::CTimeCharacteristicActualBaseType(CTimeCharacteristicActualBaseType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CTimeCharacteristicActualBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeCharacteristicActualBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeCharacteristicDefinitionBaseType::CTimeCharacteristicDefinitionBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

CTimeCharacteristicDefinitionBaseType::CTimeCharacteristicDefinitionBaseType(CTimeCharacteristicDefinitionBaseType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
    , Tolerance(*this)	// "Tolerance"
    , NonTolerance(*this)	// "NonTolerance"
{
}

void CTimeCharacteristicDefinitionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeCharacteristicDefinitionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeCharacteristicItemBaseType::CTimeCharacteristicItemBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CTimeCharacteristicItemBaseType::CTimeCharacteristicItemBaseType(CTimeCharacteristicItemBaseType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CTimeCharacteristicItemBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeCharacteristicItemBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeCharacteristicNominalBaseType::CTimeCharacteristicNominalBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
{
}

CTimeCharacteristicNominalBaseType::CTimeCharacteristicNominalBaseType(CTimeCharacteristicNominalBaseType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
{
}

void CTimeCharacteristicNominalBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeCharacteristicNominalBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeDescriptionEnumType::CTimeDescriptionEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CTimeDescriptionEnumType::CTimeDescriptionEnumType(CTimeDescriptionEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CTimeDescriptionType::CTimeDescriptionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , TimeDescriptionEnum(*this)	// "TimeDescriptionEnum"
    , OtherTimeDescription(*this)	// "OtherTimeDescription"
{
}

CTimeDescriptionType::CTimeDescriptionType(CTimeDescriptionType const& other)
    : TypeBase(other.GetNode())
    , TimeDescriptionEnum(*this)	// "TimeDescriptionEnum"
    , OtherTimeDescription(*this)	// "OtherTimeDescription"
{
}

void CTimeDescriptionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeDescriptionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeToleranceType::CTimeToleranceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CTimeToleranceType::CTimeToleranceType(CTimeToleranceType const& other)
    : TypeBase(other.GetNode())
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CTimeToleranceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeToleranceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeUnitType::CTimeUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

CTimeUnitType::CTimeUnitType(CTimeUnitType const& other)
    : TypeBase(other.GetNode())
    , SIUnitName(*this)	// "SIUnitName"
    , UnitName(*this)	// "UnitName"
    , UnitConversion(*this)	// "UnitConversion"
{
}

void CTimeUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeValueType::CTimeValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , timeUnit(*this)	// "@timeUnit"
{
}

CTimeValueType::CTimeValueType(CTimeValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , timeUnit(*this)	// "@timeUnit"
{
}

void CTimeValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimesType::CTimesType(xercesc::DOMNode* const& node)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(node)
{
}

CTimesType::CTimesType(CTimesType const& other)
    : ::qif191::t::CBinaryArithmeticExpressionBaseType(other.GetNode())
{
}

void CTimesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToleranceDefinitionsType::CToleranceDefinitionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , LinearTolerance(*this)	// "LinearTolerance"
    , AngularTolerance(*this)	// "AngularTolerance"
{
}

CToleranceDefinitionsType::CToleranceDefinitionsType(CToleranceDefinitionsType const& other)
    : TypeBase(other.GetNode())
    , LinearTolerance(*this)	// "LinearTolerance"
    , AngularTolerance(*this)	// "AngularTolerance"
{
}

void CToleranceDefinitionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToleranceDefinitionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToleranceZonePerUnitAngleType::CToleranceZonePerUnitAngleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ToleranceValuePerUnit(*this)	// "ToleranceValuePerUnit"
    , UnitAngle(*this)	// "UnitAngle"
{
}

CToleranceZonePerUnitAngleType::CToleranceZonePerUnitAngleType(CToleranceZonePerUnitAngleType const& other)
    : TypeBase(other.GetNode())
    , ToleranceValuePerUnit(*this)	// "ToleranceValuePerUnit"
    , UnitAngle(*this)	// "UnitAngle"
{
}

void CToleranceZonePerUnitAngleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToleranceZonePerUnitAngleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToleranceZonePerUnitAreaType::CToleranceZonePerUnitAreaType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ToleranceValuePerUnit(*this)	// "ToleranceValuePerUnit"
    , RectangularUnitArea(*this)	// "RectangularUnitArea"
    , CircularUnitArea(*this)	// "CircularUnitArea"
{
}

CToleranceZonePerUnitAreaType::CToleranceZonePerUnitAreaType(CToleranceZonePerUnitAreaType const& other)
    : TypeBase(other.GetNode())
    , ToleranceValuePerUnit(*this)	// "ToleranceValuePerUnit"
    , RectangularUnitArea(*this)	// "RectangularUnitArea"
    , CircularUnitArea(*this)	// "CircularUnitArea"
{
}

void CToleranceZonePerUnitAreaType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToleranceZonePerUnitAreaType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToleranceZonePerUnitLengthType::CToleranceZonePerUnitLengthType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ToleranceValuePerUnit(*this)	// "ToleranceValuePerUnit"
    , UnitLength(*this)	// "UnitLength"
{
}

CToleranceZonePerUnitLengthType::CToleranceZonePerUnitLengthType(CToleranceZonePerUnitLengthType const& other)
    : TypeBase(other.GetNode())
    , ToleranceValuePerUnit(*this)	// "ToleranceValuePerUnit"
    , UnitLength(*this)	// "UnitLength"
{
}

void CToleranceZonePerUnitLengthType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToleranceZonePerUnitLengthType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToolType::CToolType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMeasurementResourceBaseType(node)
    , SensorIds(*this)	// "SensorIds"
{
}

CToolType::CToolType(CToolType const& other)
    : ::qif191::t::CMeasurementResourceBaseType(other.GetNode())
    , SensorIds(*this)	// "SensorIds"
{
}

void CToolType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToolType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToolsType::CToolsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Tool(*this)	// "Tool"
{
}

CToolsType::CToolsType(CToolsType const& other)
    : TypeBase(other.GetNode())
    , Tool(*this)	// "Tool"
{
}

void CToolsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToolsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTopologyBaseType::CTopologyBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CDrawableBaseType(node)
{
}

CTopologyBaseType::CTopologyBaseType(CTopologyBaseType const& other)
    : ::qif191::t::CDrawableBaseType(other.GetNode())
{
}

void CTopologyBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TopologyBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTopologyEnumType::CTopologyEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CTopologyEnumType::CTopologyEnumType(CTopologyEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CTopologySetType::CTopologySetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , VertexSet(*this)	// "VertexSet"
    , EdgeSet(*this)	// "EdgeSet"
    , LoopSet(*this)	// "LoopSet"
    , FaceSet(*this)	// "FaceSet"
    , ShellSet(*this)	// "ShellSet"
    , BodySet(*this)	// "BodySet"
    , PointCloudSet(*this)	// "PointCloudSet"
{
}

CTopologySetType::CTopologySetType(CTopologySetType const& other)
    : TypeBase(other.GetNode())
    , VertexSet(*this)	// "VertexSet"
    , EdgeSet(*this)	// "EdgeSet"
    , LoopSet(*this)	// "LoopSet"
    , FaceSet(*this)	// "FaceSet"
    , ShellSet(*this)	// "ShellSet"
    , BodySet(*this)	// "BodySet"
    , PointCloudSet(*this)	// "PointCloudSet"
{
}

void CTopologySetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TopologySetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentActualDeterminationType::CToroidalSegmentActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CToroidalSegmentActualDeterminationType::CToroidalSegmentActualDeterminationType(CToroidalSegmentActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CToroidalSegmentActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentBestFitType::CToroidalSegmentBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CToroidalSegmentBestFitType::CToroidalSegmentBestFitType(CToroidalSegmentBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CToroidalSegmentBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentCastType::CToroidalSegmentCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CToroidalSegmentCastType::CToroidalSegmentCastType(CToroidalSegmentCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CToroidalSegmentCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentCheckedFeatureType::CToroidalSegmentCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CToroidalSegmentCheckedFeatureType::CToroidalSegmentCheckedFeatureType(CToroidalSegmentCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CToroidalSegmentCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentCheckedType::CToroidalSegmentCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CToroidalSegmentCheckedType::CToroidalSegmentCheckedType(CToroidalSegmentCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CToroidalSegmentCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentConstructionMethodType::CToroidalSegmentConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

CToroidalSegmentConstructionMethodType::CToroidalSegmentConstructionMethodType(CToroidalSegmentConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
{
}

void CToroidalSegmentConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentCopyType::CToroidalSegmentCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseToroidalSegment(*this)	// "BaseToroidalSegment"
{
}

CToroidalSegmentCopyType::CToroidalSegmentCopyType(CToroidalSegmentCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseToroidalSegment(*this)	// "BaseToroidalSegment"
{
}

void CToroidalSegmentCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentFeatureActualType::CToroidalSegmentFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

CToroidalSegmentFeatureActualType::CToroidalSegmentFeatureActualType(CToroidalSegmentFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

void CToroidalSegmentFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentFeatureDefinitionType::CToroidalSegmentFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
{
}

CToroidalSegmentFeatureDefinitionType::CToroidalSegmentFeatureDefinitionType(CToroidalSegmentFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
{
}

void CToroidalSegmentFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentFeatureItemType::CToroidalSegmentFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CToroidalSegmentFeatureItemType::CToroidalSegmentFeatureItemType(CToroidalSegmentFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CToroidalSegmentFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentFeatureNominalType::CToroidalSegmentFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

CToroidalSegmentFeatureNominalType::CToroidalSegmentFeatureNominalType(CToroidalSegmentFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

void CToroidalSegmentFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentPointSamplingStrategyType::CToroidalSegmentPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CToroidalSegmentPointSamplingStrategyType::CToroidalSegmentPointSamplingStrategyType(CToroidalSegmentPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CToroidalSegmentPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentRecompType::CToroidalSegmentRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CToroidalSegmentRecompType::CToroidalSegmentRecompType(CToroidalSegmentRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CToroidalSegmentRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CToroidalSegmentTransformType::CToroidalSegmentTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseToroidalSegment(*this)	// "BaseToroidalSegment"
    , Transformation(*this)	// "Transformation"
{
}

CToroidalSegmentTransformType::CToroidalSegmentTransformType(CToroidalSegmentTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseToroidalSegment(*this)	// "BaseToroidalSegment"
    , Transformation(*this)	// "Transformation"
{
}

void CToroidalSegmentTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ToroidalSegmentTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorus23CoreType::CTorus23CoreType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceCoreBaseType(node)
    , TurnedV(*this)	// "@TurnedV"
    , OffsetV(*this)	// "@OffsetV"
    , ScaleV(*this)	// "@ScaleV"
    , DiameterMinor(*this)	// "DiameterMinor"
    , DiameterMajor(*this)	// "DiameterMajor"
    , Axis(*this)	// "Axis"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

CTorus23CoreType::CTorus23CoreType(CTorus23CoreType const& other)
    : ::qif191::t::CSurfaceCoreBaseType(other.GetNode())
    , TurnedV(*this)	// "@TurnedV"
    , OffsetV(*this)	// "@OffsetV"
    , ScaleV(*this)	// "@ScaleV"
    , DiameterMinor(*this)	// "DiameterMinor"
    , DiameterMajor(*this)	// "DiameterMajor"
    , Axis(*this)	// "Axis"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

void CTorus23CoreType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Torus23CoreType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorus23Type::CTorus23Type(xercesc::DOMNode* const& node)
    : ::qif191::t::CSurfaceBaseType(node)
    , Torus23Core(*this)	// "Torus23Core"
    , Transform(*this)	// "Transform"
{
}

CTorus23Type::CTorus23Type(CTorus23Type const& other)
    : ::qif191::t::CSurfaceBaseType(other.GetNode())
    , Torus23Core(*this)	// "Torus23Core"
    , Transform(*this)	// "Transform"
{
}

void CTorus23Type::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Torus23Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusActualDeterminationType::CTorusActualDeterminationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

CTorusActualDeterminationType::CTorusActualDeterminationType(CTorusActualDeterminationType const& other)
    : TypeBase(other.GetNode())
    , Checked(*this)	// "Checked"
    , Set(*this)	// "Set"
{
}

void CTorusActualDeterminationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusActualDeterminationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusBestFitType::CTorusBestFitType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CTorusBestFitType::CTorusBestFitType(CTorusBestFitType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CTorusBestFitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusBestFitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusCastType::CTorusCastType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeature(*this)	// "BaseFeature"
{
}

CTorusCastType::CTorusCastType(CTorusCastType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeature(*this)	// "BaseFeature"
{
}

void CTorusCastType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusCastType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusCheckedFeatureType::CTorusCheckedFeatureType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CheckDetails(*this)	// "CheckDetails"
{
}

CTorusCheckedFeatureType::CTorusCheckedFeatureType(CTorusCheckedFeatureType const& other)
    : TypeBase(other.GetNode())
    , CheckDetails(*this)	// "CheckDetails"
{
}

void CTorusCheckedFeatureType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusCheckedFeatureType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusCheckedType::CTorusCheckedType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

CTorusCheckedType::CTorusCheckedType(CTorusCheckedType const& other)
    : TypeBase(other.GetNode())
    , Measured(*this)	// "Measured"
    , Constructed(*this)	// "Constructed"
{
}

void CTorusCheckedType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusCheckedType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusConstructionMethodType::CTorusConstructionMethodType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

CTorusConstructionMethodType::CTorusConstructionMethodType(CTorusConstructionMethodType const& other)
    : TypeBase(other.GetNode())
    , BestFit(*this)	// "BestFit"
    , Recompensated(*this)	// "Recompensated"
    , Copy(*this)	// "Copy"
    , Cast(*this)	// "Cast"
    , Transform(*this)	// "Transform"
    , FromScan(*this)	// "FromScan"
{
}

void CTorusConstructionMethodType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusConstructionMethodType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusCopyType::CTorusCopyType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseTorus(*this)	// "BaseTorus"
{
}

CTorusCopyType::CTorusCopyType(CTorusCopyType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseTorus(*this)	// "BaseTorus"
{
}

void CTorusCopyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusCopyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusFeatureActualType::CTorusFeatureActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureActualBaseType(node)
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

CTorusFeatureActualType::CTorusFeatureActualType(CTorusFeatureActualType const& other)
    : ::qif191::t::CFeatureActualBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
    , Form(*this)	// "Form"
{
}

void CTorusFeatureActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusFeatureActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusFeatureDefinitionType::CTorusFeatureDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureDefinitionBaseType(node)
    , InternalExternal(*this)	// "InternalExternal"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
{
}

CTorusFeatureDefinitionType::CTorusFeatureDefinitionType(CTorusFeatureDefinitionType const& other)
    : ::qif191::t::CFeatureDefinitionBaseType(other.GetNode())
    , InternalExternal(*this)	// "InternalExternal"
    , MinorDiameter(*this)	// "MinorDiameter"
    , MajorDiameter(*this)	// "MajorDiameter"
{
}

void CTorusFeatureDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusFeatureDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusFeatureItemType::CTorusFeatureItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureItemBaseType(node)
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

CTorusFeatureItemType::CTorusFeatureItemType(CTorusFeatureItemType const& other)
    : ::qif191::t::CFeatureItemBaseType(other.GetNode())
    , DeterminationMode(*this)	// "DeterminationMode"
    , SubstituteFeatureAlgorithm(*this)	// "SubstituteFeatureAlgorithm"
{
}

void CTorusFeatureItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusFeatureItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusFeatureNominalType::CTorusFeatureNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CFeatureNominalBaseType(node)
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

CTorusFeatureNominalType::CTorusFeatureNominalType(CTorusFeatureNominalType const& other)
    : ::qif191::t::CFeatureNominalBaseType(other.GetNode())
    , Location(*this)	// "Location"
    , AxisVector(*this)	// "AxisVector"
    , LatitudeLongitudeSweep(*this)	// "LatitudeLongitudeSweep"
{
}

void CTorusFeatureNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusFeatureNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusFromScanType::CTorusFromScanType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

CTorusFromScanType::CTorusFromScanType(CTorusFromScanType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , SurfaceFeature(*this)	// "SurfaceFeature"
    , SearchRadius(*this)	// "SearchRadius"
{
}

void CTorusFromScanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusFromScanType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusPointSamplingStrategyType::CTorusPointSamplingStrategyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

CTorusPointSamplingStrategyType::CTorusPointSamplingStrategyType(CTorusPointSamplingStrategyType const& other)
    : TypeBase(other.GetNode())
    , PointSamplingStrategyEnum(*this)	// "PointSamplingStrategyEnum"
    , UserDefinedStrategy(*this)	// "UserDefinedStrategy"
{
}

void CTorusPointSamplingStrategyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusPointSamplingStrategyType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusRecompType::CTorusRecompType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

CTorusRecompType::CTorusRecompType(CTorusRecompType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseFeaturePointList(*this)	// "BaseFeaturePointList"
{
}

void CTorusRecompType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusRecompType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTorusTransformType::CTorusTransformType(xercesc::DOMNode* const& node)
    : ::qif191::t::CConstructionMethodBaseType(node)
    , BaseTorus(*this)	// "BaseTorus"
    , Transformation(*this)	// "Transformation"
{
}

CTorusTransformType::CTorusTransformType(CTorusTransformType const& other)
    : ::qif191::t::CConstructionMethodBaseType(other.GetNode())
    , BaseTorus(*this)	// "BaseTorus"
    , Transformation(*this)	// "Transformation"
{
}

void CTorusTransformType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TorusTransformType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTotalRunoutCharacteristicActualType::CTotalRunoutCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicActualBaseType(node)
{
}

CTotalRunoutCharacteristicActualType::CTotalRunoutCharacteristicActualType(CTotalRunoutCharacteristicActualType const& other)
    : ::qif191::t::CRunoutCharacteristicActualBaseType(other.GetNode())
{
}

void CTotalRunoutCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TotalRunoutCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTotalRunoutCharacteristicDefinitionType::CTotalRunoutCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicDefinitionBaseType(node)
{
}

CTotalRunoutCharacteristicDefinitionType::CTotalRunoutCharacteristicDefinitionType(CTotalRunoutCharacteristicDefinitionType const& other)
    : ::qif191::t::CRunoutCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CTotalRunoutCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TotalRunoutCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTotalRunoutCharacteristicItemType::CTotalRunoutCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicItemBaseType(node)
{
}

CTotalRunoutCharacteristicItemType::CTotalRunoutCharacteristicItemType(CTotalRunoutCharacteristicItemType const& other)
    : ::qif191::t::CRunoutCharacteristicItemBaseType(other.GetNode())
{
}

void CTotalRunoutCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TotalRunoutCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTotalRunoutCharacteristicNominalType::CTotalRunoutCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicNominalBaseType(node)
{
}

CTotalRunoutCharacteristicNominalType::CTotalRunoutCharacteristicNominalType(CTotalRunoutCharacteristicNominalType const& other)
    : ::qif191::t::CRunoutCharacteristicNominalBaseType(other.GetNode())
{
}

void CTotalRunoutCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TotalRunoutCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTotalRunoutCharacteristicStatsEvalType::CTotalRunoutCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CRunoutCharacteristicStatsEvalBaseType(node)
{
}

CTotalRunoutCharacteristicStatsEvalType::CTotalRunoutCharacteristicStatsEvalType(CTotalRunoutCharacteristicStatsEvalType const& other)
    : ::qif191::t::CRunoutCharacteristicStatsEvalBaseType(other.GetNode())
{
}

void CTotalRunoutCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TotalRunoutCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTouchProbeType::CTouchProbeType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSensorType(node)
    , TipDiameter(*this)	// "TipDiameter"
{
}

CTouchProbeType::CTouchProbeType(CTouchProbeType const& other)
    : ::qif191::t::CSensorType(other.GetNode())
    , TipDiameter(*this)	// "TipDiameter"
{
}

void CTouchProbeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TouchProbeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTransformInstanceType::CTransformInstanceType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTransformMatrixType(node)
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Name(*this)	// "Name"
{
}

CTransformInstanceType::CTransformInstanceType(CTransformInstanceType const& other)
    : ::qif191::t::CTransformMatrixType(other.GetNode())
    , id(*this)	// "@id"
    , Attributes(*this)	// "Attributes"
    , Name(*this)	// "Name"
{
}

void CTransformInstanceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TransformInstanceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTransformListType::CTransformListType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Transform(*this)	// "Transform"
{
}

CTransformListType::CTransformListType(CTransformListType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Transform(*this)	// "Transform"
{
}

void CTransformListType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TransformListType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTransformMatrixType::CTransformMatrixType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCoordinateSystemCoreType(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

CTransformMatrixType::CTransformMatrixType(CTransformMatrixType const& other)
    : ::qif191::t::CCoordinateSystemCoreType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

void CTransformMatrixType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TransformMatrixType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTransformRotationType::CTransformRotationType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XDirection(*this)	// "XDirection"
    , YDirection(*this)	// "YDirection"
    , ZDirection(*this)	// "ZDirection"
{
}

CTransformRotationType::CTransformRotationType(CTransformRotationType const& other)
    : TypeBase(other.GetNode())
    , XDirection(*this)	// "XDirection"
    , YDirection(*this)	// "YDirection"
    , ZDirection(*this)	// "ZDirection"
{
}

void CTransformRotationType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TransformRotationType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTransformationReferenceType::CTransformationReferenceType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

CTransformationReferenceType::CTransformationReferenceType(CTransformationReferenceType const& other)
    : TypeBase(other.GetNode())
    , ReferencedComponent(*this)	// "ReferencedComponent"
    , CoordinateSystemId(*this)	// "CoordinateSystemId"
    , SequenceNumber(*this)	// "SequenceNumber"
{
}

void CTransformationReferenceType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TransformationReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTypeOfCoordinatesType::CTypeOfCoordinatesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , CoordinateEnum(*this)	// "CoordinateEnum"
    , OtherCoordinate(*this)	// "OtherCoordinate"
{
}

CTypeOfCoordinatesType::CTypeOfCoordinatesType(CTypeOfCoordinatesType const& other)
    : TypeBase(other.GetNode())
    , CoordinateEnum(*this)	// "CoordinateEnum"
    , OtherCoordinate(*this)	// "OtherCoordinate"
{
}

void CTypeOfCoordinatesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TypeOfCoordinatesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUniformScaleType::CUniformScaleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ScaleFactor(*this)	// "ScaleFactor"
{
}

CUniformScaleType::CUniformScaleType(CUniformScaleType const& other)
    : TypeBase(other.GetNode())
    , ScaleFactor(*this)	// "ScaleFactor"
{
}

void CUniformScaleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UniformScaleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUnitConversionType::CUnitConversionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Factor(*this)	// "Factor"
    , Offset(*this)	// "Offset"
{
}

CUnitConversionType::CUnitConversionType(CUnitConversionType const& other)
    : TypeBase(other.GetNode())
    , Factor(*this)	// "Factor"
    , Offset(*this)	// "Offset"
{
}

void CUnitConversionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UnitConversionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUnitVector2dSimpleType::CUnitVector2dSimpleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CUnitVector2dSimpleType::CUnitVector2dSimpleType(CUnitVector2dSimpleType const& other)
    : TypeBase(other.GetNode())
{
}


CUnitVectorSimpleType::CUnitVectorSimpleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CUnitVectorSimpleType::CUnitVectorSimpleType(CUnitVectorSimpleType const& other)
    : TypeBase(other.GetNode())
{
}


CUnitVectorType::CUnitVectorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CUnitVectorSimpleTypeType(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

CUnitVectorType::CUnitVectorType(CUnitVectorType const& other)
    : ::qif191::t::CUnitVectorSimpleTypeType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

void CUnitVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UnitVectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUnnumberedPlanElementsType::CUnnumberedPlanElementsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , PlanElement(*this)	// "PlanElement"
    , EvaluateSpecifiedCharacteristics(*this)	// "EvaluateSpecifiedCharacteristics"
    , MeasureEvaluateAll(*this)	// "MeasureEvaluateAll"
    , MeasureEvaluateSpecified(*this)	// "MeasureEvaluateSpecified"
    , MeasureSpecifiedFeatures(*this)	// "MeasureSpecifiedFeatures"
    , MeasureSpecifiedMeasurands(*this)	// "MeasureSpecifiedMeasurands"
    , OneOfActionGroup(*this)	// "OneOfActionGroup"
    , OrderedActionGroup(*this)	// "OrderedActionGroup"
    , PartiallyOrderedActionGroup(*this)	// "PartiallyOrderedActionGroup"
    , PickSomeActionGroup(*this)	// "PickSomeActionGroup"
    , UnorderedActionGroup(*this)	// "UnorderedActionGroup"
{
}

CUnnumberedPlanElementsType::CUnnumberedPlanElementsType(CUnnumberedPlanElementsType const& other)
    : TypeBase(other.GetNode())
    , PlanElement(*this)	// "PlanElement"
    , EvaluateSpecifiedCharacteristics(*this)	// "EvaluateSpecifiedCharacteristics"
    , MeasureEvaluateAll(*this)	// "MeasureEvaluateAll"
    , MeasureEvaluateSpecified(*this)	// "MeasureEvaluateSpecified"
    , MeasureSpecifiedFeatures(*this)	// "MeasureSpecifiedFeatures"
    , MeasureSpecifiedMeasurands(*this)	// "MeasureSpecifiedMeasurands"
    , OneOfActionGroup(*this)	// "OneOfActionGroup"
    , OrderedActionGroup(*this)	// "OrderedActionGroup"
    , PartiallyOrderedActionGroup(*this)	// "PartiallyOrderedActionGroup"
    , PickSomeActionGroup(*this)	// "PickSomeActionGroup"
    , UnorderedActionGroup(*this)	// "UnorderedActionGroup"
{
}

void CUnnumberedPlanElementsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UnnumberedPlanElementsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUnorderedActionGroupType::CUnorderedActionGroupType(xercesc::DOMNode* const& node)
    : ::qif191::t::CActionGroupBaseType(node)
    , Steps(*this)	// "Steps"
{
}

CUnorderedActionGroupType::CUnorderedActionGroupType(CUnorderedActionGroupType const& other)
    : ::qif191::t::CActionGroupBaseType(other.GetNode())
    , Steps(*this)	// "Steps"
{
}

void CUnorderedActionGroupType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UnorderedActionGroupType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDataXMLType::CUserDataXMLType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CUserDataXMLType::CUserDataXMLType(CUserDataXMLType const& other)
    : TypeBase(other.GetNode())
{
}

void CUserDataXMLType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDataXMLType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAngularCharacteristicActualType::CUserDefinedAngularCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicActualBaseType(node)
{
}

CUserDefinedAngularCharacteristicActualType::CUserDefinedAngularCharacteristicActualType(CUserDefinedAngularCharacteristicActualType const& other)
    : ::qif191::t::CAngularCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedAngularCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAngularCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAngularCharacteristicDefinitionType::CUserDefinedAngularCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedAngularCharacteristicDefinitionType::CUserDefinedAngularCharacteristicDefinitionType(CUserDefinedAngularCharacteristicDefinitionType const& other)
    : ::qif191::t::CAngularCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedAngularCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAngularCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAngularCharacteristicItemType::CUserDefinedAngularCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicItemBaseType(node)
{
}

CUserDefinedAngularCharacteristicItemType::CUserDefinedAngularCharacteristicItemType(CUserDefinedAngularCharacteristicItemType const& other)
    : ::qif191::t::CAngularCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedAngularCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAngularCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAngularCharacteristicNominalType::CUserDefinedAngularCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(node)
{
}

CUserDefinedAngularCharacteristicNominalType::CUserDefinedAngularCharacteristicNominalType(CUserDefinedAngularCharacteristicNominalType const& other)
    : ::qif191::t::CAngularCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedAngularCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAngularCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAngularCharacteristicStatsEvalType::CUserDefinedAngularCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedAngularCharacteristicStatsEvalType::CUserDefinedAngularCharacteristicStatsEvalType(CUserDefinedAngularCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedAngularCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAngularCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAreaCharacteristicActualType::CUserDefinedAreaCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAreaCharacteristicActualBaseType(node)
{
}

CUserDefinedAreaCharacteristicActualType::CUserDefinedAreaCharacteristicActualType(CUserDefinedAreaCharacteristicActualType const& other)
    : ::qif191::t::CAreaCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedAreaCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAreaCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAreaCharacteristicDefinitionType::CUserDefinedAreaCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAreaCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedAreaCharacteristicDefinitionType::CUserDefinedAreaCharacteristicDefinitionType(CUserDefinedAreaCharacteristicDefinitionType const& other)
    : ::qif191::t::CAreaCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedAreaCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAreaCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAreaCharacteristicItemType::CUserDefinedAreaCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAreaCharacteristicItemBaseType(node)
{
}

CUserDefinedAreaCharacteristicItemType::CUserDefinedAreaCharacteristicItemType(CUserDefinedAreaCharacteristicItemType const& other)
    : ::qif191::t::CAreaCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedAreaCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAreaCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAreaCharacteristicNominalType::CUserDefinedAreaCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAreaCharacteristicNominalBaseType(node)
{
}

CUserDefinedAreaCharacteristicNominalType::CUserDefinedAreaCharacteristicNominalType(CUserDefinedAreaCharacteristicNominalType const& other)
    : ::qif191::t::CAreaCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedAreaCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAreaCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAreaCharacteristicStatsEvalType::CUserDefinedAreaCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedAreaCharacteristicStatsEvalType::CUserDefinedAreaCharacteristicStatsEvalType(CUserDefinedAreaCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedAreaCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAreaCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAttributeCharacteristicActualType::CUserDefinedAttributeCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
{
}

CUserDefinedAttributeCharacteristicActualType::CUserDefinedAttributeCharacteristicActualType(CUserDefinedAttributeCharacteristicActualType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
{
}

void CUserDefinedAttributeCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAttributeCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAttributeCharacteristicDefinitionType::CUserDefinedAttributeCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
{
}

CUserDefinedAttributeCharacteristicDefinitionType::CUserDefinedAttributeCharacteristicDefinitionType(CUserDefinedAttributeCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CUserDefinedAttributeCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAttributeCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAttributeCharacteristicItemType::CUserDefinedAttributeCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CUserDefinedAttributeCharacteristicItemType::CUserDefinedAttributeCharacteristicItemType(CUserDefinedAttributeCharacteristicItemType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedAttributeCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAttributeCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAttributeCharacteristicNominalType::CUserDefinedAttributeCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , PassValues(*this)	// "PassValues"
    , FailValues(*this)	// "FailValues"
{
}

CUserDefinedAttributeCharacteristicNominalType::CUserDefinedAttributeCharacteristicNominalType(CUserDefinedAttributeCharacteristicNominalType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , PassValues(*this)	// "PassValues"
    , FailValues(*this)	// "FailValues"
{
}

void CUserDefinedAttributeCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAttributeCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedAttributeCharacteristicStatsEvalType::CUserDefinedAttributeCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , AttributeStats(*this)	// "AttributeStats"
{
}

CUserDefinedAttributeCharacteristicStatsEvalType::CUserDefinedAttributeCharacteristicStatsEvalType(CUserDefinedAttributeCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , AttributeStats(*this)	// "AttributeStats"
{
}

void CUserDefinedAttributeCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedAttributeCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedForceCharacteristicActualType::CUserDefinedForceCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CForceCharacteristicActualBaseType(node)
{
}

CUserDefinedForceCharacteristicActualType::CUserDefinedForceCharacteristicActualType(CUserDefinedForceCharacteristicActualType const& other)
    : ::qif191::t::CForceCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedForceCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedForceCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedForceCharacteristicDefinitionType::CUserDefinedForceCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CForceCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedForceCharacteristicDefinitionType::CUserDefinedForceCharacteristicDefinitionType(CUserDefinedForceCharacteristicDefinitionType const& other)
    : ::qif191::t::CForceCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedForceCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedForceCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedForceCharacteristicItemType::CUserDefinedForceCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CForceCharacteristicItemBaseType(node)
{
}

CUserDefinedForceCharacteristicItemType::CUserDefinedForceCharacteristicItemType(CUserDefinedForceCharacteristicItemType const& other)
    : ::qif191::t::CForceCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedForceCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedForceCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedForceCharacteristicNominalType::CUserDefinedForceCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CForceCharacteristicNominalBaseType(node)
{
}

CUserDefinedForceCharacteristicNominalType::CUserDefinedForceCharacteristicNominalType(CUserDefinedForceCharacteristicNominalType const& other)
    : ::qif191::t::CForceCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedForceCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedForceCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedForceCharacteristicStatsEvalType::CUserDefinedForceCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedForceCharacteristicStatsEvalType::CUserDefinedForceCharacteristicStatsEvalType(CUserDefinedForceCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedForceCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedForceCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedLinearCharacteristicActualType::CUserDefinedLinearCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CUserDefinedLinearCharacteristicActualType::CUserDefinedLinearCharacteristicActualType(CUserDefinedLinearCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedLinearCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedLinearCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedLinearCharacteristicDefinitionType::CUserDefinedLinearCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedLinearCharacteristicDefinitionType::CUserDefinedLinearCharacteristicDefinitionType(CUserDefinedLinearCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedLinearCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedLinearCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedLinearCharacteristicItemType::CUserDefinedLinearCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CUserDefinedLinearCharacteristicItemType::CUserDefinedLinearCharacteristicItemType(CUserDefinedLinearCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedLinearCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedLinearCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedLinearCharacteristicNominalType::CUserDefinedLinearCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CUserDefinedLinearCharacteristicNominalType::CUserDefinedLinearCharacteristicNominalType(CUserDefinedLinearCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedLinearCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedLinearCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedLinearCharacteristicStatsEvalType::CUserDefinedLinearCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedLinearCharacteristicStatsEvalType::CUserDefinedLinearCharacteristicStatsEvalType(CUserDefinedLinearCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedLinearCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedLinearCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedMassCharacteristicActualType::CUserDefinedMassCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMassCharacteristicActualBaseType(node)
{
}

CUserDefinedMassCharacteristicActualType::CUserDefinedMassCharacteristicActualType(CUserDefinedMassCharacteristicActualType const& other)
    : ::qif191::t::CMassCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedMassCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedMassCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedMassCharacteristicDefinitionType::CUserDefinedMassCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMassCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedMassCharacteristicDefinitionType::CUserDefinedMassCharacteristicDefinitionType(CUserDefinedMassCharacteristicDefinitionType const& other)
    : ::qif191::t::CMassCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedMassCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedMassCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedMassCharacteristicItemType::CUserDefinedMassCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMassCharacteristicItemBaseType(node)
{
}

CUserDefinedMassCharacteristicItemType::CUserDefinedMassCharacteristicItemType(CUserDefinedMassCharacteristicItemType const& other)
    : ::qif191::t::CMassCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedMassCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedMassCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedMassCharacteristicNominalType::CUserDefinedMassCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CMassCharacteristicNominalBaseType(node)
{
}

CUserDefinedMassCharacteristicNominalType::CUserDefinedMassCharacteristicNominalType(CUserDefinedMassCharacteristicNominalType const& other)
    : ::qif191::t::CMassCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedMassCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedMassCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedMassCharacteristicStatsEvalType::CUserDefinedMassCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedMassCharacteristicStatsEvalType::CUserDefinedMassCharacteristicStatsEvalType(CUserDefinedMassCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedMassCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedMassCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedPressureCharacteristicActualType::CUserDefinedPressureCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPressureCharacteristicActualBaseType(node)
{
}

CUserDefinedPressureCharacteristicActualType::CUserDefinedPressureCharacteristicActualType(CUserDefinedPressureCharacteristicActualType const& other)
    : ::qif191::t::CPressureCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedPressureCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedPressureCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedPressureCharacteristicDefinitionType::CUserDefinedPressureCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPressureCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedPressureCharacteristicDefinitionType::CUserDefinedPressureCharacteristicDefinitionType(CUserDefinedPressureCharacteristicDefinitionType const& other)
    : ::qif191::t::CPressureCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedPressureCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedPressureCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedPressureCharacteristicItemType::CUserDefinedPressureCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPressureCharacteristicItemBaseType(node)
{
}

CUserDefinedPressureCharacteristicItemType::CUserDefinedPressureCharacteristicItemType(CUserDefinedPressureCharacteristicItemType const& other)
    : ::qif191::t::CPressureCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedPressureCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedPressureCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedPressureCharacteristicNominalType::CUserDefinedPressureCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CPressureCharacteristicNominalBaseType(node)
{
}

CUserDefinedPressureCharacteristicNominalType::CUserDefinedPressureCharacteristicNominalType(CUserDefinedPressureCharacteristicNominalType const& other)
    : ::qif191::t::CPressureCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedPressureCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedPressureCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedPressureCharacteristicStatsEvalType::CUserDefinedPressureCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedPressureCharacteristicStatsEvalType::CUserDefinedPressureCharacteristicStatsEvalType(CUserDefinedPressureCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedPressureCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedPressureCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedSpeedCharacteristicActualType::CUserDefinedSpeedCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpeedCharacteristicActualBaseType(node)
{
}

CUserDefinedSpeedCharacteristicActualType::CUserDefinedSpeedCharacteristicActualType(CUserDefinedSpeedCharacteristicActualType const& other)
    : ::qif191::t::CSpeedCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedSpeedCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedSpeedCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedSpeedCharacteristicDefinitionType::CUserDefinedSpeedCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpeedCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedSpeedCharacteristicDefinitionType::CUserDefinedSpeedCharacteristicDefinitionType(CUserDefinedSpeedCharacteristicDefinitionType const& other)
    : ::qif191::t::CSpeedCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedSpeedCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedSpeedCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedSpeedCharacteristicItemType::CUserDefinedSpeedCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpeedCharacteristicItemBaseType(node)
{
}

CUserDefinedSpeedCharacteristicItemType::CUserDefinedSpeedCharacteristicItemType(CUserDefinedSpeedCharacteristicItemType const& other)
    : ::qif191::t::CSpeedCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedSpeedCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedSpeedCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedSpeedCharacteristicNominalType::CUserDefinedSpeedCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpeedCharacteristicNominalBaseType(node)
{
}

CUserDefinedSpeedCharacteristicNominalType::CUserDefinedSpeedCharacteristicNominalType(CUserDefinedSpeedCharacteristicNominalType const& other)
    : ::qif191::t::CSpeedCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedSpeedCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedSpeedCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedSpeedCharacteristicStatsEvalType::CUserDefinedSpeedCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedSpeedCharacteristicStatsEvalType::CUserDefinedSpeedCharacteristicStatsEvalType(CUserDefinedSpeedCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedSpeedCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedSpeedCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTemperatureCharacteristicActualType::CUserDefinedTemperatureCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTemperatureCharacteristicActualBaseType(node)
{
}

CUserDefinedTemperatureCharacteristicActualType::CUserDefinedTemperatureCharacteristicActualType(CUserDefinedTemperatureCharacteristicActualType const& other)
    : ::qif191::t::CTemperatureCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedTemperatureCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTemperatureCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTemperatureCharacteristicDefinitionType::CUserDefinedTemperatureCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTemperatureCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedTemperatureCharacteristicDefinitionType::CUserDefinedTemperatureCharacteristicDefinitionType(CUserDefinedTemperatureCharacteristicDefinitionType const& other)
    : ::qif191::t::CTemperatureCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedTemperatureCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTemperatureCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTemperatureCharacteristicItemType::CUserDefinedTemperatureCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTemperatureCharacteristicItemBaseType(node)
{
}

CUserDefinedTemperatureCharacteristicItemType::CUserDefinedTemperatureCharacteristicItemType(CUserDefinedTemperatureCharacteristicItemType const& other)
    : ::qif191::t::CTemperatureCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedTemperatureCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTemperatureCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTemperatureCharacteristicNominalType::CUserDefinedTemperatureCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTemperatureCharacteristicNominalBaseType(node)
{
}

CUserDefinedTemperatureCharacteristicNominalType::CUserDefinedTemperatureCharacteristicNominalType(CUserDefinedTemperatureCharacteristicNominalType const& other)
    : ::qif191::t::CTemperatureCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedTemperatureCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTemperatureCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTemperatureCharacteristicStatsEvalType::CUserDefinedTemperatureCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedTemperatureCharacteristicStatsEvalType::CUserDefinedTemperatureCharacteristicStatsEvalType(CUserDefinedTemperatureCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedTemperatureCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTemperatureCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTimeCharacteristicActualType::CUserDefinedTimeCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTimeCharacteristicActualBaseType(node)
{
}

CUserDefinedTimeCharacteristicActualType::CUserDefinedTimeCharacteristicActualType(CUserDefinedTimeCharacteristicActualType const& other)
    : ::qif191::t::CTimeCharacteristicActualBaseType(other.GetNode())
{
}

void CUserDefinedTimeCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTimeCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTimeCharacteristicDefinitionType::CUserDefinedTimeCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTimeCharacteristicDefinitionBaseType(node)
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

CUserDefinedTimeCharacteristicDefinitionType::CUserDefinedTimeCharacteristicDefinitionType(CUserDefinedTimeCharacteristicDefinitionType const& other)
    : ::qif191::t::CTimeCharacteristicDefinitionBaseType(other.GetNode())
    , WhatToMeasure(*this)	// "WhatToMeasure"
{
}

void CUserDefinedTimeCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTimeCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTimeCharacteristicItemType::CUserDefinedTimeCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTimeCharacteristicItemBaseType(node)
{
}

CUserDefinedTimeCharacteristicItemType::CUserDefinedTimeCharacteristicItemType(CUserDefinedTimeCharacteristicItemType const& other)
    : ::qif191::t::CTimeCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedTimeCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTimeCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTimeCharacteristicNominalType::CUserDefinedTimeCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTimeCharacteristicNominalBaseType(node)
{
}

CUserDefinedTimeCharacteristicNominalType::CUserDefinedTimeCharacteristicNominalType(CUserDefinedTimeCharacteristicNominalType const& other)
    : ::qif191::t::CTimeCharacteristicNominalBaseType(other.GetNode())
{
}

void CUserDefinedTimeCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTimeCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedTimeCharacteristicStatsEvalType::CUserDefinedTimeCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedTimeCharacteristicStatsEvalType::CUserDefinedTimeCharacteristicStatsEvalType(CUserDefinedTimeCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedTimeCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedTimeCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitCharacteristicActualType::CUserDefinedUnitCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicActualBaseType(node)
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

CUserDefinedUnitCharacteristicActualType::CUserDefinedUnitCharacteristicActualType(CUserDefinedUnitCharacteristicActualType const& other)
    : ::qif191::t::CCharacteristicActualBaseType(other.GetNode())
    , Value2(*this)	// "Value"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
{
}

void CUserDefinedUnitCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitCharacteristicDefinitionType::CUserDefinedUnitCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicDefinitionBaseType(node)
{
}

CUserDefinedUnitCharacteristicDefinitionType::CUserDefinedUnitCharacteristicDefinitionType(CUserDefinedUnitCharacteristicDefinitionType const& other)
    : ::qif191::t::CCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CUserDefinedUnitCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitCharacteristicItemType::CUserDefinedUnitCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicItemBaseType(node)
{
}

CUserDefinedUnitCharacteristicItemType::CUserDefinedUnitCharacteristicItemType(CUserDefinedUnitCharacteristicItemType const& other)
    : ::qif191::t::CCharacteristicItemBaseType(other.GetNode())
{
}

void CUserDefinedUnitCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitCharacteristicNominalType::CUserDefinedUnitCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicNominalBaseType(node)
    , TargetValue(*this)	// "TargetValue"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

CUserDefinedUnitCharacteristicNominalType::CUserDefinedUnitCharacteristicNominalType(CUserDefinedUnitCharacteristicNominalType const& other)
    : ::qif191::t::CCharacteristicNominalBaseType(other.GetNode())
    , TargetValue(*this)	// "TargetValue"
    , MaxValue(*this)	// "MaxValue"
    , MinValue(*this)	// "MinValue"
    , DefinedAsLimit(*this)	// "DefinedAsLimit"
{
}

void CUserDefinedUnitCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitCharacteristicStatsEvalType::CUserDefinedUnitCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(node)
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

CUserDefinedUnitCharacteristicStatsEvalType::CUserDefinedUnitCharacteristicStatsEvalType(CUserDefinedUnitCharacteristicStatsEvalType const& other)
    : ::qif191::t::CCharacteristicStatsEvalBaseType(other.GetNode())
    , ValueStats(*this)	// "ValueStats"
    , MaxValueStats(*this)	// "MaxValueStats"
    , MinValueStats(*this)	// "MinValueStats"
    , DeviationStats(*this)	// "DeviationStats"
    , MaxDeviationStats(*this)	// "MaxDeviationStats"
    , MinDeviationStats(*this)	// "MinDeviationStats"
{
}

void CUserDefinedUnitCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitType::CUserDefinedUnitType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , WhatIsMeasured(*this)	// "WhatIsMeasured"
    , UnitName(*this)	// "UnitName"
    , StandardName(*this)	// "StandardName"
{
}

CUserDefinedUnitType::CUserDefinedUnitType(CUserDefinedUnitType const& other)
    : TypeBase(other.GetNode())
    , WhatIsMeasured(*this)	// "WhatIsMeasured"
    , UnitName(*this)	// "UnitName"
    , StandardName(*this)	// "StandardName"
{
}

void CUserDefinedUnitType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitValueType::CUserDefinedUnitValueType(xercesc::DOMNode* const& node)
    : ::qif191::t::CSpecifiedDecimalType(node)
    , unitName(*this)	// "@unitName"
{
}

CUserDefinedUnitValueType::CUserDefinedUnitValueType(CUserDefinedUnitValueType const& other)
    : ::qif191::t::CSpecifiedDecimalType(other.GetNode())
    , unitName(*this)	// "@unitName"
{
}

void CUserDefinedUnitValueType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitValueType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUserDefinedUnitsType::CUserDefinedUnitsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , UserDefinedUnit(*this)	// "UserDefinedUnit"
{
}

CUserDefinedUnitsType::CUserDefinedUnitsType(CUserDefinedUnitsType const& other)
    : TypeBase(other.GetNode())
    , UserDefinedUnit(*this)	// "UserDefinedUnit"
{
}

void CUserDefinedUnitsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UserDefinedUnitsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CValidityEnumType::CValidityEnumType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CValidityEnumType::CValidityEnumType(CValidityEnumType const& other)
    : TypeBase(other.GetNode())
{
}


CVectorSimpleType::CVectorSimpleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CVectorSimpleType::CVectorSimpleType(CVectorSimpleType const& other)
    : TypeBase(other.GetNode())
{
}


CVectorType::CVectorType(xercesc::DOMNode* const& node)
    : ::qif191::t::CVectorSimpleTypeType(node)
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

CVectorType::CVectorType(CVectorType const& other)
    : ::qif191::t::CVectorSimpleTypeType(other.GetNode())
    , linearUnit(*this)	// "@linearUnit"
    , decimalPlaces(*this)	// "@decimalPlaces"
    , significantFigures(*this)	// "@significantFigures"
    , validity(*this)	// "@validity"
    , xDecimalPlaces(*this)	// "@xDecimalPlaces"
    , xSignificantFigures(*this)	// "@xSignificantFigures"
    , xValidity(*this)	// "@xValidity"
    , yDecimalPlaces(*this)	// "@yDecimalPlaces"
    , ySignificantFigures(*this)	// "@ySignificantFigures"
    , yValidity(*this)	// "@yValidity"
    , zDecimalPlaces(*this)	// "@zDecimalPlaces"
    , zSignificantFigures(*this)	// "@zSignificantFigures"
    , zValidity(*this)	// "@zValidity"
{
}

void CVectorType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VectorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVersionHistoryType::CVersionHistoryType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Version(*this)	// "Version"
{
}

CVersionHistoryType::CVersionHistoryType(CVersionHistoryType const& other)
    : TypeBase(other.GetNode())
    , Version(*this)	// "Version"
{
}

void CVersionHistoryType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VersionHistoryType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVersionType::CVersionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , VersionQPId(*this)	// "VersionQPId"
    , TimeCreated(*this)	// "TimeCreated"
    , SignOffs(*this)	// "SignOffs"
{
}

CVersionType::CVersionType(CVersionType const& other)
    : TypeBase(other.GetNode())
    , VersionQPId(*this)	// "VersionQPId"
    , TimeCreated(*this)	// "TimeCreated"
    , SignOffs(*this)	// "SignOffs"
{
}

void CVersionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VersionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVersionsType::CVersionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , VersionHistory(*this)	// "VersionHistory"
    , CurrentVersion(*this)	// "CurrentVersion"
{
}

CVersionsType::CVersionsType(CVersionsType const& other)
    : TypeBase(other.GetNode())
    , VersionHistory(*this)	// "VersionHistory"
    , CurrentVersion(*this)	// "CurrentVersion"
{
}

void CVersionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VersionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVertexSetType::CVertexSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , Vertex(*this)	// "Vertex"
{
}

CVertexSetType::CVertexSetType(CVertexSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , Vertex(*this)	// "Vertex"
{
}

void CVertexSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VertexSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVertexType::CVertexType(xercesc::DOMNode* const& node)
    : ::qif191::t::CTopologyBaseType(node)
    , Tolerance(*this)	// "@Tolerance"
    , Point(*this)	// "Point"
{
}

CVertexType::CVertexType(CVertexType const& other)
    : ::qif191::t::CTopologyBaseType(other.GetNode())
    , Tolerance(*this)	// "@Tolerance"
    , Point(*this)	// "Point"
{
}

void CVertexType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VertexType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVideoInstructionType::CVideoInstructionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CWorkInstructionBaseType(node)
    , ExternalFile(*this)	// "ExternalFile"
{
}

CVideoInstructionType::CVideoInstructionType(CVideoInstructionType const& other)
    : ::qif191::t::CWorkInstructionBaseType(other.GetNode())
    , ExternalFile(*this)	// "ExternalFile"
{
}

void CVideoInstructionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VideoInstructionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CViewBaseType::CViewBaseType(xercesc::DOMNode* const& node)
    : ::qif191::t::CNodeWithIdBaseType(node)
{
}

CViewBaseType::CViewBaseType(CViewBaseType const& other)
    : ::qif191::t::CNodeWithIdBaseType(other.GetNode())
{
}

void CViewBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ViewBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CViewSetType::CViewSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , N(*this)	// "@N"
    , ViewBase(*this)	// "ViewBase"
    , Camera(*this)	// "Camera"
    , SavedView(*this)	// "SavedView"
{
}

CViewSetType::CViewSetType(CViewSetType const& other)
    : TypeBase(other.GetNode())
    , N(*this)	// "@N"
    , ViewBase(*this)	// "ViewBase"
    , Camera(*this)	// "Camera"
    , SavedView(*this)	// "SavedView"
{
}

void CViewSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ViewSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVisualizationSetType::CVisualizationSetType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Fonts(*this)	// "Fonts"
    , PMIDisplaySet(*this)	// "PMIDisplaySet"
{
}

CVisualizationSetType::CVisualizationSetType(CVisualizationSetType const& other)
    : TypeBase(other.GetNode())
    , Fonts(*this)	// "Fonts"
    , PMIDisplaySet(*this)	// "PMIDisplaySet"
{
}

void CVisualizationSetType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VisualizationSetType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWidthCharacteristicActualType::CWidthCharacteristicActualType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicActualBaseType(node)
{
}

CWidthCharacteristicActualType::CWidthCharacteristicActualType(CWidthCharacteristicActualType const& other)
    : ::qif191::t::CLinearCharacteristicActualBaseType(other.GetNode())
{
}

void CWidthCharacteristicActualType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WidthCharacteristicActualType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWidthCharacteristicDefinitionType::CWidthCharacteristicDefinitionType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(node)
{
}

CWidthCharacteristicDefinitionType::CWidthCharacteristicDefinitionType(CWidthCharacteristicDefinitionType const& other)
    : ::qif191::t::CLinearCharacteristicDefinitionBaseType(other.GetNode())
{
}

void CWidthCharacteristicDefinitionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WidthCharacteristicDefinitionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWidthCharacteristicItemType::CWidthCharacteristicItemType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicItemBaseType(node)
{
}

CWidthCharacteristicItemType::CWidthCharacteristicItemType(CWidthCharacteristicItemType const& other)
    : ::qif191::t::CLinearCharacteristicItemBaseType(other.GetNode())
{
}

void CWidthCharacteristicItemType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WidthCharacteristicItemType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWidthCharacteristicNominalType::CWidthCharacteristicNominalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(node)
{
}

CWidthCharacteristicNominalType::CWidthCharacteristicNominalType(CWidthCharacteristicNominalType const& other)
    : ::qif191::t::CLinearCharacteristicNominalBaseType(other.GetNode())
{
}

void CWidthCharacteristicNominalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WidthCharacteristicNominalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWidthCharacteristicStatsEvalType::CWidthCharacteristicStatsEvalType(xercesc::DOMNode* const& node)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(node)
{
}

CWidthCharacteristicStatsEvalType::CWidthCharacteristicStatsEvalType(CWidthCharacteristicStatsEvalType const& other)
    : ::qif191::t::CLinearCharacteristicStatsEvalType(other.GetNode())
{
}

void CWidthCharacteristicStatsEvalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WidthCharacteristicStatsEvalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWitnessLinesType::CWitnessLinesType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , Width(*this)	// "@Width"
    , Segment1(*this)	// "Segment1"
    , Segment2(*this)	// "Segment2"
{
}

CWitnessLinesType::CWitnessLinesType(CWitnessLinesType const& other)
    : TypeBase(other.GetNode())
    , Width(*this)	// "@Width"
    , Segment1(*this)	// "Segment1"
    , Segment2(*this)	// "Segment2"
{
}

void CWitnessLinesType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WitnessLinesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWorkInstructionBaseType::CWorkInstructionBaseType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , id(*this)	// "@id"
{
}

CWorkInstructionBaseType::CWorkInstructionBaseType(CWorkInstructionBaseType const& other)
    : TypeBase(other.GetNode())
    , id(*this)	// "@id"
{
}

void CWorkInstructionBaseType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WorkInstructionBaseType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWorkInstructionsType::CWorkInstructionsType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , WorkInstruction(*this)	// "WorkInstruction"
    , DocumentFileInstruction(*this)	// "DocumentFileInstruction"
    , ImageInstruction(*this)	// "ImageInstruction"
    , TextInstruction(*this)	// "TextInstruction"
    , VideoInstruction(*this)	// "VideoInstruction"
{
}

CWorkInstructionsType::CWorkInstructionsType(CWorkInstructionsType const& other)
    : TypeBase(other.GetNode())
    , WorkInstruction(*this)	// "WorkInstruction"
    , DocumentFileInstruction(*this)	// "DocumentFileInstruction"
    , ImageInstruction(*this)	// "ImageInstruction"
    , TextInstruction(*this)	// "TextInstruction"
    , VideoInstruction(*this)	// "VideoInstruction"
{
}

void CWorkInstructionsType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WorkInstructionsType"), _T("http://qifstandards.org/xsd/qif2"));
}

CWorkingVolumeType::CWorkingVolumeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XAxisLength(*this)	// "XAxisLength"
    , YAxisLength(*this)	// "YAxisLength"
    , ZAxisLength(*this)	// "ZAxisLength"
{
}

CWorkingVolumeType::CWorkingVolumeType(CWorkingVolumeType const& other)
    : TypeBase(other.GetNode())
    , XAxisLength(*this)	// "XAxisLength"
    , YAxisLength(*this)	// "YAxisLength"
    , ZAxisLength(*this)	// "ZAxisLength"
{
}

void CWorkingVolumeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("WorkingVolumeType"), _T("http://qifstandards.org/xsd/qif2"));
}

CXYZResolutionType::CXYZResolutionType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , XResolution(*this)	// "XResolution"
    , YResolution(*this)	// "YResolution"
    , ZResolution(*this)	// "ZResolution"
{
}

CXYZResolutionType::CXYZResolutionType(CXYZResolutionType const& other)
    : TypeBase(other.GetNode())
    , XResolution(*this)	// "XResolution"
    , YResolution(*this)	// "YResolution"
    , ZResolution(*this)	// "ZResolution"
{
}

void CXYZResolutionType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("XYZResolutionType"), _T("http://qifstandards.org/xsd/qif2"));
}

CZoneAxisType::CZoneAxisType(xercesc::DOMNode* const& node)
    : ::qif191::t::CAxisType(node)
    , Length(*this)	// "Length"
{
}

CZoneAxisType::CZoneAxisType(CZoneAxisType const& other)
    : ::qif191::t::CAxisType(other.GetNode())
    , Length(*this)	// "Length"
{
}

void CZoneAxisType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ZoneAxisType"), _T("http://qifstandards.org/xsd/qif2"));
}

CZoneDataType::CZoneDataType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , FeatureItemId(*this)	// "FeatureItemId"
    , Bonus(*this)	// "Bonus"
    , ReferenceLength(*this)	// "ReferenceLength"
{
}

CZoneDataType::CZoneDataType(CZoneDataType const& other)
    : TypeBase(other.GetNode())
    , FeatureItemId(*this)	// "FeatureItemId"
    , Bonus(*this)	// "Bonus"
    , ReferenceLength(*this)	// "ReferenceLength"
{
}

void CZoneDataType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ZoneDataType"), _T("http://qifstandards.org/xsd/qif2"));
}

CZoneRadiiType::CZoneRadiiType(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , MinRadius(*this)	// "MinRadius"
    , MaxRadius(*this)	// "MaxRadius"
{
}

CZoneRadiiType::CZoneRadiiType(CZoneRadiiType const& other)
    : TypeBase(other.GetNode())
    , MinRadius(*this)	// "MinRadius"
    , MaxRadius(*this)	// "MaxRadius"
{
}

void CZoneRadiiType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ZoneRadiiType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFDocument::CQIFDocument(xercesc::DOMNode* const& node)
    : TypeBase(node)
    , ActionMethod(*this)	// "ActionMethod"
    , ActualComponent(*this)	// "ActualComponent"
    , ActualComponentSet(*this)	// "ActualComponentSet"
    , ActualOffset(*this)	// "ActualOffset"
    , Aggregate12(*this)	// "Aggregate12"
    , Aggregate12Core(*this)	// "Aggregate12Core"
    , Aggregate13(*this)	// "Aggregate13"
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , AlignmentOperation(*this)	// "AlignmentOperation"
    , And2(*this)	// "And"
    , AngleBetweenCharacteristicActual(*this)	// "AngleBetweenCharacteristicActual"
    , AngleBetweenCharacteristicDefinition(*this)	// "AngleBetweenCharacteristicDefinition"
    , AngleBetweenCharacteristicItem(*this)	// "AngleBetweenCharacteristicItem"
    , AngleBetweenCharacteristicNominal(*this)	// "AngleBetweenCharacteristicNominal"
    , AngleBetweenCharacteristicStats(*this)	// "AngleBetweenCharacteristicStats"
    , AngleCharacteristicActual(*this)	// "AngleCharacteristicActual"
    , AngleCharacteristicDefinition(*this)	// "AngleCharacteristicDefinition"
    , AngleCharacteristicItem(*this)	// "AngleCharacteristicItem"
    , AngleCharacteristicNominal(*this)	// "AngleCharacteristicNominal"
    , AngleCharacteristicStats(*this)	// "AngleCharacteristicStats"
    , AngleFromCharacteristicActual(*this)	// "AngleFromCharacteristicActual"
    , AngleFromCharacteristicDefinition(*this)	// "AngleFromCharacteristicDefinition"
    , AngleFromCharacteristicItem(*this)	// "AngleFromCharacteristicItem"
    , AngleFromCharacteristicNominal(*this)	// "AngleFromCharacteristicNominal"
    , AngleFromCharacteristicStats(*this)	// "AngleFromCharacteristicStats"
    , AngularCharacteristicStats(*this)	// "AngularCharacteristicStats"
    , AngularCoordinateCharacteristicActual(*this)	// "AngularCoordinateCharacteristicActual"
    , AngularCoordinateCharacteristicDefinition(*this)	// "AngularCoordinateCharacteristicDefinition"
    , AngularCoordinateCharacteristicItem(*this)	// "AngularCoordinateCharacteristicItem"
    , AngularCoordinateCharacteristicNominal(*this)	// "AngularCoordinateCharacteristicNominal"
    , AngularCoordinateCharacteristicStats(*this)	// "AngularCoordinateCharacteristicStats"
    , AngularityCharacteristicActual(*this)	// "AngularityCharacteristicActual"
    , AngularityCharacteristicDefinition(*this)	// "AngularityCharacteristicDefinition"
    , AngularityCharacteristicItem(*this)	// "AngularityCharacteristicItem"
    , AngularityCharacteristicNominal(*this)	// "AngularityCharacteristicNominal"
    , AngularityCharacteristicStats(*this)	// "AngularityCharacteristicStats"
    , ArcCircular12(*this)	// "ArcCircular12"
    , ArcCircular12Core(*this)	// "ArcCircular12Core"
    , ArcCircular13(*this)	// "ArcCircular13"
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , ArcConic12(*this)	// "ArcConic12"
    , ArcConic12Core(*this)	// "ArcConic12Core"
    , ArcConic13(*this)	// "ArcConic13"
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , ArcFeatureActual(*this)	// "ArcFeatureActual"
    , ArcFeatureDefinition(*this)	// "ArcFeatureDefinition"
    , ArcFeatureItem(*this)	// "ArcFeatureItem"
    , ArcFeatureNominal(*this)	// "ArcFeatureNominal"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , AsmPaths(*this)	// "AsmPaths"
    , Assembly(*this)	// "Assembly"
    , AssemblySet(*this)	// "AssemblySet"
    , Attribute(*this)	// "Attribute"
    , AttributeBool(*this)	// "AttributeBool"
    , AttributeD3(*this)	// "AttributeD3"
    , AttributeI1(*this)	// "AttributeI1"
    , AttributeI2(*this)	// "AttributeI2"
    , AttributeQPId(*this)	// "AttributeQPId"
    , AttributeStr(*this)	// "AttributeStr"
    , AttributeUser(*this)	// "AttributeUser"
    , Attributes(*this)	// "Attributes"
    , Auxiliary(*this)	// "Auxiliary"
    , AuxiliarySet(*this)	// "AuxiliarySet"
    , AverageFeature(*this)	// "AverageFeature"
    , AverageFeatures(*this)	// "AverageFeatures"
    , B89Test(*this)	// "B89Test"
    , BestFit(*this)	// "BestFit"
    , BiasStudyPlan(*this)	// "BiasStudyPlan"
    , BiasStudyResults(*this)	// "BiasStudyResults"
    , Body(*this)	// "Body"
    , BodySet(*this)	// "BodySet"
    , BooleanEqual(*this)	// "BooleanEqual"
    , BooleanExpression(*this)	// "BooleanExpression"
    , CMM(*this)	// "CMM"
    , Caliper(*this)	// "Caliper"
    , Camera(*this)	// "Camera"
    , CapabilityStudyPlan(*this)	// "CapabilityStudyPlan"
    , CapabilityStudyResults(*this)	// "CapabilityStudyResults"
    , CharacteristicActual(*this)	// "CharacteristicActual"
    , CharacteristicDefinition(*this)	// "CharacteristicDefinition"
    , CharacteristicGroup(*this)	// "CharacteristicGroup"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , CharacteristicItem(*this)	// "CharacteristicItem"
    , CharacteristicManufacturingProcessGroup(*this)	// "CharacteristicManufacturingProcessGroup"
    , CharacteristicNominal(*this)	// "CharacteristicNominal"
    , CharacteristicSimultaneityGroup(*this)	// "CharacteristicSimultaneityGroup"
    , CharacteristicStats(*this)	// "CharacteristicStats"
    , Characteristics(*this)	// "Characteristics"
    , CharacteristicsStats(*this)	// "CharacteristicsStats"
    , ChordCharacteristicActual(*this)	// "ChordCharacteristicActual"
    , ChordCharacteristicDefinition(*this)	// "ChordCharacteristicDefinition"
    , ChordCharacteristicItem(*this)	// "ChordCharacteristicItem"
    , ChordCharacteristicNominal(*this)	// "ChordCharacteristicNominal"
    , ChordCharacteristicStats(*this)	// "ChordCharacteristicStats"
    , CircleFeatureActual(*this)	// "CircleFeatureActual"
    , CircleFeatureDefinition(*this)	// "CircleFeatureDefinition"
    , CircleFeatureItem(*this)	// "CircleFeatureItem"
    , CircleFeatureNominal(*this)	// "CircleFeatureNominal"
    , CircularRunoutCharacteristicActual(*this)	// "CircularRunoutCharacteristicActual"
    , CircularRunoutCharacteristicDefinition(*this)	// "CircularRunoutCharacteristicDefinition"
    , CircularRunoutCharacteristicItem(*this)	// "CircularRunoutCharacteristicItem"
    , CircularRunoutCharacteristicNominal(*this)	// "CircularRunoutCharacteristicNominal"
    , CircularRunoutCharacteristicStats(*this)	// "CircularRunoutCharacteristicStats"
    , CircularityCharacteristicActual(*this)	// "CircularityCharacteristicActual"
    , CircularityCharacteristicDefinition(*this)	// "CircularityCharacteristicDefinition"
    , CircularityCharacteristicItem(*this)	// "CircularityCharacteristicItem"
    , CircularityCharacteristicNominal(*this)	// "CircularityCharacteristicNominal"
    , CircularityCharacteristicStats(*this)	// "CircularityCharacteristicStats"
    , Comparator(*this)	// "Comparator"
    , Component(*this)	// "Component"
    , ComponentSet(*this)	// "ComponentSet"
    , CompoundFeatureActual(*this)	// "CompoundFeatureActual"
    , CompoundFeatureDefinition(*this)	// "CompoundFeatureDefinition"
    , CompoundFeatureItem(*this)	// "CompoundFeatureItem"
    , CompoundFeatureNominal(*this)	// "CompoundFeatureNominal"
    , ConcentricityCharacteristicActual(*this)	// "ConcentricityCharacteristicActual"
    , ConcentricityCharacteristicDefinition(*this)	// "ConcentricityCharacteristicDefinition"
    , ConcentricityCharacteristicItem(*this)	// "ConcentricityCharacteristicItem"
    , ConcentricityCharacteristicNominal(*this)	// "ConcentricityCharacteristicNominal"
    , ConcentricityCharacteristicStats(*this)	// "ConcentricityCharacteristicStats"
    , Cone23(*this)	// "Cone23"
    , Cone23Core(*this)	// "Cone23Core"
    , ConeFeatureActual(*this)	// "ConeFeatureActual"
    , ConeFeatureDefinition(*this)	// "ConeFeatureDefinition"
    , ConeFeatureItem(*this)	// "ConeFeatureItem"
    , ConeFeatureNominal(*this)	// "ConeFeatureNominal"
    , ConicalSegmentFeatureActual(*this)	// "ConicalSegmentFeatureActual"
    , ConicalSegmentFeatureDefinition(*this)	// "ConicalSegmentFeatureDefinition"
    , ConicalSegmentFeatureItem(*this)	// "ConicalSegmentFeatureItem"
    , ConicalSegmentFeatureNominal(*this)	// "ConicalSegmentFeatureNominal"
    , ConstantIs(*this)	// "ConstantIs"
    , CoordinateMeasureFeatureMethod(*this)	// "CoordinateMeasureFeatureMethod"
    , CoordinateSystem(*this)	// "CoordinateSystem"
    , CoordinateSystemActualTransforms(*this)	// "CoordinateSystemActualTransforms"
    , CoordinateSystemCore(*this)	// "CoordinateSystemCore"
    , CoordinateSystemSet(*this)	// "CoordinateSystemSet"
    , CoordinateSystems(*this)	// "CoordinateSystems"
    , CuboidFeatureActual(*this)	// "CuboidFeatureActual"
    , CuboidFeatureDefinition(*this)	// "CuboidFeatureDefinition"
    , CuboidFeatureItem(*this)	// "CuboidFeatureItem"
    , CuboidFeatureNominal(*this)	// "CuboidFeatureNominal"
    , Curve12(*this)	// "Curve12"
    , Curve12Core(*this)	// "Curve12Core"
    , Curve12Set(*this)	// "Curve12Set"
    , Curve13(*this)	// "Curve13"
    , Curve13Core(*this)	// "Curve13Core"
    , Curve13Set(*this)	// "Curve13Set"
    , CurveLengthCharacteristicActual(*this)	// "CurveLengthCharacteristicActual"
    , CurveLengthCharacteristicDefinition(*this)	// "CurveLengthCharacteristicDefinition"
    , CurveLengthCharacteristicItem(*this)	// "CurveLengthCharacteristicItem"
    , CurveLengthCharacteristicNominal(*this)	// "CurveLengthCharacteristicNominal"
    , CurveLengthCharacteristicStats(*this)	// "CurveLengthCharacteristicStats"
    , CurveMeshSet(*this)	// "CurveMeshSet"
    , Cylinder23(*this)	// "Cylinder23"
    , Cylinder23Core(*this)	// "Cylinder23Core"
    , CylinderFeatureActual(*this)	// "CylinderFeatureActual"
    , CylinderFeatureDefinition(*this)	// "CylinderFeatureDefinition"
    , CylinderFeatureItem(*this)	// "CylinderFeatureItem"
    , CylinderFeatureNominal(*this)	// "CylinderFeatureNominal"
    , CylindricalSegmentFeatureActual(*this)	// "CylindricalSegmentFeatureActual"
    , CylindricalSegmentFeatureDefinition(*this)	// "CylindricalSegmentFeatureDefinition"
    , CylindricalSegmentFeatureItem(*this)	// "CylindricalSegmentFeatureItem"
    , CylindricalSegmentFeatureNominal(*this)	// "CylindricalSegmentFeatureNominal"
    , CylindricityCharacteristicActual(*this)	// "CylindricityCharacteristicActual"
    , CylindricityCharacteristicDefinition(*this)	// "CylindricityCharacteristicDefinition"
    , CylindricityCharacteristicItem(*this)	// "CylindricityCharacteristicItem"
    , CylindricityCharacteristicNominal(*this)	// "CylindricityCharacteristicNominal"
    , CylindricityCharacteristicStats(*this)	// "CylindricityCharacteristicStats"
    , DMESelectionRule(*this)	// "DMESelectionRule"
    , DatumPrecedence(*this)	// "DatumPrecedence"
    , DatumTarget(*this)	// "DatumTarget"
    , DatumTargetCircularAreaDefinition(*this)	// "DatumTargetCircularAreaDefinition"
    , DatumTargetCircularLineDefinition(*this)	// "DatumTargetCircularLineDefinition"
    , DatumTargetCylindricalAreaDefinition(*this)	// "DatumTargetCylindricalAreaDefinition"
    , DatumTargetIrregularAreaDefinition(*this)	// "DatumTargetIrregularAreaDefinition"
    , DatumTargetLineDefinition(*this)	// "DatumTargetLineDefinition"
    , DatumTargetPointDefinition(*this)	// "DatumTargetPointDefinition"
    , DatumTargetRectangularAreaDefinition(*this)	// "DatumTargetRectangularAreaDefinition"
    , DatumTargetSphereDefinition(*this)	// "DatumTargetSphereDefinition"
    , DepthCharacteristicActual(*this)	// "DepthCharacteristicActual"
    , DepthCharacteristicDefinition(*this)	// "DepthCharacteristicDefinition"
    , DepthCharacteristicItem(*this)	// "DepthCharacteristicItem"
    , DepthCharacteristicNominal(*this)	// "DepthCharacteristicNominal"
    , DepthCharacteristicStats(*this)	// "DepthCharacteristicStats"
    , DiameterCharacteristicActual(*this)	// "DiameterCharacteristicActual"
    , DiameterCharacteristicDefinition(*this)	// "DiameterCharacteristicDefinition"
    , DiameterCharacteristicItem(*this)	// "DiameterCharacteristicItem"
    , DiameterCharacteristicNominal(*this)	// "DiameterCharacteristicNominal"
    , DiameterCharacteristicStats(*this)	// "DiameterCharacteristicStats"
    , DistanceBetweenCharacteristicActual(*this)	// "DistanceBetweenCharacteristicActual"
    , DistanceBetweenCharacteristicDefinition(*this)	// "DistanceBetweenCharacteristicDefinition"
    , DistanceBetweenCharacteristicItem(*this)	// "DistanceBetweenCharacteristicItem"
    , DistanceBetweenCharacteristicNominal(*this)	// "DistanceBetweenCharacteristicNominal"
    , DistanceBetweenCharacteristicStats(*this)	// "DistanceBetweenCharacteristicStats"
    , DistanceFromCharacteristicActual(*this)	// "DistanceFromCharacteristicActual"
    , DistanceFromCharacteristicDefinition(*this)	// "DistanceFromCharacteristicDefinition"
    , DistanceFromCharacteristicItem(*this)	// "DistanceFromCharacteristicItem"
    , DistanceFromCharacteristicNominal(*this)	// "DistanceFromCharacteristicNominal"
    , DistanceFromCharacteristicStats(*this)	// "DistanceFromCharacteristicStats"
    , DividedBy(*this)	// "DividedBy"
    , DocumentFileInstruction(*this)	// "DocumentFileInstruction"
    , Edge(*this)	// "Edge"
    , EdgePointFeatureActual(*this)	// "EdgePointFeatureActual"
    , EdgePointFeatureDefinition(*this)	// "EdgePointFeatureDefinition"
    , EdgePointFeatureItem(*this)	// "EdgePointFeatureItem"
    , EdgePointFeatureNominal(*this)	// "EdgePointFeatureNominal"
    , EdgeSet(*this)	// "EdgeSet"
    , EllipseFeatureActual(*this)	// "EllipseFeatureActual"
    , EllipseFeatureDefinition(*this)	// "EllipseFeatureDefinition"
    , EllipseFeatureItem(*this)	// "EllipseFeatureItem"
    , EllipseFeatureNominal(*this)	// "EllipseFeatureNominal"
    , ElongatedCylinderFeatureActual(*this)	// "ElongatedCylinderFeatureActual"
    , ElongatedCylinderFeatureDefinition(*this)	// "ElongatedCylinderFeatureDefinition"
    , ElongatedCylinderFeatureItem(*this)	// "ElongatedCylinderFeatureItem"
    , ElongatedCylinderFeatureNominal(*this)	// "ElongatedCylinderFeatureNominal"
    , EstablishDatumMeasurand(*this)	// "EstablishDatumMeasurand"
    , EvaluateCharacteristicMeasurand(*this)	// "EvaluateCharacteristicMeasurand"
    , EvaluateSpecifiedCharacteristics(*this)	// "EvaluateSpecifiedCharacteristics"
    , Extrude23(*this)	// "Extrude23"
    , Extrude23Core(*this)	// "Extrude23Core"
    , ExtrudedCrossSectionFeatureActual(*this)	// "ExtrudedCrossSectionFeatureActual"
    , ExtrudedCrossSectionFeatureDefinition(*this)	// "ExtrudedCrossSectionFeatureDefinition"
    , ExtrudedCrossSectionFeatureItem(*this)	// "ExtrudedCrossSectionFeatureItem"
    , ExtrudedCrossSectionFeatureNominal(*this)	// "ExtrudedCrossSectionFeatureNominal"
    , FPSTest(*this)	// "FPSTest"
    , Face(*this)	// "Face"
    , FaceBase(*this)	// "FaceBase"
    , FaceMesh(*this)	// "FaceMesh"
    , FaceSet(*this)	// "FaceSet"
    , FeatureActual(*this)	// "FeatureActual"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureDefinition(*this)	// "FeatureDefinition"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , FeatureItem(*this)	// "FeatureItem"
    , FeatureLength(*this)	// "FeatureLength"
    , FeatureNominal(*this)	// "FeatureNominal"
    , Features(*this)	// "Features"
    , FileUnits(*this)	// "FileUnits"
    , FirstArticleStudyPlan(*this)	// "FirstArticleStudyPlan"
    , FirstArticleStudyResults(*this)	// "FirstArticleStudyResults"
    , FlatnessCharacteristicActual(*this)	// "FlatnessCharacteristicActual"
    , FlatnessCharacteristicDefinition(*this)	// "FlatnessCharacteristicDefinition"
    , FlatnessCharacteristicItem(*this)	// "FlatnessCharacteristicItem"
    , FlatnessCharacteristicNominal(*this)	// "FlatnessCharacteristicNominal"
    , FlatnessCharacteristicStats(*this)	// "FlatnessCharacteristicStats"
    , Fonts(*this)	// "Fonts"
    , Frame(*this)	// "Frame"
    , FrameCircular(*this)	// "FrameCircular"
    , FrameFlag(*this)	// "FrameFlag"
    , FrameIrregularForm(*this)	// "FrameIrregularForm"
    , FrameRectangular(*this)	// "FrameRectangular"
    , Frames(*this)	// "Frames"
    , GageDevice(*this)	// "GageDevice"
    , GageMeasureFeatureMethod(*this)	// "GageMeasureFeatureMethod"
    , GageRandRStudyPlan(*this)	// "GageRandRStudyPlan"
    , GageRandRStudyResults(*this)	// "GageRandRStudyResults"
    , GenericFeatureActual(*this)	// "GenericFeatureActual"
    , GenericFeatureDefinition(*this)	// "GenericFeatureDefinition"
    , GenericFeatureItem(*this)	// "GenericFeatureItem"
    , GenericFeatureNominal(*this)	// "GenericFeatureNominal"
    , GeometricCharacteristicStats(*this)	// "GeometricCharacteristicStats"
    , GeometrySet(*this)	// "GeometrySet"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , Header(*this)	// "Header"
    , HeightCharacteristicActual(*this)	// "HeightCharacteristicActual"
    , HeightCharacteristicDefinition(*this)	// "HeightCharacteristicDefinition"
    , HeightCharacteristicItem(*this)	// "HeightCharacteristicItem"
    , HeightCharacteristicNominal(*this)	// "HeightCharacteristicNominal"
    , HeightCharacteristicStats(*this)	// "HeightCharacteristicStats"
    , ISO10360Test(*this)	// "ISO10360Test"
    , IfThenArcRule(*this)	// "IfThenArcRule"
    , IfThenCircleRule(*this)	// "IfThenCircleRule"
    , IfThenConeRule(*this)	// "IfThenConeRule"
    , IfThenConicalSegmentRule(*this)	// "IfThenConicalSegmentRule"
    , IfThenCuboidRule(*this)	// "IfThenCuboidRule"
    , IfThenCurveRule(*this)	// "IfThenCurveRule"
    , IfThenCylinderRule(*this)	// "IfThenCylinderRule"
    , IfThenCylindricalSegmentRule(*this)	// "IfThenCylindricalSegmentRule"
    , IfThenEllipseRule(*this)	// "IfThenEllipseRule"
    , IfThenElongatedCylinderRule(*this)	// "IfThenElongatedCylinderRule"
    , IfThenExtrudedCrossSectionRule(*this)	// "IfThenExtrudedCrossSectionRule"
    , IfThenFeatureRule(*this)	// "IfThenFeatureRule"
    , IfThenLineRule(*this)	// "IfThenLineRule"
    , IfThenOppositeLinesRule(*this)	// "IfThenOppositeLinesRule"
    , IfThenOppositePlanesRule(*this)	// "IfThenOppositePlanesRule"
    , IfThenPlaneRule(*this)	// "IfThenPlaneRule"
    , IfThenPointDefinedCurveRule(*this)	// "IfThenPointDefinedCurveRule"
    , IfThenPointDefinedSurfaceRule(*this)	// "IfThenPointDefinedSurfaceRule"
    , IfThenPointRule(*this)	// "IfThenPointRule"
    , IfThenSphereRule(*this)	// "IfThenSphereRule"
    , IfThenSphericalSegmentRule(*this)	// "IfThenSphericalSegmentRule"
    , IfThenSurfaceOfRevolutionRule(*this)	// "IfThenSurfaceOfRevolutionRule"
    , IfThenSurfaceRule(*this)	// "IfThenSurfaceRule"
    , IfThenToroidalSegmentRule(*this)	// "IfThenToroidalSegmentRule"
    , IfThenTorusRule(*this)	// "IfThenTorusRule"
    , ImageInstruction(*this)	// "ImageInstruction"
    , Layer(*this)	// "Layer"
    , LayerSet(*this)	// "LayerSet"
    , Leader(*this)	// "Leader"
    , LeaderCircular(*this)	// "LeaderCircular"
    , LeaderDoubleHead(*this)	// "LeaderDoubleHead"
    , LeaderDoubleHeadCircular(*this)	// "LeaderDoubleHeadCircular"
    , LeaderDoubleHeadExtend(*this)	// "LeaderDoubleHeadExtend"
    , LeaderExtend(*this)	// "LeaderExtend"
    , LengthCharacteristicActual(*this)	// "LengthCharacteristicActual"
    , LengthCharacteristicDefinition(*this)	// "LengthCharacteristicDefinition"
    , LengthCharacteristicItem(*this)	// "LengthCharacteristicItem"
    , LengthCharacteristicNominal(*this)	// "LengthCharacteristicNominal"
    , LengthCharacteristicStats(*this)	// "LengthCharacteristicStats"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , LineAuxiliary(*this)	// "LineAuxiliary"
    , LineFeatureActual(*this)	// "LineFeatureActual"
    , LineFeatureDefinition(*this)	// "LineFeatureDefinition"
    , LineFeatureItem(*this)	// "LineFeatureItem"
    , LineFeatureNominal(*this)	// "LineFeatureNominal"
    , LineProfileCharacteristicActual(*this)	// "LineProfileCharacteristicActual"
    , LineProfileCharacteristicDefinition(*this)	// "LineProfileCharacteristicDefinition"
    , LineProfileCharacteristicItem(*this)	// "LineProfileCharacteristicItem"
    , LineProfileCharacteristicNominal(*this)	// "LineProfileCharacteristicNominal"
    , LineProfileCharacteristicStats(*this)	// "LineProfileCharacteristicStats"
    , LinearCharacteristicStats(*this)	// "LinearCharacteristicStats"
    , LinearCoordinateCharacteristicActual(*this)	// "LinearCoordinateCharacteristicActual"
    , LinearCoordinateCharacteristicDefinition(*this)	// "LinearCoordinateCharacteristicDefinition"
    , LinearCoordinateCharacteristicItem(*this)	// "LinearCoordinateCharacteristicItem"
    , LinearCoordinateCharacteristicNominal(*this)	// "LinearCoordinateCharacteristicNominal"
    , LinearCoordinateCharacteristicStats(*this)	// "LinearCoordinateCharacteristicStats"
    , LinearityStudyPlan(*this)	// "LinearityStudyPlan"
    , LinearityStudyResults(*this)	// "LinearityStudyResults"
    , LocationCharacteristicStats(*this)	// "LocationCharacteristicStats"
    , Loop(*this)	// "Loop"
    , LoopBase(*this)	// "LoopBase"
    , LoopMesh(*this)	// "LoopMesh"
    , LoopSet(*this)	// "LoopSet"
    , Machine(*this)	// "Machine"
    , ManualMeasureFeatureMethod(*this)	// "ManualMeasureFeatureMethod"
    , ManufacturingProcessTraceabilities(*this)	// "ManufacturingProcessTraceabilities"
    , Measurand(*this)	// "Measurand"
    , MeasureEvaluateAll(*this)	// "MeasureEvaluateAll"
    , MeasureEvaluateSpecified(*this)	// "MeasureEvaluateSpecified"
    , MeasureSpecifiedFeatures(*this)	// "MeasureSpecifiedFeatures"
    , MeasureSpecifiedMeasurands(*this)	// "MeasureSpecifiedMeasurands"
    , MeasuredCharacteristics(*this)	// "MeasuredCharacteristics"
    , MeasuredFeatures(*this)	// "MeasuredFeatures"
    , MeasurementDevice(*this)	// "MeasurementDevice"
    , MeasurementPlan(*this)	// "MeasurementPlan"
    , MeasurementResources(*this)	// "MeasurementResources"
    , MeasurementsResults(*this)	// "MeasurementsResults"
    , MeshTriangle(*this)	// "MeshTriangle"
    , MeshTriangleCore(*this)	// "MeshTriangleCore"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , NominalOffset(*this)	// "NominalOffset"
    , NominalRotation(*this)	// "NominalRotation"
    , Not2(*this)	// "Not"
    , Nurbs12(*this)	// "Nurbs12"
    , Nurbs12Core(*this)	// "Nurbs12Core"
    , Nurbs13(*this)	// "Nurbs13"
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Nurbs23(*this)	// "Nurbs23"
    , Nurbs23Core(*this)	// "Nurbs23Core"
    , Offset23(*this)	// "Offset23"
    , Offset23Core(*this)	// "Offset23Core"
    , OneOfActionGroup(*this)	// "OneOfActionGroup"
    , OneOfPlanRoot(*this)	// "OneOfPlanRoot"
    , OppositeLinesFeatureActual(*this)	// "OppositeLinesFeatureActual"
    , OppositeLinesFeatureDefinition(*this)	// "OppositeLinesFeatureDefinition"
    , OppositeLinesFeatureItem(*this)	// "OppositeLinesFeatureItem"
    , OppositeLinesFeatureNominal(*this)	// "OppositeLinesFeatureNominal"
    , OppositePlanesFeatureActual(*this)	// "OppositePlanesFeatureActual"
    , OppositePlanesFeatureDefinition(*this)	// "OppositePlanesFeatureDefinition"
    , OppositePlanesFeatureItem(*this)	// "OppositePlanesFeatureItem"
    , OppositePlanesFeatureNominal(*this)	// "OppositePlanesFeatureNominal"
    , Or2(*this)	// "Or"
    , OrderedActionGroup(*this)	// "OrderedActionGroup"
    , OrderedPlanRoot(*this)	// "OrderedPlanRoot"
    , OrientationCharacteristicStats(*this)	// "OrientationCharacteristicStats"
    , OtherMeasureFeatureMethod(*this)	// "OtherMeasureFeatureMethod"
    , PMIDisplaySet(*this)	// "PMIDisplaySet"
    , ParallelismCharacteristicActual(*this)	// "ParallelismCharacteristicActual"
    , ParallelismCharacteristicDefinition(*this)	// "ParallelismCharacteristicDefinition"
    , ParallelismCharacteristicItem(*this)	// "ParallelismCharacteristicItem"
    , ParallelismCharacteristicNominal(*this)	// "ParallelismCharacteristicNominal"
    , ParallelismCharacteristicStats(*this)	// "ParallelismCharacteristicStats"
    , Part(*this)	// "Part"
    , PartNote(*this)	// "PartNote"
    , PartNoteSet(*this)	// "PartNoteSet"
    , PartSet(*this)	// "PartSet"
    , PartiallyOrderedActionGroup(*this)	// "PartiallyOrderedActionGroup"
    , PartiallyOrderedPlanRoot(*this)	// "PartiallyOrderedPlanRoot"
    , PathTriangulation(*this)	// "PathTriangulation"
    , PathTriangulationCore(*this)	// "PathTriangulationCore"
    , PatternFeatureActual(*this)	// "PatternFeatureActual"
    , PatternFeatureDefinition(*this)	// "PatternFeatureDefinition"
    , PatternFeatureItem(*this)	// "PatternFeatureItem"
    , PatternFeatureNominal(*this)	// "PatternFeatureNominal"
    , PerpendicularityCharacteristicActual(*this)	// "PerpendicularityCharacteristicActual"
    , PerpendicularityCharacteristicDefinition(*this)	// "PerpendicularityCharacteristicDefinition"
    , PerpendicularityCharacteristicItem(*this)	// "PerpendicularityCharacteristicItem"
    , PerpendicularityCharacteristicNominal(*this)	// "PerpendicularityCharacteristicNominal"
    , PerpendicularityCharacteristicStats(*this)	// "PerpendicularityCharacteristicStats"
    , PickSomeActionGroup(*this)	// "PickSomeActionGroup"
    , PickSomePlanRoot(*this)	// "PickSomePlanRoot"
    , PlanElement(*this)	// "PlanElement"
    , PlanRoot(*this)	// "PlanRoot"
    , Plane23(*this)	// "Plane23"
    , Plane23Core(*this)	// "Plane23Core"
    , PlaneClipping(*this)	// "PlaneClipping"
    , PlaneFeatureActual(*this)	// "PlaneFeatureActual"
    , PlaneFeatureDefinition(*this)	// "PlaneFeatureDefinition"
    , PlaneFeatureItem(*this)	// "PlaneFeatureItem"
    , PlaneFeatureNominal(*this)	// "PlaneFeatureNominal"
    , PlaneReference(*this)	// "PlaneReference"
    , Plus(*this)	// "Plus"
    , Point(*this)	// "Point"
    , PointAccuracyTest(*this)	// "PointAccuracyTest"
    , PointAuxiliary(*this)	// "PointAuxiliary"
    , PointCloud(*this)	// "PointCloud"
    , PointCloudSet(*this)	// "PointCloudSet"
    , PointDefinedCurveFeatureActual(*this)	// "PointDefinedCurveFeatureActual"
    , PointDefinedCurveFeatureDefinition(*this)	// "PointDefinedCurveFeatureDefinition"
    , PointDefinedCurveFeatureItem(*this)	// "PointDefinedCurveFeatureItem"
    , PointDefinedCurveFeatureNominal(*this)	// "PointDefinedCurveFeatureNominal"
    , PointDefinedSurfaceFeatureActual(*this)	// "PointDefinedSurfaceFeatureActual"
    , PointDefinedSurfaceFeatureDefinition(*this)	// "PointDefinedSurfaceFeatureDefinition"
    , PointDefinedSurfaceFeatureItem(*this)	// "PointDefinedSurfaceFeatureItem"
    , PointDefinedSurfaceFeatureNominal(*this)	// "PointDefinedSurfaceFeatureNominal"
    , PointFeatureActual(*this)	// "PointFeatureActual"
    , PointFeatureDefinition(*this)	// "PointFeatureDefinition"
    , PointFeatureItem(*this)	// "PointFeatureItem"
    , PointFeatureNominal(*this)	// "PointFeatureNominal"
    , PointProfileCharacteristicActual(*this)	// "PointProfileCharacteristicActual"
    , PointProfileCharacteristicDefinition(*this)	// "PointProfileCharacteristicDefinition"
    , PointProfileCharacteristicItem(*this)	// "PointProfileCharacteristicItem"
    , PointProfileCharacteristicNominal(*this)	// "PointProfileCharacteristicNominal"
    , PointProfileCharacteristicStats(*this)	// "PointProfileCharacteristicStats"
    , PointSet(*this)	// "PointSet"
    , Polyline12(*this)	// "Polyline12"
    , Polyline12Core(*this)	// "Polyline12Core"
    , Polyline13(*this)	// "Polyline13"
    , Polyline13Core(*this)	// "Polyline13Core"
    , PositionCharacteristicActual(*this)	// "PositionCharacteristicActual"
    , PositionCharacteristicDefinition(*this)	// "PositionCharacteristicDefinition"
    , PositionCharacteristicItem(*this)	// "PositionCharacteristicItem"
    , PositionCharacteristicNominal(*this)	// "PositionCharacteristicNominal"
    , PositionCharacteristicStats(*this)	// "PositionCharacteristicStats"
    , PrimaryAlignment(*this)	// "PrimaryAlignment"
    , ProcessDifferenceStudyPlan(*this)	// "ProcessDifferenceStudyPlan"
    , ProcessDifferenceStudyResults(*this)	// "ProcessDifferenceStudyResults"
    , Product(*this)	// "Product"
    , ProductionStudyPlan(*this)	// "ProductionStudyPlan"
    , ProductionStudyResults(*this)	// "ProductionStudyResults"
    , ProfileGroupFeatureActual(*this)	// "ProfileGroupFeatureActual"
    , ProfileGroupFeatureDefinition(*this)	// "ProfileGroupFeatureDefinition"
    , ProfileGroupFeatureItem(*this)	// "ProfileGroupFeatureItem"
    , ProfileGroupFeatureNominal(*this)	// "ProfileGroupFeatureNominal"
    , QIFDocument2(*this)	// "QIFDocument"
    , RadiusCharacteristicActual(*this)	// "RadiusCharacteristicActual"
    , RadiusCharacteristicDefinition(*this)	// "RadiusCharacteristicDefinition"
    , RadiusCharacteristicItem(*this)	// "RadiusCharacteristicItem"
    , RadiusCharacteristicNominal(*this)	// "RadiusCharacteristicNominal"
    , RadiusCharacteristicStats(*this)	// "RadiusCharacteristicStats"
    , Revolution23(*this)	// "Revolution23"
    , Revolution23Core(*this)	// "Revolution23Core"
    , Ruled23(*this)	// "Ruled23"
    , Ruled23Core(*this)	// "Ruled23Core"
    , Rules(*this)	// "Rules"
    , RunoutGroupFeatureActual(*this)	// "RunoutGroupFeatureActual"
    , RunoutGroupFeatureDefinition(*this)	// "RunoutGroupFeatureDefinition"
    , RunoutGroupFeatureItem(*this)	// "RunoutGroupFeatureItem"
    , RunoutGroupFeatureNominal(*this)	// "RunoutGroupFeatureNominal"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , SavedView(*this)	// "SavedView"
    , SecondaryAlignment(*this)	// "SecondaryAlignment"
    , Segment12(*this)	// "Segment12"
    , Segment12Core(*this)	// "Segment12Core"
    , Segment13(*this)	// "Segment13"
    , Segment13Core(*this)	// "Segment13Core"
    , Sensor(*this)	// "Sensor"
    , ShapeClassIs(*this)	// "ShapeClassIs"
    , Shell(*this)	// "Shell"
    , ShellSet(*this)	// "ShellSet"
    , SimpleStudyPlan(*this)	// "SimpleStudyPlan"
    , SimpleStudyResults(*this)	// "SimpleStudyResults"
    , Sphere23(*this)	// "Sphere23"
    , Sphere23Core(*this)	// "Sphere23Core"
    , SphereFeatureActual(*this)	// "SphereFeatureActual"
    , SphereFeatureDefinition(*this)	// "SphereFeatureDefinition"
    , SphereFeatureItem(*this)	// "SphereFeatureItem"
    , SphereFeatureNominal(*this)	// "SphereFeatureNominal"
    , SphericalSegmentFeatureActual(*this)	// "SphericalSegmentFeatureActual"
    , SphericalSegmentFeatureDefinition(*this)	// "SphericalSegmentFeatureDefinition"
    , SphericalSegmentFeatureItem(*this)	// "SphericalSegmentFeatureItem"
    , SphericalSegmentFeatureNominal(*this)	// "SphericalSegmentFeatureNominal"
    , Spline12(*this)	// "Spline12"
    , Spline12Core(*this)	// "Spline12Core"
    , Spline13(*this)	// "Spline13"
    , Spline13Core(*this)	// "Spline13Core"
    , Spline23(*this)	// "Spline23"
    , Spline23Core(*this)	// "Spline23Core"
    , SquareCharacteristicActual(*this)	// "SquareCharacteristicActual"
    , SquareCharacteristicDefinition(*this)	// "SquareCharacteristicDefinition"
    , SquareCharacteristicItem(*this)	// "SquareCharacteristicItem"
    , SquareCharacteristicNominal(*this)	// "SquareCharacteristicNominal"
    , SquareCharacteristicStats(*this)	// "SquareCharacteristicStats"
    , StabilityStudyPlan(*this)	// "StabilityStudyPlan"
    , StabilityStudyResults(*this)	// "StabilityStudyResults"
    , StatisticalStudyPlan(*this)	// "StatisticalStudyPlan"
    , StatisticalStudyResults(*this)	// "StatisticalStudyResults"
    , Statistics(*this)	// "Statistics"
    , StraightnessCharacteristicActual(*this)	// "StraightnessCharacteristicActual"
    , StraightnessCharacteristicDefinition(*this)	// "StraightnessCharacteristicDefinition"
    , StraightnessCharacteristicItem(*this)	// "StraightnessCharacteristicItem"
    , StraightnessCharacteristicNominal(*this)	// "StraightnessCharacteristicNominal"
    , StraightnessCharacteristicStats(*this)	// "StraightnessCharacteristicStats"
    , Surface(*this)	// "Surface"
    , SurfaceCore(*this)	// "SurfaceCore"
    , SurfaceMeshSet(*this)	// "SurfaceMeshSet"
    , SurfaceOfRevolutionFeatureActual(*this)	// "SurfaceOfRevolutionFeatureActual"
    , SurfaceOfRevolutionFeatureDefinition(*this)	// "SurfaceOfRevolutionFeatureDefinition"
    , SurfaceOfRevolutionFeatureItem(*this)	// "SurfaceOfRevolutionFeatureItem"
    , SurfaceOfRevolutionFeatureNominal(*this)	// "SurfaceOfRevolutionFeatureNominal"
    , SurfaceProfileCharacteristicActual(*this)	// "SurfaceProfileCharacteristicActual"
    , SurfaceProfileCharacteristicDefinition(*this)	// "SurfaceProfileCharacteristicDefinition"
    , SurfaceProfileCharacteristicItem(*this)	// "SurfaceProfileCharacteristicItem"
    , SurfaceProfileCharacteristicNominal(*this)	// "SurfaceProfileCharacteristicNominal"
    , SurfaceProfileCharacteristicStats(*this)	// "SurfaceProfileCharacteristicStats"
    , SurfaceProfileNonUniformCharacteristicActual(*this)	// "SurfaceProfileNonUniformCharacteristicActual"
    , SurfaceProfileNonUniformCharacteristicDefinition(*this)	// "SurfaceProfileNonUniformCharacteristicDefinition"
    , SurfaceProfileNonUniformCharacteristicItem(*this)	// "SurfaceProfileNonUniformCharacteristicItem"
    , SurfaceProfileNonUniformCharacteristicNominal(*this)	// "SurfaceProfileNonUniformCharacteristicNominal"
    , SurfaceProfileNonUniformCharacteristicStats(*this)	// "SurfaceProfileNonUniformCharacteristicStats"
    , SurfaceSet(*this)	// "SurfaceSet"
    , SurfaceTextureCharacteristicActual(*this)	// "SurfaceTextureCharacteristicActual"
    , SurfaceTextureCharacteristicDefinition(*this)	// "SurfaceTextureCharacteristicDefinition"
    , SurfaceTextureCharacteristicItem(*this)	// "SurfaceTextureCharacteristicItem"
    , SurfaceTextureCharacteristicNominal(*this)	// "SurfaceTextureCharacteristicNominal"
    , SurfaceTextureCharacteristicStats(*this)	// "SurfaceTextureCharacteristicStats"
    , SymmetryCharacteristicActual(*this)	// "SymmetryCharacteristicActual"
    , SymmetryCharacteristicDefinition(*this)	// "SymmetryCharacteristicDefinition"
    , SymmetryCharacteristicItem(*this)	// "SymmetryCharacteristicItem"
    , SymmetryCharacteristicNominal(*this)	// "SymmetryCharacteristicNominal"
    , SymmetryCharacteristicStats(*this)	// "SymmetryCharacteristicStats"
    , Text(*this)	// "Text"
    , TextInstruction(*this)	// "TextInstruction"
    , Texts(*this)	// "Texts"
    , ThicknessCharacteristicActual(*this)	// "ThicknessCharacteristicActual"
    , ThicknessCharacteristicDefinition(*this)	// "ThicknessCharacteristicDefinition"
    , ThicknessCharacteristicItem(*this)	// "ThicknessCharacteristicItem"
    , ThicknessCharacteristicNominal(*this)	// "ThicknessCharacteristicNominal"
    , ThicknessCharacteristicStats(*this)	// "ThicknessCharacteristicStats"
    , ThreadCharacteristicActual(*this)	// "ThreadCharacteristicActual"
    , ThreadCharacteristicDefinition(*this)	// "ThreadCharacteristicDefinition"
    , ThreadCharacteristicItem(*this)	// "ThreadCharacteristicItem"
    , ThreadCharacteristicNominal(*this)	// "ThreadCharacteristicNominal"
    , ThreadCharacteristicStats(*this)	// "ThreadCharacteristicStats"
    , ThreadedFeatureActual(*this)	// "ThreadedFeatureActual"
    , ThreadedFeatureDefinition(*this)	// "ThreadedFeatureDefinition"
    , ThreadedFeatureItem(*this)	// "ThreadedFeatureItem"
    , ThreadedFeatureNominal(*this)	// "ThreadedFeatureNominal"
    , Times(*this)	// "Times"
    , TopologySet(*this)	// "TopologySet"
    , ToroidalSegmentFeatureActual(*this)	// "ToroidalSegmentFeatureActual"
    , ToroidalSegmentFeatureDefinition(*this)	// "ToroidalSegmentFeatureDefinition"
    , ToroidalSegmentFeatureItem(*this)	// "ToroidalSegmentFeatureItem"
    , ToroidalSegmentFeatureNominal(*this)	// "ToroidalSegmentFeatureNominal"
    , Torus23(*this)	// "Torus23"
    , Torus23Core(*this)	// "Torus23Core"
    , TorusFeatureActual(*this)	// "TorusFeatureActual"
    , TorusFeatureDefinition(*this)	// "TorusFeatureDefinition"
    , TorusFeatureItem(*this)	// "TorusFeatureItem"
    , TorusFeatureNominal(*this)	// "TorusFeatureNominal"
    , TotalRunoutCharacteristicActual(*this)	// "TotalRunoutCharacteristicActual"
    , TotalRunoutCharacteristicDefinition(*this)	// "TotalRunoutCharacteristicDefinition"
    , TotalRunoutCharacteristicItem(*this)	// "TotalRunoutCharacteristicItem"
    , TotalRunoutCharacteristicNominal(*this)	// "TotalRunoutCharacteristicNominal"
    , TotalRunoutCharacteristicStats(*this)	// "TotalRunoutCharacteristicStats"
    , TouchProbe(*this)	// "TouchProbe"
    , Transforms(*this)	// "Transforms"
    , UnorderedActionGroup(*this)	// "UnorderedActionGroup"
    , UnorderedPlanRoot(*this)	// "UnorderedPlanRoot"
    , UserDefinedAngularCharacteristicActual(*this)	// "UserDefinedAngularCharacteristicActual"
    , UserDefinedAngularCharacteristicDefinition(*this)	// "UserDefinedAngularCharacteristicDefinition"
    , UserDefinedAngularCharacteristicItem(*this)	// "UserDefinedAngularCharacteristicItem"
    , UserDefinedAngularCharacteristicNominal(*this)	// "UserDefinedAngularCharacteristicNominal"
    , UserDefinedAngularCharacteristicStats(*this)	// "UserDefinedAngularCharacteristicStats"
    , UserDefinedAreaCharacteristicActual(*this)	// "UserDefinedAreaCharacteristicActual"
    , UserDefinedAreaCharacteristicDefinition(*this)	// "UserDefinedAreaCharacteristicDefinition"
    , UserDefinedAreaCharacteristicItem(*this)	// "UserDefinedAreaCharacteristicItem"
    , UserDefinedAreaCharacteristicNominal(*this)	// "UserDefinedAreaCharacteristicNominal"
    , UserDefinedAreaCharacteristicStats(*this)	// "UserDefinedAreaCharacteristicStats"
    , UserDefinedAttributeCharacteristicActual(*this)	// "UserDefinedAttributeCharacteristicActual"
    , UserDefinedAttributeCharacteristicDefinition(*this)	// "UserDefinedAttributeCharacteristicDefinition"
    , UserDefinedAttributeCharacteristicItem(*this)	// "UserDefinedAttributeCharacteristicItem"
    , UserDefinedAttributeCharacteristicNominal(*this)	// "UserDefinedAttributeCharacteristicNominal"
    , UserDefinedAttributeCharacteristicStats(*this)	// "UserDefinedAttributeCharacteristicStats"
    , UserDefinedForceCharacteristicActual(*this)	// "UserDefinedForceCharacteristicActual"
    , UserDefinedForceCharacteristicDefinition(*this)	// "UserDefinedForceCharacteristicDefinition"
    , UserDefinedForceCharacteristicItem(*this)	// "UserDefinedForceCharacteristicItem"
    , UserDefinedForceCharacteristicNominal(*this)	// "UserDefinedForceCharacteristicNominal"
    , UserDefinedForceCharacteristicStats(*this)	// "UserDefinedForceCharacteristicStats"
    , UserDefinedLinearCharacteristicActual(*this)	// "UserDefinedLinearCharacteristicActual"
    , UserDefinedLinearCharacteristicDefinition(*this)	// "UserDefinedLinearCharacteristicDefinition"
    , UserDefinedLinearCharacteristicItem(*this)	// "UserDefinedLinearCharacteristicItem"
    , UserDefinedLinearCharacteristicNominal(*this)	// "UserDefinedLinearCharacteristicNominal"
    , UserDefinedLinearCharacteristicStats(*this)	// "UserDefinedLinearCharacteristicStats"
    , UserDefinedMassCharacteristicActual(*this)	// "UserDefinedMassCharacteristicActual"
    , UserDefinedMassCharacteristicDefinition(*this)	// "UserDefinedMassCharacteristicDefinition"
    , UserDefinedMassCharacteristicItem(*this)	// "UserDefinedMassCharacteristicItem"
    , UserDefinedMassCharacteristicNominal(*this)	// "UserDefinedMassCharacteristicNominal"
    , UserDefinedMassCharacteristicStats(*this)	// "UserDefinedMassCharacteristicStats"
    , UserDefinedPressureCharacteristicActual(*this)	// "UserDefinedPressureCharacteristicActual"
    , UserDefinedPressureCharacteristicDefinition(*this)	// "UserDefinedPressureCharacteristicDefinition"
    , UserDefinedPressureCharacteristicItem(*this)	// "UserDefinedPressureCharacteristicItem"
    , UserDefinedPressureCharacteristicNominal(*this)	// "UserDefinedPressureCharacteristicNominal"
    , UserDefinedPressureCharacteristicStats(*this)	// "UserDefinedPressureCharacteristicStats"
    , UserDefinedSpeedCharacteristicActual(*this)	// "UserDefinedSpeedCharacteristicActual"
    , UserDefinedSpeedCharacteristicDefinition(*this)	// "UserDefinedSpeedCharacteristicDefinition"
    , UserDefinedSpeedCharacteristicItem(*this)	// "UserDefinedSpeedCharacteristicItem"
    , UserDefinedSpeedCharacteristicNominal(*this)	// "UserDefinedSpeedCharacteristicNominal"
    , UserDefinedSpeedCharacteristicStats(*this)	// "UserDefinedSpeedCharacteristicStats"
    , UserDefinedTemperatureCharacteristicActual(*this)	// "UserDefinedTemperatureCharacteristicActual"
    , UserDefinedTemperatureCharacteristicDefinition(*this)	// "UserDefinedTemperatureCharacteristicDefinition"
    , UserDefinedTemperatureCharacteristicItem(*this)	// "UserDefinedTemperatureCharacteristicItem"
    , UserDefinedTemperatureCharacteristicNominal(*this)	// "UserDefinedTemperatureCharacteristicNominal"
    , UserDefinedTemperatureCharacteristicStats(*this)	// "UserDefinedTemperatureCharacteristicStats"
    , UserDefinedTimeCharacteristicActual(*this)	// "UserDefinedTimeCharacteristicActual"
    , UserDefinedTimeCharacteristicDefinition(*this)	// "UserDefinedTimeCharacteristicDefinition"
    , UserDefinedTimeCharacteristicItem(*this)	// "UserDefinedTimeCharacteristicItem"
    , UserDefinedTimeCharacteristicNominal(*this)	// "UserDefinedTimeCharacteristicNominal"
    , UserDefinedTimeCharacteristicStats(*this)	// "UserDefinedTimeCharacteristicStats"
    , UserDefinedUnitCharacteristicActual(*this)	// "UserDefinedUnitCharacteristicActual"
    , UserDefinedUnitCharacteristicDefinition(*this)	// "UserDefinedUnitCharacteristicDefinition"
    , UserDefinedUnitCharacteristicItem(*this)	// "UserDefinedUnitCharacteristicItem"
    , UserDefinedUnitCharacteristicNominal(*this)	// "UserDefinedUnitCharacteristicNominal"
    , UserDefinedUnitCharacteristicStats(*this)	// "UserDefinedUnitCharacteristicStats"
    , Vertex(*this)	// "Vertex"
    , VertexSet(*this)	// "VertexSet"
    , VideoInstruction(*this)	// "VideoInstruction"
    , ViewBase(*this)	// "ViewBase"
    , ViewSet(*this)	// "ViewSet"
    , VisualizationSet(*this)	// "VisualizationSet"
    , WidthCharacteristicActual(*this)	// "WidthCharacteristicActual"
    , WidthCharacteristicDefinition(*this)	// "WidthCharacteristicDefinition"
    , WidthCharacteristicItem(*this)	// "WidthCharacteristicItem"
    , WidthCharacteristicNominal(*this)	// "WidthCharacteristicNominal"
    , WidthCharacteristicStats(*this)	// "WidthCharacteristicStats"
    , WitnessLines(*this)	// "WitnessLines"
    , WorkInstruction(*this)	// "WorkInstruction"
{
}

CQIFDocument::CQIFDocument(CQIFDocument const& other)
    : TypeBase(other.GetNode())
    , ActionMethod(*this)	// "ActionMethod"
    , ActualComponent(*this)	// "ActualComponent"
    , ActualComponentSet(*this)	// "ActualComponentSet"
    , ActualOffset(*this)	// "ActualOffset"
    , Aggregate12(*this)	// "Aggregate12"
    , Aggregate12Core(*this)	// "Aggregate12Core"
    , Aggregate13(*this)	// "Aggregate13"
    , Aggregate13Core(*this)	// "Aggregate13Core"
    , AlignmentOperation(*this)	// "AlignmentOperation"
    , And2(*this)	// "And"
    , AngleBetweenCharacteristicActual(*this)	// "AngleBetweenCharacteristicActual"
    , AngleBetweenCharacteristicDefinition(*this)	// "AngleBetweenCharacteristicDefinition"
    , AngleBetweenCharacteristicItem(*this)	// "AngleBetweenCharacteristicItem"
    , AngleBetweenCharacteristicNominal(*this)	// "AngleBetweenCharacteristicNominal"
    , AngleBetweenCharacteristicStats(*this)	// "AngleBetweenCharacteristicStats"
    , AngleCharacteristicActual(*this)	// "AngleCharacteristicActual"
    , AngleCharacteristicDefinition(*this)	// "AngleCharacteristicDefinition"
    , AngleCharacteristicItem(*this)	// "AngleCharacteristicItem"
    , AngleCharacteristicNominal(*this)	// "AngleCharacteristicNominal"
    , AngleCharacteristicStats(*this)	// "AngleCharacteristicStats"
    , AngleFromCharacteristicActual(*this)	// "AngleFromCharacteristicActual"
    , AngleFromCharacteristicDefinition(*this)	// "AngleFromCharacteristicDefinition"
    , AngleFromCharacteristicItem(*this)	// "AngleFromCharacteristicItem"
    , AngleFromCharacteristicNominal(*this)	// "AngleFromCharacteristicNominal"
    , AngleFromCharacteristicStats(*this)	// "AngleFromCharacteristicStats"
    , AngularCharacteristicStats(*this)	// "AngularCharacteristicStats"
    , AngularCoordinateCharacteristicActual(*this)	// "AngularCoordinateCharacteristicActual"
    , AngularCoordinateCharacteristicDefinition(*this)	// "AngularCoordinateCharacteristicDefinition"
    , AngularCoordinateCharacteristicItem(*this)	// "AngularCoordinateCharacteristicItem"
    , AngularCoordinateCharacteristicNominal(*this)	// "AngularCoordinateCharacteristicNominal"
    , AngularCoordinateCharacteristicStats(*this)	// "AngularCoordinateCharacteristicStats"
    , AngularityCharacteristicActual(*this)	// "AngularityCharacteristicActual"
    , AngularityCharacteristicDefinition(*this)	// "AngularityCharacteristicDefinition"
    , AngularityCharacteristicItem(*this)	// "AngularityCharacteristicItem"
    , AngularityCharacteristicNominal(*this)	// "AngularityCharacteristicNominal"
    , AngularityCharacteristicStats(*this)	// "AngularityCharacteristicStats"
    , ArcCircular12(*this)	// "ArcCircular12"
    , ArcCircular12Core(*this)	// "ArcCircular12Core"
    , ArcCircular13(*this)	// "ArcCircular13"
    , ArcCircular13Core(*this)	// "ArcCircular13Core"
    , ArcConic12(*this)	// "ArcConic12"
    , ArcConic12Core(*this)	// "ArcConic12Core"
    , ArcConic13(*this)	// "ArcConic13"
    , ArcConic13Core(*this)	// "ArcConic13Core"
    , ArcFeatureActual(*this)	// "ArcFeatureActual"
    , ArcFeatureDefinition(*this)	// "ArcFeatureDefinition"
    , ArcFeatureItem(*this)	// "ArcFeatureItem"
    , ArcFeatureNominal(*this)	// "ArcFeatureNominal"
    , ArithmeticCharacteristicParameter(*this)	// "ArithmeticCharacteristicParameter"
    , ArithmeticConstant(*this)	// "ArithmeticConstant"
    , ArithmeticEqual(*this)	// "ArithmeticEqual"
    , ArithmeticExpression(*this)	// "ArithmeticExpression"
    , ArithmeticFeatureParameter(*this)	// "ArithmeticFeatureParameter"
    , AsmPaths(*this)	// "AsmPaths"
    , Assembly(*this)	// "Assembly"
    , AssemblySet(*this)	// "AssemblySet"
    , Attribute(*this)	// "Attribute"
    , AttributeBool(*this)	// "AttributeBool"
    , AttributeD3(*this)	// "AttributeD3"
    , AttributeI1(*this)	// "AttributeI1"
    , AttributeI2(*this)	// "AttributeI2"
    , AttributeQPId(*this)	// "AttributeQPId"
    , AttributeStr(*this)	// "AttributeStr"
    , AttributeUser(*this)	// "AttributeUser"
    , Attributes(*this)	// "Attributes"
    , Auxiliary(*this)	// "Auxiliary"
    , AuxiliarySet(*this)	// "AuxiliarySet"
    , AverageFeature(*this)	// "AverageFeature"
    , AverageFeatures(*this)	// "AverageFeatures"
    , B89Test(*this)	// "B89Test"
    , BestFit(*this)	// "BestFit"
    , BiasStudyPlan(*this)	// "BiasStudyPlan"
    , BiasStudyResults(*this)	// "BiasStudyResults"
    , Body(*this)	// "Body"
    , BodySet(*this)	// "BodySet"
    , BooleanEqual(*this)	// "BooleanEqual"
    , BooleanExpression(*this)	// "BooleanExpression"
    , CMM(*this)	// "CMM"
    , Caliper(*this)	// "Caliper"
    , Camera(*this)	// "Camera"
    , CapabilityStudyPlan(*this)	// "CapabilityStudyPlan"
    , CapabilityStudyResults(*this)	// "CapabilityStudyResults"
    , CharacteristicActual(*this)	// "CharacteristicActual"
    , CharacteristicDefinition(*this)	// "CharacteristicDefinition"
    , CharacteristicGroup(*this)	// "CharacteristicGroup"
    , CharacteristicIs(*this)	// "CharacteristicIs"
    , CharacteristicItem(*this)	// "CharacteristicItem"
    , CharacteristicManufacturingProcessGroup(*this)	// "CharacteristicManufacturingProcessGroup"
    , CharacteristicNominal(*this)	// "CharacteristicNominal"
    , CharacteristicSimultaneityGroup(*this)	// "CharacteristicSimultaneityGroup"
    , CharacteristicStats(*this)	// "CharacteristicStats"
    , Characteristics(*this)	// "Characteristics"
    , CharacteristicsStats(*this)	// "CharacteristicsStats"
    , ChordCharacteristicActual(*this)	// "ChordCharacteristicActual"
    , ChordCharacteristicDefinition(*this)	// "ChordCharacteristicDefinition"
    , ChordCharacteristicItem(*this)	// "ChordCharacteristicItem"
    , ChordCharacteristicNominal(*this)	// "ChordCharacteristicNominal"
    , ChordCharacteristicStats(*this)	// "ChordCharacteristicStats"
    , CircleFeatureActual(*this)	// "CircleFeatureActual"
    , CircleFeatureDefinition(*this)	// "CircleFeatureDefinition"
    , CircleFeatureItem(*this)	// "CircleFeatureItem"
    , CircleFeatureNominal(*this)	// "CircleFeatureNominal"
    , CircularRunoutCharacteristicActual(*this)	// "CircularRunoutCharacteristicActual"
    , CircularRunoutCharacteristicDefinition(*this)	// "CircularRunoutCharacteristicDefinition"
    , CircularRunoutCharacteristicItem(*this)	// "CircularRunoutCharacteristicItem"
    , CircularRunoutCharacteristicNominal(*this)	// "CircularRunoutCharacteristicNominal"
    , CircularRunoutCharacteristicStats(*this)	// "CircularRunoutCharacteristicStats"
    , CircularityCharacteristicActual(*this)	// "CircularityCharacteristicActual"
    , CircularityCharacteristicDefinition(*this)	// "CircularityCharacteristicDefinition"
    , CircularityCharacteristicItem(*this)	// "CircularityCharacteristicItem"
    , CircularityCharacteristicNominal(*this)	// "CircularityCharacteristicNominal"
    , CircularityCharacteristicStats(*this)	// "CircularityCharacteristicStats"
    , Comparator(*this)	// "Comparator"
    , Component(*this)	// "Component"
    , ComponentSet(*this)	// "ComponentSet"
    , CompoundFeatureActual(*this)	// "CompoundFeatureActual"
    , CompoundFeatureDefinition(*this)	// "CompoundFeatureDefinition"
    , CompoundFeatureItem(*this)	// "CompoundFeatureItem"
    , CompoundFeatureNominal(*this)	// "CompoundFeatureNominal"
    , ConcentricityCharacteristicActual(*this)	// "ConcentricityCharacteristicActual"
    , ConcentricityCharacteristicDefinition(*this)	// "ConcentricityCharacteristicDefinition"
    , ConcentricityCharacteristicItem(*this)	// "ConcentricityCharacteristicItem"
    , ConcentricityCharacteristicNominal(*this)	// "ConcentricityCharacteristicNominal"
    , ConcentricityCharacteristicStats(*this)	// "ConcentricityCharacteristicStats"
    , Cone23(*this)	// "Cone23"
    , Cone23Core(*this)	// "Cone23Core"
    , ConeFeatureActual(*this)	// "ConeFeatureActual"
    , ConeFeatureDefinition(*this)	// "ConeFeatureDefinition"
    , ConeFeatureItem(*this)	// "ConeFeatureItem"
    , ConeFeatureNominal(*this)	// "ConeFeatureNominal"
    , ConicalSegmentFeatureActual(*this)	// "ConicalSegmentFeatureActual"
    , ConicalSegmentFeatureDefinition(*this)	// "ConicalSegmentFeatureDefinition"
    , ConicalSegmentFeatureItem(*this)	// "ConicalSegmentFeatureItem"
    , ConicalSegmentFeatureNominal(*this)	// "ConicalSegmentFeatureNominal"
    , ConstantIs(*this)	// "ConstantIs"
    , CoordinateMeasureFeatureMethod(*this)	// "CoordinateMeasureFeatureMethod"
    , CoordinateSystem(*this)	// "CoordinateSystem"
    , CoordinateSystemActualTransforms(*this)	// "CoordinateSystemActualTransforms"
    , CoordinateSystemCore(*this)	// "CoordinateSystemCore"
    , CoordinateSystemSet(*this)	// "CoordinateSystemSet"
    , CoordinateSystems(*this)	// "CoordinateSystems"
    , CuboidFeatureActual(*this)	// "CuboidFeatureActual"
    , CuboidFeatureDefinition(*this)	// "CuboidFeatureDefinition"
    , CuboidFeatureItem(*this)	// "CuboidFeatureItem"
    , CuboidFeatureNominal(*this)	// "CuboidFeatureNominal"
    , Curve12(*this)	// "Curve12"
    , Curve12Core(*this)	// "Curve12Core"
    , Curve12Set(*this)	// "Curve12Set"
    , Curve13(*this)	// "Curve13"
    , Curve13Core(*this)	// "Curve13Core"
    , Curve13Set(*this)	// "Curve13Set"
    , CurveLengthCharacteristicActual(*this)	// "CurveLengthCharacteristicActual"
    , CurveLengthCharacteristicDefinition(*this)	// "CurveLengthCharacteristicDefinition"
    , CurveLengthCharacteristicItem(*this)	// "CurveLengthCharacteristicItem"
    , CurveLengthCharacteristicNominal(*this)	// "CurveLengthCharacteristicNominal"
    , CurveLengthCharacteristicStats(*this)	// "CurveLengthCharacteristicStats"
    , CurveMeshSet(*this)	// "CurveMeshSet"
    , Cylinder23(*this)	// "Cylinder23"
    , Cylinder23Core(*this)	// "Cylinder23Core"
    , CylinderFeatureActual(*this)	// "CylinderFeatureActual"
    , CylinderFeatureDefinition(*this)	// "CylinderFeatureDefinition"
    , CylinderFeatureItem(*this)	// "CylinderFeatureItem"
    , CylinderFeatureNominal(*this)	// "CylinderFeatureNominal"
    , CylindricalSegmentFeatureActual(*this)	// "CylindricalSegmentFeatureActual"
    , CylindricalSegmentFeatureDefinition(*this)	// "CylindricalSegmentFeatureDefinition"
    , CylindricalSegmentFeatureItem(*this)	// "CylindricalSegmentFeatureItem"
    , CylindricalSegmentFeatureNominal(*this)	// "CylindricalSegmentFeatureNominal"
    , CylindricityCharacteristicActual(*this)	// "CylindricityCharacteristicActual"
    , CylindricityCharacteristicDefinition(*this)	// "CylindricityCharacteristicDefinition"
    , CylindricityCharacteristicItem(*this)	// "CylindricityCharacteristicItem"
    , CylindricityCharacteristicNominal(*this)	// "CylindricityCharacteristicNominal"
    , CylindricityCharacteristicStats(*this)	// "CylindricityCharacteristicStats"
    , DMESelectionRule(*this)	// "DMESelectionRule"
    , DatumPrecedence(*this)	// "DatumPrecedence"
    , DatumTarget(*this)	// "DatumTarget"
    , DatumTargetCircularAreaDefinition(*this)	// "DatumTargetCircularAreaDefinition"
    , DatumTargetCircularLineDefinition(*this)	// "DatumTargetCircularLineDefinition"
    , DatumTargetCylindricalAreaDefinition(*this)	// "DatumTargetCylindricalAreaDefinition"
    , DatumTargetIrregularAreaDefinition(*this)	// "DatumTargetIrregularAreaDefinition"
    , DatumTargetLineDefinition(*this)	// "DatumTargetLineDefinition"
    , DatumTargetPointDefinition(*this)	// "DatumTargetPointDefinition"
    , DatumTargetRectangularAreaDefinition(*this)	// "DatumTargetRectangularAreaDefinition"
    , DatumTargetSphereDefinition(*this)	// "DatumTargetSphereDefinition"
    , DepthCharacteristicActual(*this)	// "DepthCharacteristicActual"
    , DepthCharacteristicDefinition(*this)	// "DepthCharacteristicDefinition"
    , DepthCharacteristicItem(*this)	// "DepthCharacteristicItem"
    , DepthCharacteristicNominal(*this)	// "DepthCharacteristicNominal"
    , DepthCharacteristicStats(*this)	// "DepthCharacteristicStats"
    , DiameterCharacteristicActual(*this)	// "DiameterCharacteristicActual"
    , DiameterCharacteristicDefinition(*this)	// "DiameterCharacteristicDefinition"
    , DiameterCharacteristicItem(*this)	// "DiameterCharacteristicItem"
    , DiameterCharacteristicNominal(*this)	// "DiameterCharacteristicNominal"
    , DiameterCharacteristicStats(*this)	// "DiameterCharacteristicStats"
    , DistanceBetweenCharacteristicActual(*this)	// "DistanceBetweenCharacteristicActual"
    , DistanceBetweenCharacteristicDefinition(*this)	// "DistanceBetweenCharacteristicDefinition"
    , DistanceBetweenCharacteristicItem(*this)	// "DistanceBetweenCharacteristicItem"
    , DistanceBetweenCharacteristicNominal(*this)	// "DistanceBetweenCharacteristicNominal"
    , DistanceBetweenCharacteristicStats(*this)	// "DistanceBetweenCharacteristicStats"
    , DistanceFromCharacteristicActual(*this)	// "DistanceFromCharacteristicActual"
    , DistanceFromCharacteristicDefinition(*this)	// "DistanceFromCharacteristicDefinition"
    , DistanceFromCharacteristicItem(*this)	// "DistanceFromCharacteristicItem"
    , DistanceFromCharacteristicNominal(*this)	// "DistanceFromCharacteristicNominal"
    , DistanceFromCharacteristicStats(*this)	// "DistanceFromCharacteristicStats"
    , DividedBy(*this)	// "DividedBy"
    , DocumentFileInstruction(*this)	// "DocumentFileInstruction"
    , Edge(*this)	// "Edge"
    , EdgePointFeatureActual(*this)	// "EdgePointFeatureActual"
    , EdgePointFeatureDefinition(*this)	// "EdgePointFeatureDefinition"
    , EdgePointFeatureItem(*this)	// "EdgePointFeatureItem"
    , EdgePointFeatureNominal(*this)	// "EdgePointFeatureNominal"
    , EdgeSet(*this)	// "EdgeSet"
    , EllipseFeatureActual(*this)	// "EllipseFeatureActual"
    , EllipseFeatureDefinition(*this)	// "EllipseFeatureDefinition"
    , EllipseFeatureItem(*this)	// "EllipseFeatureItem"
    , EllipseFeatureNominal(*this)	// "EllipseFeatureNominal"
    , ElongatedCylinderFeatureActual(*this)	// "ElongatedCylinderFeatureActual"
    , ElongatedCylinderFeatureDefinition(*this)	// "ElongatedCylinderFeatureDefinition"
    , ElongatedCylinderFeatureItem(*this)	// "ElongatedCylinderFeatureItem"
    , ElongatedCylinderFeatureNominal(*this)	// "ElongatedCylinderFeatureNominal"
    , EstablishDatumMeasurand(*this)	// "EstablishDatumMeasurand"
    , EvaluateCharacteristicMeasurand(*this)	// "EvaluateCharacteristicMeasurand"
    , EvaluateSpecifiedCharacteristics(*this)	// "EvaluateSpecifiedCharacteristics"
    , Extrude23(*this)	// "Extrude23"
    , Extrude23Core(*this)	// "Extrude23Core"
    , ExtrudedCrossSectionFeatureActual(*this)	// "ExtrudedCrossSectionFeatureActual"
    , ExtrudedCrossSectionFeatureDefinition(*this)	// "ExtrudedCrossSectionFeatureDefinition"
    , ExtrudedCrossSectionFeatureItem(*this)	// "ExtrudedCrossSectionFeatureItem"
    , ExtrudedCrossSectionFeatureNominal(*this)	// "ExtrudedCrossSectionFeatureNominal"
    , FPSTest(*this)	// "FPSTest"
    , Face(*this)	// "Face"
    , FaceBase(*this)	// "FaceBase"
    , FaceMesh(*this)	// "FaceMesh"
    , FaceSet(*this)	// "FaceSet"
    , FeatureActual(*this)	// "FeatureActual"
    , FeatureArea(*this)	// "FeatureArea"
    , FeatureDefinition(*this)	// "FeatureDefinition"
    , FeatureIsDatum(*this)	// "FeatureIsDatum"
    , FeatureIsInternal(*this)	// "FeatureIsInternal"
    , FeatureItem(*this)	// "FeatureItem"
    , FeatureLength(*this)	// "FeatureLength"
    , FeatureNominal(*this)	// "FeatureNominal"
    , Features(*this)	// "Features"
    , FileUnits(*this)	// "FileUnits"
    , FirstArticleStudyPlan(*this)	// "FirstArticleStudyPlan"
    , FirstArticleStudyResults(*this)	// "FirstArticleStudyResults"
    , FlatnessCharacteristicActual(*this)	// "FlatnessCharacteristicActual"
    , FlatnessCharacteristicDefinition(*this)	// "FlatnessCharacteristicDefinition"
    , FlatnessCharacteristicItem(*this)	// "FlatnessCharacteristicItem"
    , FlatnessCharacteristicNominal(*this)	// "FlatnessCharacteristicNominal"
    , FlatnessCharacteristicStats(*this)	// "FlatnessCharacteristicStats"
    , Fonts(*this)	// "Fonts"
    , Frame(*this)	// "Frame"
    , FrameCircular(*this)	// "FrameCircular"
    , FrameFlag(*this)	// "FrameFlag"
    , FrameIrregularForm(*this)	// "FrameIrregularForm"
    , FrameRectangular(*this)	// "FrameRectangular"
    , Frames(*this)	// "Frames"
    , GageDevice(*this)	// "GageDevice"
    , GageMeasureFeatureMethod(*this)	// "GageMeasureFeatureMethod"
    , GageRandRStudyPlan(*this)	// "GageRandRStudyPlan"
    , GageRandRStudyResults(*this)	// "GageRandRStudyResults"
    , GenericFeatureActual(*this)	// "GenericFeatureActual"
    , GenericFeatureDefinition(*this)	// "GenericFeatureDefinition"
    , GenericFeatureItem(*this)	// "GenericFeatureItem"
    , GenericFeatureNominal(*this)	// "GenericFeatureNominal"
    , GeometricCharacteristicStats(*this)	// "GeometricCharacteristicStats"
    , GeometrySet(*this)	// "GeometrySet"
    , GreaterOrEqual(*this)	// "GreaterOrEqual"
    , GreaterThan(*this)	// "GreaterThan"
    , Header(*this)	// "Header"
    , HeightCharacteristicActual(*this)	// "HeightCharacteristicActual"
    , HeightCharacteristicDefinition(*this)	// "HeightCharacteristicDefinition"
    , HeightCharacteristicItem(*this)	// "HeightCharacteristicItem"
    , HeightCharacteristicNominal(*this)	// "HeightCharacteristicNominal"
    , HeightCharacteristicStats(*this)	// "HeightCharacteristicStats"
    , ISO10360Test(*this)	// "ISO10360Test"
    , IfThenArcRule(*this)	// "IfThenArcRule"
    , IfThenCircleRule(*this)	// "IfThenCircleRule"
    , IfThenConeRule(*this)	// "IfThenConeRule"
    , IfThenConicalSegmentRule(*this)	// "IfThenConicalSegmentRule"
    , IfThenCuboidRule(*this)	// "IfThenCuboidRule"
    , IfThenCurveRule(*this)	// "IfThenCurveRule"
    , IfThenCylinderRule(*this)	// "IfThenCylinderRule"
    , IfThenCylindricalSegmentRule(*this)	// "IfThenCylindricalSegmentRule"
    , IfThenEllipseRule(*this)	// "IfThenEllipseRule"
    , IfThenElongatedCylinderRule(*this)	// "IfThenElongatedCylinderRule"
    , IfThenExtrudedCrossSectionRule(*this)	// "IfThenExtrudedCrossSectionRule"
    , IfThenFeatureRule(*this)	// "IfThenFeatureRule"
    , IfThenLineRule(*this)	// "IfThenLineRule"
    , IfThenOppositeLinesRule(*this)	// "IfThenOppositeLinesRule"
    , IfThenOppositePlanesRule(*this)	// "IfThenOppositePlanesRule"
    , IfThenPlaneRule(*this)	// "IfThenPlaneRule"
    , IfThenPointDefinedCurveRule(*this)	// "IfThenPointDefinedCurveRule"
    , IfThenPointDefinedSurfaceRule(*this)	// "IfThenPointDefinedSurfaceRule"
    , IfThenPointRule(*this)	// "IfThenPointRule"
    , IfThenSphereRule(*this)	// "IfThenSphereRule"
    , IfThenSphericalSegmentRule(*this)	// "IfThenSphericalSegmentRule"
    , IfThenSurfaceOfRevolutionRule(*this)	// "IfThenSurfaceOfRevolutionRule"
    , IfThenSurfaceRule(*this)	// "IfThenSurfaceRule"
    , IfThenToroidalSegmentRule(*this)	// "IfThenToroidalSegmentRule"
    , IfThenTorusRule(*this)	// "IfThenTorusRule"
    , ImageInstruction(*this)	// "ImageInstruction"
    , Layer(*this)	// "Layer"
    , LayerSet(*this)	// "LayerSet"
    , Leader(*this)	// "Leader"
    , LeaderCircular(*this)	// "LeaderCircular"
    , LeaderDoubleHead(*this)	// "LeaderDoubleHead"
    , LeaderDoubleHeadCircular(*this)	// "LeaderDoubleHeadCircular"
    , LeaderDoubleHeadExtend(*this)	// "LeaderDoubleHeadExtend"
    , LeaderExtend(*this)	// "LeaderExtend"
    , LengthCharacteristicActual(*this)	// "LengthCharacteristicActual"
    , LengthCharacteristicDefinition(*this)	// "LengthCharacteristicDefinition"
    , LengthCharacteristicItem(*this)	// "LengthCharacteristicItem"
    , LengthCharacteristicNominal(*this)	// "LengthCharacteristicNominal"
    , LengthCharacteristicStats(*this)	// "LengthCharacteristicStats"
    , LessOrEqual(*this)	// "LessOrEqual"
    , LessThan(*this)	// "LessThan"
    , LineAuxiliary(*this)	// "LineAuxiliary"
    , LineFeatureActual(*this)	// "LineFeatureActual"
    , LineFeatureDefinition(*this)	// "LineFeatureDefinition"
    , LineFeatureItem(*this)	// "LineFeatureItem"
    , LineFeatureNominal(*this)	// "LineFeatureNominal"
    , LineProfileCharacteristicActual(*this)	// "LineProfileCharacteristicActual"
    , LineProfileCharacteristicDefinition(*this)	// "LineProfileCharacteristicDefinition"
    , LineProfileCharacteristicItem(*this)	// "LineProfileCharacteristicItem"
    , LineProfileCharacteristicNominal(*this)	// "LineProfileCharacteristicNominal"
    , LineProfileCharacteristicStats(*this)	// "LineProfileCharacteristicStats"
    , LinearCharacteristicStats(*this)	// "LinearCharacteristicStats"
    , LinearCoordinateCharacteristicActual(*this)	// "LinearCoordinateCharacteristicActual"
    , LinearCoordinateCharacteristicDefinition(*this)	// "LinearCoordinateCharacteristicDefinition"
    , LinearCoordinateCharacteristicItem(*this)	// "LinearCoordinateCharacteristicItem"
    , LinearCoordinateCharacteristicNominal(*this)	// "LinearCoordinateCharacteristicNominal"
    , LinearCoordinateCharacteristicStats(*this)	// "LinearCoordinateCharacteristicStats"
    , LinearityStudyPlan(*this)	// "LinearityStudyPlan"
    , LinearityStudyResults(*this)	// "LinearityStudyResults"
    , LocationCharacteristicStats(*this)	// "LocationCharacteristicStats"
    , Loop(*this)	// "Loop"
    , LoopBase(*this)	// "LoopBase"
    , LoopMesh(*this)	// "LoopMesh"
    , LoopSet(*this)	// "LoopSet"
    , Machine(*this)	// "Machine"
    , ManualMeasureFeatureMethod(*this)	// "ManualMeasureFeatureMethod"
    , ManufacturingProcessTraceabilities(*this)	// "ManufacturingProcessTraceabilities"
    , Measurand(*this)	// "Measurand"
    , MeasureEvaluateAll(*this)	// "MeasureEvaluateAll"
    , MeasureEvaluateSpecified(*this)	// "MeasureEvaluateSpecified"
    , MeasureSpecifiedFeatures(*this)	// "MeasureSpecifiedFeatures"
    , MeasureSpecifiedMeasurands(*this)	// "MeasureSpecifiedMeasurands"
    , MeasuredCharacteristics(*this)	// "MeasuredCharacteristics"
    , MeasuredFeatures(*this)	// "MeasuredFeatures"
    , MeasurementDevice(*this)	// "MeasurementDevice"
    , MeasurementPlan(*this)	// "MeasurementPlan"
    , MeasurementResources(*this)	// "MeasurementResources"
    , MeasurementsResults(*this)	// "MeasurementsResults"
    , MeshTriangle(*this)	// "MeshTriangle"
    , MeshTriangleCore(*this)	// "MeshTriangleCore"
    , Minus(*this)	// "Minus"
    , Negate(*this)	// "Negate"
    , NominalOffset(*this)	// "NominalOffset"
    , NominalRotation(*this)	// "NominalRotation"
    , Not2(*this)	// "Not"
    , Nurbs12(*this)	// "Nurbs12"
    , Nurbs12Core(*this)	// "Nurbs12Core"
    , Nurbs13(*this)	// "Nurbs13"
    , Nurbs13Core(*this)	// "Nurbs13Core"
    , Nurbs23(*this)	// "Nurbs23"
    , Nurbs23Core(*this)	// "Nurbs23Core"
    , Offset23(*this)	// "Offset23"
    , Offset23Core(*this)	// "Offset23Core"
    , OneOfActionGroup(*this)	// "OneOfActionGroup"
    , OneOfPlanRoot(*this)	// "OneOfPlanRoot"
    , OppositeLinesFeatureActual(*this)	// "OppositeLinesFeatureActual"
    , OppositeLinesFeatureDefinition(*this)	// "OppositeLinesFeatureDefinition"
    , OppositeLinesFeatureItem(*this)	// "OppositeLinesFeatureItem"
    , OppositeLinesFeatureNominal(*this)	// "OppositeLinesFeatureNominal"
    , OppositePlanesFeatureActual(*this)	// "OppositePlanesFeatureActual"
    , OppositePlanesFeatureDefinition(*this)	// "OppositePlanesFeatureDefinition"
    , OppositePlanesFeatureItem(*this)	// "OppositePlanesFeatureItem"
    , OppositePlanesFeatureNominal(*this)	// "OppositePlanesFeatureNominal"
    , Or2(*this)	// "Or"
    , OrderedActionGroup(*this)	// "OrderedActionGroup"
    , OrderedPlanRoot(*this)	// "OrderedPlanRoot"
    , OrientationCharacteristicStats(*this)	// "OrientationCharacteristicStats"
    , OtherMeasureFeatureMethod(*this)	// "OtherMeasureFeatureMethod"
    , PMIDisplaySet(*this)	// "PMIDisplaySet"
    , ParallelismCharacteristicActual(*this)	// "ParallelismCharacteristicActual"
    , ParallelismCharacteristicDefinition(*this)	// "ParallelismCharacteristicDefinition"
    , ParallelismCharacteristicItem(*this)	// "ParallelismCharacteristicItem"
    , ParallelismCharacteristicNominal(*this)	// "ParallelismCharacteristicNominal"
    , ParallelismCharacteristicStats(*this)	// "ParallelismCharacteristicStats"
    , Part(*this)	// "Part"
    , PartNote(*this)	// "PartNote"
    , PartNoteSet(*this)	// "PartNoteSet"
    , PartSet(*this)	// "PartSet"
    , PartiallyOrderedActionGroup(*this)	// "PartiallyOrderedActionGroup"
    , PartiallyOrderedPlanRoot(*this)	// "PartiallyOrderedPlanRoot"
    , PathTriangulation(*this)	// "PathTriangulation"
    , PathTriangulationCore(*this)	// "PathTriangulationCore"
    , PatternFeatureActual(*this)	// "PatternFeatureActual"
    , PatternFeatureDefinition(*this)	// "PatternFeatureDefinition"
    , PatternFeatureItem(*this)	// "PatternFeatureItem"
    , PatternFeatureNominal(*this)	// "PatternFeatureNominal"
    , PerpendicularityCharacteristicActual(*this)	// "PerpendicularityCharacteristicActual"
    , PerpendicularityCharacteristicDefinition(*this)	// "PerpendicularityCharacteristicDefinition"
    , PerpendicularityCharacteristicItem(*this)	// "PerpendicularityCharacteristicItem"
    , PerpendicularityCharacteristicNominal(*this)	// "PerpendicularityCharacteristicNominal"
    , PerpendicularityCharacteristicStats(*this)	// "PerpendicularityCharacteristicStats"
    , PickSomeActionGroup(*this)	// "PickSomeActionGroup"
    , PickSomePlanRoot(*this)	// "PickSomePlanRoot"
    , PlanElement(*this)	// "PlanElement"
    , PlanRoot(*this)	// "PlanRoot"
    , Plane23(*this)	// "Plane23"
    , Plane23Core(*this)	// "Plane23Core"
    , PlaneClipping(*this)	// "PlaneClipping"
    , PlaneFeatureActual(*this)	// "PlaneFeatureActual"
    , PlaneFeatureDefinition(*this)	// "PlaneFeatureDefinition"
    , PlaneFeatureItem(*this)	// "PlaneFeatureItem"
    , PlaneFeatureNominal(*this)	// "PlaneFeatureNominal"
    , PlaneReference(*this)	// "PlaneReference"
    , Plus(*this)	// "Plus"
    , Point(*this)	// "Point"
    , PointAccuracyTest(*this)	// "PointAccuracyTest"
    , PointAuxiliary(*this)	// "PointAuxiliary"
    , PointCloud(*this)	// "PointCloud"
    , PointCloudSet(*this)	// "PointCloudSet"
    , PointDefinedCurveFeatureActual(*this)	// "PointDefinedCurveFeatureActual"
    , PointDefinedCurveFeatureDefinition(*this)	// "PointDefinedCurveFeatureDefinition"
    , PointDefinedCurveFeatureItem(*this)	// "PointDefinedCurveFeatureItem"
    , PointDefinedCurveFeatureNominal(*this)	// "PointDefinedCurveFeatureNominal"
    , PointDefinedSurfaceFeatureActual(*this)	// "PointDefinedSurfaceFeatureActual"
    , PointDefinedSurfaceFeatureDefinition(*this)	// "PointDefinedSurfaceFeatureDefinition"
    , PointDefinedSurfaceFeatureItem(*this)	// "PointDefinedSurfaceFeatureItem"
    , PointDefinedSurfaceFeatureNominal(*this)	// "PointDefinedSurfaceFeatureNominal"
    , PointFeatureActual(*this)	// "PointFeatureActual"
    , PointFeatureDefinition(*this)	// "PointFeatureDefinition"
    , PointFeatureItem(*this)	// "PointFeatureItem"
    , PointFeatureNominal(*this)	// "PointFeatureNominal"
    , PointProfileCharacteristicActual(*this)	// "PointProfileCharacteristicActual"
    , PointProfileCharacteristicDefinition(*this)	// "PointProfileCharacteristicDefinition"
    , PointProfileCharacteristicItem(*this)	// "PointProfileCharacteristicItem"
    , PointProfileCharacteristicNominal(*this)	// "PointProfileCharacteristicNominal"
    , PointProfileCharacteristicStats(*this)	// "PointProfileCharacteristicStats"
    , PointSet(*this)	// "PointSet"
    , Polyline12(*this)	// "Polyline12"
    , Polyline12Core(*this)	// "Polyline12Core"
    , Polyline13(*this)	// "Polyline13"
    , Polyline13Core(*this)	// "Polyline13Core"
    , PositionCharacteristicActual(*this)	// "PositionCharacteristicActual"
    , PositionCharacteristicDefinition(*this)	// "PositionCharacteristicDefinition"
    , PositionCharacteristicItem(*this)	// "PositionCharacteristicItem"
    , PositionCharacteristicNominal(*this)	// "PositionCharacteristicNominal"
    , PositionCharacteristicStats(*this)	// "PositionCharacteristicStats"
    , PrimaryAlignment(*this)	// "PrimaryAlignment"
    , ProcessDifferenceStudyPlan(*this)	// "ProcessDifferenceStudyPlan"
    , ProcessDifferenceStudyResults(*this)	// "ProcessDifferenceStudyResults"
    , Product(*this)	// "Product"
    , ProductionStudyPlan(*this)	// "ProductionStudyPlan"
    , ProductionStudyResults(*this)	// "ProductionStudyResults"
    , ProfileGroupFeatureActual(*this)	// "ProfileGroupFeatureActual"
    , ProfileGroupFeatureDefinition(*this)	// "ProfileGroupFeatureDefinition"
    , ProfileGroupFeatureItem(*this)	// "ProfileGroupFeatureItem"
    , ProfileGroupFeatureNominal(*this)	// "ProfileGroupFeatureNominal"
    , QIFDocument2(*this)	// "QIFDocument"
    , RadiusCharacteristicActual(*this)	// "RadiusCharacteristicActual"
    , RadiusCharacteristicDefinition(*this)	// "RadiusCharacteristicDefinition"
    , RadiusCharacteristicItem(*this)	// "RadiusCharacteristicItem"
    , RadiusCharacteristicNominal(*this)	// "RadiusCharacteristicNominal"
    , RadiusCharacteristicStats(*this)	// "RadiusCharacteristicStats"
    , Revolution23(*this)	// "Revolution23"
    , Revolution23Core(*this)	// "Revolution23Core"
    , Ruled23(*this)	// "Ruled23"
    , Ruled23Core(*this)	// "Ruled23Core"
    , Rules(*this)	// "Rules"
    , RunoutGroupFeatureActual(*this)	// "RunoutGroupFeatureActual"
    , RunoutGroupFeatureDefinition(*this)	// "RunoutGroupFeatureDefinition"
    , RunoutGroupFeatureItem(*this)	// "RunoutGroupFeatureItem"
    , RunoutGroupFeatureNominal(*this)	// "RunoutGroupFeatureNominal"
    , SamplingRigorIs(*this)	// "SamplingRigorIs"
    , SavedView(*this)	// "SavedView"
    , SecondaryAlignment(*this)	// "SecondaryAlignment"
    , Segment12(*this)	// "Segment12"
    , Segment12Core(*this)	// "Segment12Core"
    , Segment13(*this)	// "Segment13"
    , Segment13Core(*this)	// "Segment13Core"
    , Sensor(*this)	// "Sensor"
    , ShapeClassIs(*this)	// "ShapeClassIs"
    , Shell(*this)	// "Shell"
    , ShellSet(*this)	// "ShellSet"
    , SimpleStudyPlan(*this)	// "SimpleStudyPlan"
    , SimpleStudyResults(*this)	// "SimpleStudyResults"
    , Sphere23(*this)	// "Sphere23"
    , Sphere23Core(*this)	// "Sphere23Core"
    , SphereFeatureActual(*this)	// "SphereFeatureActual"
    , SphereFeatureDefinition(*this)	// "SphereFeatureDefinition"
    , SphereFeatureItem(*this)	// "SphereFeatureItem"
    , SphereFeatureNominal(*this)	// "SphereFeatureNominal"
    , SphericalSegmentFeatureActual(*this)	// "SphericalSegmentFeatureActual"
    , SphericalSegmentFeatureDefinition(*this)	// "SphericalSegmentFeatureDefinition"
    , SphericalSegmentFeatureItem(*this)	// "SphericalSegmentFeatureItem"
    , SphericalSegmentFeatureNominal(*this)	// "SphericalSegmentFeatureNominal"
    , Spline12(*this)	// "Spline12"
    , Spline12Core(*this)	// "Spline12Core"
    , Spline13(*this)	// "Spline13"
    , Spline13Core(*this)	// "Spline13Core"
    , Spline23(*this)	// "Spline23"
    , Spline23Core(*this)	// "Spline23Core"
    , SquareCharacteristicActual(*this)	// "SquareCharacteristicActual"
    , SquareCharacteristicDefinition(*this)	// "SquareCharacteristicDefinition"
    , SquareCharacteristicItem(*this)	// "SquareCharacteristicItem"
    , SquareCharacteristicNominal(*this)	// "SquareCharacteristicNominal"
    , SquareCharacteristicStats(*this)	// "SquareCharacteristicStats"
    , StabilityStudyPlan(*this)	// "StabilityStudyPlan"
    , StabilityStudyResults(*this)	// "StabilityStudyResults"
    , StatisticalStudyPlan(*this)	// "StatisticalStudyPlan"
    , StatisticalStudyResults(*this)	// "StatisticalStudyResults"
    , Statistics(*this)	// "Statistics"
    , StraightnessCharacteristicActual(*this)	// "StraightnessCharacteristicActual"
    , StraightnessCharacteristicDefinition(*this)	// "StraightnessCharacteristicDefinition"
    , StraightnessCharacteristicItem(*this)	// "StraightnessCharacteristicItem"
    , StraightnessCharacteristicNominal(*this)	// "StraightnessCharacteristicNominal"
    , StraightnessCharacteristicStats(*this)	// "StraightnessCharacteristicStats"
    , Surface(*this)	// "Surface"
    , SurfaceCore(*this)	// "SurfaceCore"
    , SurfaceMeshSet(*this)	// "SurfaceMeshSet"
    , SurfaceOfRevolutionFeatureActual(*this)	// "SurfaceOfRevolutionFeatureActual"
    , SurfaceOfRevolutionFeatureDefinition(*this)	// "SurfaceOfRevolutionFeatureDefinition"
    , SurfaceOfRevolutionFeatureItem(*this)	// "SurfaceOfRevolutionFeatureItem"
    , SurfaceOfRevolutionFeatureNominal(*this)	// "SurfaceOfRevolutionFeatureNominal"
    , SurfaceProfileCharacteristicActual(*this)	// "SurfaceProfileCharacteristicActual"
    , SurfaceProfileCharacteristicDefinition(*this)	// "SurfaceProfileCharacteristicDefinition"
    , SurfaceProfileCharacteristicItem(*this)	// "SurfaceProfileCharacteristicItem"
    , SurfaceProfileCharacteristicNominal(*this)	// "SurfaceProfileCharacteristicNominal"
    , SurfaceProfileCharacteristicStats(*this)	// "SurfaceProfileCharacteristicStats"
    , SurfaceProfileNonUniformCharacteristicActual(*this)	// "SurfaceProfileNonUniformCharacteristicActual"
    , SurfaceProfileNonUniformCharacteristicDefinition(*this)	// "SurfaceProfileNonUniformCharacteristicDefinition"
    , SurfaceProfileNonUniformCharacteristicItem(*this)	// "SurfaceProfileNonUniformCharacteristicItem"
    , SurfaceProfileNonUniformCharacteristicNominal(*this)	// "SurfaceProfileNonUniformCharacteristicNominal"
    , SurfaceProfileNonUniformCharacteristicStats(*this)	// "SurfaceProfileNonUniformCharacteristicStats"
    , SurfaceSet(*this)	// "SurfaceSet"
    , SurfaceTextureCharacteristicActual(*this)	// "SurfaceTextureCharacteristicActual"
    , SurfaceTextureCharacteristicDefinition(*this)	// "SurfaceTextureCharacteristicDefinition"
    , SurfaceTextureCharacteristicItem(*this)	// "SurfaceTextureCharacteristicItem"
    , SurfaceTextureCharacteristicNominal(*this)	// "SurfaceTextureCharacteristicNominal"
    , SurfaceTextureCharacteristicStats(*this)	// "SurfaceTextureCharacteristicStats"
    , SymmetryCharacteristicActual(*this)	// "SymmetryCharacteristicActual"
    , SymmetryCharacteristicDefinition(*this)	// "SymmetryCharacteristicDefinition"
    , SymmetryCharacteristicItem(*this)	// "SymmetryCharacteristicItem"
    , SymmetryCharacteristicNominal(*this)	// "SymmetryCharacteristicNominal"
    , SymmetryCharacteristicStats(*this)	// "SymmetryCharacteristicStats"
    , Text(*this)	// "Text"
    , TextInstruction(*this)	// "TextInstruction"
    , Texts(*this)	// "Texts"
    , ThicknessCharacteristicActual(*this)	// "ThicknessCharacteristicActual"
    , ThicknessCharacteristicDefinition(*this)	// "ThicknessCharacteristicDefinition"
    , ThicknessCharacteristicItem(*this)	// "ThicknessCharacteristicItem"
    , ThicknessCharacteristicNominal(*this)	// "ThicknessCharacteristicNominal"
    , ThicknessCharacteristicStats(*this)	// "ThicknessCharacteristicStats"
    , ThreadCharacteristicActual(*this)	// "ThreadCharacteristicActual"
    , ThreadCharacteristicDefinition(*this)	// "ThreadCharacteristicDefinition"
    , ThreadCharacteristicItem(*this)	// "ThreadCharacteristicItem"
    , ThreadCharacteristicNominal(*this)	// "ThreadCharacteristicNominal"
    , ThreadCharacteristicStats(*this)	// "ThreadCharacteristicStats"
    , ThreadedFeatureActual(*this)	// "ThreadedFeatureActual"
    , ThreadedFeatureDefinition(*this)	// "ThreadedFeatureDefinition"
    , ThreadedFeatureItem(*this)	// "ThreadedFeatureItem"
    , ThreadedFeatureNominal(*this)	// "ThreadedFeatureNominal"
    , Times(*this)	// "Times"
    , TopologySet(*this)	// "TopologySet"
    , ToroidalSegmentFeatureActual(*this)	// "ToroidalSegmentFeatureActual"
    , ToroidalSegmentFeatureDefinition(*this)	// "ToroidalSegmentFeatureDefinition"
    , ToroidalSegmentFeatureItem(*this)	// "ToroidalSegmentFeatureItem"
    , ToroidalSegmentFeatureNominal(*this)	// "ToroidalSegmentFeatureNominal"
    , Torus23(*this)	// "Torus23"
    , Torus23Core(*this)	// "Torus23Core"
    , TorusFeatureActual(*this)	// "TorusFeatureActual"
    , TorusFeatureDefinition(*this)	// "TorusFeatureDefinition"
    , TorusFeatureItem(*this)	// "TorusFeatureItem"
    , TorusFeatureNominal(*this)	// "TorusFeatureNominal"
    , TotalRunoutCharacteristicActual(*this)	// "TotalRunoutCharacteristicActual"
    , TotalRunoutCharacteristicDefinition(*this)	// "TotalRunoutCharacteristicDefinition"
    , TotalRunoutCharacteristicItem(*this)	// "TotalRunoutCharacteristicItem"
    , TotalRunoutCharacteristicNominal(*this)	// "TotalRunoutCharacteristicNominal"
    , TotalRunoutCharacteristicStats(*this)	// "TotalRunoutCharacteristicStats"
    , TouchProbe(*this)	// "TouchProbe"
    , Transforms(*this)	// "Transforms"
    , UnorderedActionGroup(*this)	// "UnorderedActionGroup"
    , UnorderedPlanRoot(*this)	// "UnorderedPlanRoot"
    , UserDefinedAngularCharacteristicActual(*this)	// "UserDefinedAngularCharacteristicActual"
    , UserDefinedAngularCharacteristicDefinition(*this)	// "UserDefinedAngularCharacteristicDefinition"
    , UserDefinedAngularCharacteristicItem(*this)	// "UserDefinedAngularCharacteristicItem"
    , UserDefinedAngularCharacteristicNominal(*this)	// "UserDefinedAngularCharacteristicNominal"
    , UserDefinedAngularCharacteristicStats(*this)	// "UserDefinedAngularCharacteristicStats"
    , UserDefinedAreaCharacteristicActual(*this)	// "UserDefinedAreaCharacteristicActual"
    , UserDefinedAreaCharacteristicDefinition(*this)	// "UserDefinedAreaCharacteristicDefinition"
    , UserDefinedAreaCharacteristicItem(*this)	// "UserDefinedAreaCharacteristicItem"
    , UserDefinedAreaCharacteristicNominal(*this)	// "UserDefinedAreaCharacteristicNominal"
    , UserDefinedAreaCharacteristicStats(*this)	// "UserDefinedAreaCharacteristicStats"
    , UserDefinedAttributeCharacteristicActual(*this)	// "UserDefinedAttributeCharacteristicActual"
    , UserDefinedAttributeCharacteristicDefinition(*this)	// "UserDefinedAttributeCharacteristicDefinition"
    , UserDefinedAttributeCharacteristicItem(*this)	// "UserDefinedAttributeCharacteristicItem"
    , UserDefinedAttributeCharacteristicNominal(*this)	// "UserDefinedAttributeCharacteristicNominal"
    , UserDefinedAttributeCharacteristicStats(*this)	// "UserDefinedAttributeCharacteristicStats"
    , UserDefinedForceCharacteristicActual(*this)	// "UserDefinedForceCharacteristicActual"
    , UserDefinedForceCharacteristicDefinition(*this)	// "UserDefinedForceCharacteristicDefinition"
    , UserDefinedForceCharacteristicItem(*this)	// "UserDefinedForceCharacteristicItem"
    , UserDefinedForceCharacteristicNominal(*this)	// "UserDefinedForceCharacteristicNominal"
    , UserDefinedForceCharacteristicStats(*this)	// "UserDefinedForceCharacteristicStats"
    , UserDefinedLinearCharacteristicActual(*this)	// "UserDefinedLinearCharacteristicActual"
    , UserDefinedLinearCharacteristicDefinition(*this)	// "UserDefinedLinearCharacteristicDefinition"
    , UserDefinedLinearCharacteristicItem(*this)	// "UserDefinedLinearCharacteristicItem"
    , UserDefinedLinearCharacteristicNominal(*this)	// "UserDefinedLinearCharacteristicNominal"
    , UserDefinedLinearCharacteristicStats(*this)	// "UserDefinedLinearCharacteristicStats"
    , UserDefinedMassCharacteristicActual(*this)	// "UserDefinedMassCharacteristicActual"
    , UserDefinedMassCharacteristicDefinition(*this)	// "UserDefinedMassCharacteristicDefinition"
    , UserDefinedMassCharacteristicItem(*this)	// "UserDefinedMassCharacteristicItem"
    , UserDefinedMassCharacteristicNominal(*this)	// "UserDefinedMassCharacteristicNominal"
    , UserDefinedMassCharacteristicStats(*this)	// "UserDefinedMassCharacteristicStats"
    , UserDefinedPressureCharacteristicActual(*this)	// "UserDefinedPressureCharacteristicActual"
    , UserDefinedPressureCharacteristicDefinition(*this)	// "UserDefinedPressureCharacteristicDefinition"
    , UserDefinedPressureCharacteristicItem(*this)	// "UserDefinedPressureCharacteristicItem"
    , UserDefinedPressureCharacteristicNominal(*this)	// "UserDefinedPressureCharacteristicNominal"
    , UserDefinedPressureCharacteristicStats(*this)	// "UserDefinedPressureCharacteristicStats"
    , UserDefinedSpeedCharacteristicActual(*this)	// "UserDefinedSpeedCharacteristicActual"
    , UserDefinedSpeedCharacteristicDefinition(*this)	// "UserDefinedSpeedCharacteristicDefinition"
    , UserDefinedSpeedCharacteristicItem(*this)	// "UserDefinedSpeedCharacteristicItem"
    , UserDefinedSpeedCharacteristicNominal(*this)	// "UserDefinedSpeedCharacteristicNominal"
    , UserDefinedSpeedCharacteristicStats(*this)	// "UserDefinedSpeedCharacteristicStats"
    , UserDefinedTemperatureCharacteristicActual(*this)	// "UserDefinedTemperatureCharacteristicActual"
    , UserDefinedTemperatureCharacteristicDefinition(*this)	// "UserDefinedTemperatureCharacteristicDefinition"
    , UserDefinedTemperatureCharacteristicItem(*this)	// "UserDefinedTemperatureCharacteristicItem"
    , UserDefinedTemperatureCharacteristicNominal(*this)	// "UserDefinedTemperatureCharacteristicNominal"
    , UserDefinedTemperatureCharacteristicStats(*this)	// "UserDefinedTemperatureCharacteristicStats"
    , UserDefinedTimeCharacteristicActual(*this)	// "UserDefinedTimeCharacteristicActual"
    , UserDefinedTimeCharacteristicDefinition(*this)	// "UserDefinedTimeCharacteristicDefinition"
    , UserDefinedTimeCharacteristicItem(*this)	// "UserDefinedTimeCharacteristicItem"
    , UserDefinedTimeCharacteristicNominal(*this)	// "UserDefinedTimeCharacteristicNominal"
    , UserDefinedTimeCharacteristicStats(*this)	// "UserDefinedTimeCharacteristicStats"
    , UserDefinedUnitCharacteristicActual(*this)	// "UserDefinedUnitCharacteristicActual"
    , UserDefinedUnitCharacteristicDefinition(*this)	// "UserDefinedUnitCharacteristicDefinition"
    , UserDefinedUnitCharacteristicItem(*this)	// "UserDefinedUnitCharacteristicItem"
    , UserDefinedUnitCharacteristicNominal(*this)	// "UserDefinedUnitCharacteristicNominal"
    , UserDefinedUnitCharacteristicStats(*this)	// "UserDefinedUnitCharacteristicStats"
    , Vertex(*this)	// "Vertex"
    , VertexSet(*this)	// "VertexSet"
    , VideoInstruction(*this)	// "VideoInstruction"
    , ViewBase(*this)	// "ViewBase"
    , ViewSet(*this)	// "ViewSet"
    , VisualizationSet(*this)	// "VisualizationSet"
    , WidthCharacteristicActual(*this)	// "WidthCharacteristicActual"
    , WidthCharacteristicDefinition(*this)	// "WidthCharacteristicDefinition"
    , WidthCharacteristicItem(*this)	// "WidthCharacteristicItem"
    , WidthCharacteristicNominal(*this)	// "WidthCharacteristicNominal"
    , WidthCharacteristicStats(*this)	// "WidthCharacteristicStats"
    , WitnessLines(*this)	// "WitnessLines"
    , WorkInstruction(*this)	// "WorkInstruction"
{
}

void CQIFDocument::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFDocument"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFDocument CQIFDocument::LoadFromFile(const string_type& fileName)
{
    return CQIFDocument(XercesTreeOperations::LoadDocument(fileName));
}

CQIFDocument CQIFDocument::LoadFromString(const string_type& text)
{
    return CQIFDocument(XercesTreeOperations::LoadXml(text));
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint)
{
    SaveToFile(fileName, prettyPrint, false);
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, bool omitXmlDecl)
{
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, omitXmlDecl, _T("UTF-8"), false, false, _T("\r\n"));
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding)
{
    std::vector<unsigned char> result;
    string_type sTmpEnc(encoding);
    std::transform(sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0, _T("\r\n"));
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, bool omitXmlDecl, const string_type& encoding)
{
    throw std::exception("not implemented");
    /*SaveToFile( fileName, prettyPrint, omitXmlDecl, encoding );*/
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, bBigEndian, bBOM, _T("\r\n"));
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding, const string_type& lineend)
{
    SaveToFile(fileName, prettyPrint, false, encoding, lineend);
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, bool omitXmlDecl, const string_type& encoding, const string_type& lineend)
{
    std::vector<unsigned char> result;
    string_type sTmpEnc(encoding);
    std::transform(sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, omitXmlDecl, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0, lineend);
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM, const string_type& lineend)
{
    SaveToFile(fileName, prettyPrint, false, encoding, bBigEndian, bBOM, lineend);
}

void CQIFDocument::SaveToFile(const string_type& fileName, bool prettyPrint, bool omitXmlDecl, const string_type& encoding, bool bBigEndian, bool bBOM, const string_type& lineend)
{
    XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, omitXmlDecl, encoding, bBigEndian, bBOM, lineend);
}

string_type CQIFDocument::SaveToString(bool prettyPrint, bool omitXmlDecl)
{
    return XercesTreeOperations::SaveXml(GetDocumentNode(), prettyPrint, omitXmlDecl, _T("\r\n"));
}



string_type CQIFDocument::SaveToString(bool prettyPrint)
{
    return SaveToString(prettyPrint, false);
}

CQIFDocument CQIFDocument::CreateDocument()
{
    return XercesTreeOperations::CreateDocument();
}

void CQIFDocument::DestroyDocument()
{
    XercesTreeOperations::DocumentType doc = GetDocumentNode();
    XercesTreeOperations::FreeDocument(doc);
    m_node = 0;
}

void CQIFDocument::SetDTDLocation(const string_type& dtdLocation)
{

    xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
    xercesc::DOMDocumentType* doctype = document->getDoctype();
    if(doctype != 0)
    {
        document->removeChild(doctype);
    }

    xercesc::DOMElement* rootElement = document->getDocumentElement();
    if(rootElement == 0)
        throw altova::InvalidOperationException(_T("You have to add a root element before setting DTD location."));

    doctype = document->createDocumentType(rootElement->getNodeName(), XercesStringTemp(_T("")), XercesStringTemp(dtdLocation));
    document->insertBefore(doctype, rootElement);

}

void CQIFDocument::SetSchemaLocation(const string_type& schemaLocation)
{

    xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
    xercesc::DOMElement* rootElement = document->getDocumentElement();
    if(rootElement == 0)
        throw altova::InvalidOperationException(_T("You have to add a root element before setting schema location."));

    string_type namespaceURI = XercesUnstringTemp(rootElement->getNamespaceURI());


    if(namespaceURI.empty())
        XercesTreeOperations::SetAttribute(rootElement, _T("xsi:noNamespaceSchemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), schemaLocation);
    else
        XercesTreeOperations::SetAttribute(rootElement, _T("xsi:schemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), namespaceURI + _T(" ") + schemaLocation);

}

CQIFDocument CQIFDocument::LoadFromBinary(const std::vector<unsigned char>& data)
{
    return XercesTreeOperations::LoadFromBinary(data);
}


std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint)
{
    return XercesTreeOperations::SaveToBinary((XercesTreeOperations::DocumentType)GetNode(), prettyPrint, _T("\r\n"));
}

std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint, const string_type& encoding)
{
    std::vector<unsigned char> result;
    string_type sTmpEnc(encoding);
    std::transform(sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
    XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0, _T("\r\n"));
    return result;
}

std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
    std::vector<unsigned char> result;
    XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, bBigEndian, bBOM, _T("\r\n"));
    return result;
}

std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint, const string_type& encoding, const string_type& lineend)
{
    return SaveToBinary(prettyPrint, false, encoding, lineend);
}

std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint, bool omitXmlDecl, const string_type& encoding, const string_type& lineend)
{
    std::vector<unsigned char> result;
    string_type sTmpEnc(encoding);
    std::transform(sTmpEnc.begin(), sTmpEnc.end(), sTmpEnc.begin(), _totupper);
    XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, _tcscmp(sTmpEnc.c_str(), _T("UTF-16BE")) == 0, _tcscmp(sTmpEnc.c_str(), _T("UTF-16")) == 0, lineend, !omitXmlDecl);
    return result;
}

std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM, const string_type& lineend)
{
    return SaveToBinary(prettyPrint, false, encoding, bBigEndian, bBOM, lineend);
}

std::vector<unsigned char> CQIFDocument::SaveToBinary(bool prettyPrint, bool omitXmlDecl, const string_type& encoding, bool bBigEndian, bool bBOM, const string_type& lineend)
{
    std::vector<unsigned char> result;
    XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, bBigEndian, bBOM, lineend, !omitXmlDecl);
    return result;
}



CMaterialModifierEnumTypeType::CMaterialModifierEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMaterialModifierEnumTypeType::CMaterialModifierEnumTypeType(CMaterialModifierEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CMaterialModifierEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MaterialModifierEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointSimpleTypeType::CPointSimpleTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointSimpleTypeType::CPointSimpleTypeType(CPointSimpleTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPointSimpleTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointSimpleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUnitVectorSimpleTypeType::CUnitVectorSimpleTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CUnitVectorSimpleTypeType::CUnitVectorSimpleTypeType(CUnitVectorSimpleTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CUnitVectorSimpleTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UnitVectorSimpleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CVectorSimpleTypeType::CVectorSimpleTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CVectorSimpleTypeType::CVectorSimpleTypeType(CVectorSimpleTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CVectorSimpleTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("VectorSimpleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAddressDescriptionEnumTypeType::CAddressDescriptionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAddressDescriptionEnumTypeType::CAddressDescriptionEnumTypeType(CAddressDescriptionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CAddressDescriptionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AddressDescriptionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDimensionModifierEnumTypeType::CDimensionModifierEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDimensionModifierEnumTypeType::CDimensionModifierEnumTypeType(CDimensionModifierEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDimensionModifierEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DimensionModifierEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNonToleranceEnumTypeType::CNonToleranceEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNonToleranceEnumTypeType::CNonToleranceEnumTypeType(CNonToleranceEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CNonToleranceEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NonToleranceEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQPIdTypeType::CQPIdTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQPIdTypeType::CQPIdTypeType(CQPIdTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CQPIdTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QPIdType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngleBetweenAnalysisModeEnumTypeType::CAngleBetweenAnalysisModeEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAngleBetweenAnalysisModeEnumTypeType::CAngleBetweenAnalysisModeEnumTypeType(CAngleBetweenAnalysisModeEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CAngleBetweenAnalysisModeEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngleBetweenAnalysisModeEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListDoubleTypeType::CListDoubleTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListDoubleTypeType::CListDoubleTypeType(CListDoubleTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListDoubleTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListDoubleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPoint2dSimpleTypeType::CPoint2dSimpleTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPoint2dSimpleTypeType::CPoint2dSimpleTypeType(CPoint2dSimpleTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPoint2dSimpleTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("Point2dSimpleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAngularCoordinateDirectionEnumTypeType::CAngularCoordinateDirectionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAngularCoordinateDirectionEnumTypeType::CAngularCoordinateDirectionEnumTypeType(CAngularCoordinateDirectionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CAngularCoordinateDirectionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AngularCoordinateDirectionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

COneSidedCapabilityCalculationEnumTypeType::COneSidedCapabilityCalculationEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COneSidedCapabilityCalculationEnumTypeType::COneSidedCapabilityCalculationEnumTypeType(COneSidedCapabilityCalculationEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void COneSidedCapabilityCalculationEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OneSidedCapabilityCalculationEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CUnitVector2dSimpleTypeType::CUnitVector2dSimpleTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CUnitVector2dSimpleTypeType::CUnitVector2dSimpleTypeType(CUnitVector2dSimpleTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CUnitVector2dSimpleTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("UnitVector2dSimpleType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInternalExternalEnumTypeType::CInternalExternalEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInternalExternalEnumTypeType::CInternalExternalEnumTypeType(CInternalExternalEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CInternalExternalEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InternalExternalEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

COpenCurvePointSamplingStrategyEnumTypeType::COpenCurvePointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COpenCurvePointSamplingStrategyEnumTypeType::COpenCurvePointSamplingStrategyEnumTypeType(COpenCurvePointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void COpenCurvePointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OpenCurvePointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicTypeEnumTypeType::CCharacteristicTypeEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCharacteristicTypeEnumTypeType::CCharacteristicTypeEnumTypeType(CCharacteristicTypeEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCharacteristicTypeEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicTypeEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListBoolTypeType::CListBoolTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListBoolTypeType::CListBoolTypeType(CListBoolTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListBoolTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListBoolType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListIntTypeType::CListIntTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListIntTypeType::CListIntTypeType(CListIntTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListIntTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListIntType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListNaturalTypeType::CListNaturalTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListNaturalTypeType::CListNaturalTypeType(CListNaturalTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListNaturalTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListNaturalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListUnsignedByteTypeType::CListUnsignedByteTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListUnsignedByteTypeType::CListUnsignedByteTypeType(CListUnsignedByteTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListUnsignedByteTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListUnsignedByteType"), _T("http://qifstandards.org/xsd/qif2"));
}

CAssignableCauseEnumTypeType::CAssignableCauseEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CAssignableCauseEnumTypeType::CAssignableCauseEnumTypeType(CAssignableCauseEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CAssignableCauseEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("AssignableCauseEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CReferencedComponentEnumTypeType::CReferencedComponentEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CReferencedComponentEnumTypeType::CReferencedComponentEnumTypeType(CReferencedComponentEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CReferencedComponentEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ReferencedComponentEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListAccumulatedStatsValuesTypeType::CListAccumulatedStatsValuesTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListAccumulatedStatsValuesTypeType::CListAccumulatedStatsValuesTypeType(CListAccumulatedStatsValuesTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListAccumulatedStatsValuesTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListAccumulatedStatsValuesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListSubgroupStatsValuesTypeType::CListSubgroupStatsValuesTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListSubgroupStatsValuesTypeType::CListSubgroupStatsValuesTypeType(CListSubgroupStatsValuesTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListSubgroupStatsValuesTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListSubgroupStatsValuesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQPIdReferenceTypeType::CQPIdReferenceTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQPIdReferenceTypeType::CQPIdReferenceTypeType(CQPIdReferenceTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CQPIdReferenceTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QPIdReferenceType"), _T("http://qifstandards.org/xsd/qif2"));
}

CBottomEnumTypeType::CBottomEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CBottomEnumTypeType::CBottomEnumTypeType(CBottomEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CBottomEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("BottomEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMDirectionEnumTypeType::CCMMDirectionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCMMDirectionEnumTypeType::CCMMDirectionEnumTypeType(CCMMDirectionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCMMDirectionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMDirectionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCMMGeometryEnumTypeType::CCMMGeometryEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCMMGeometryEnumTypeType::CCMMGeometryEnumTypeType(CCMMGeometryEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCMMGeometryEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CMMGeometryEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCharacteristicStatusEnumTypeType::CCharacteristicStatusEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCharacteristicStatusEnumTypeType::CCharacteristicStatusEnumTypeType(CCharacteristicStatusEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCharacteristicStatusEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CharacteristicStatusEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CClosedCurvePointSamplingStrategyEnumTypeType::CClosedCurvePointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CClosedCurvePointSamplingStrategyEnumTypeType::CClosedCurvePointSamplingStrategyEnumTypeType(CClosedCurvePointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CClosedCurvePointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ClosedCurvePointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCompoundFeatureGeometryEnumTypeType::CCompoundFeatureGeometryEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCompoundFeatureGeometryEnumTypeType::CCompoundFeatureGeometryEnumTypeType(CCompoundFeatureGeometryEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCompoundFeatureGeometryEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CompoundFeatureGeometryEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CConePointSamplingStrategyEnumTypeType::CConePointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CConePointSamplingStrategyEnumTypeType::CConePointSamplingStrategyEnumTypeType(CConePointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CConePointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ConePointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CControlIssueEnumTypeType::CControlIssueEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CControlIssueEnumTypeType::CControlIssueEnumTypeType(CControlIssueEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CControlIssueEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ControlIssueEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CActionToTakeEnumTypeType::CActionToTakeEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CActionToTakeEnumTypeType::CActionToTakeEnumTypeType(CActionToTakeEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CActionToTakeEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ActionToTakeEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrismPointSamplingStrategyEnumTypeType::CPrismPointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPrismPointSamplingStrategyEnumTypeType::CPrismPointSamplingStrategyEnumTypeType(CPrismPointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPrismPointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PrismPointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCurveSubstituteFeatureAlgorithmEnumTypeType::CCurveSubstituteFeatureAlgorithmEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCurveSubstituteFeatureAlgorithmEnumTypeType::CCurveSubstituteFeatureAlgorithmEnumTypeType(CCurveSubstituteFeatureAlgorithmEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCurveSubstituteFeatureAlgorithmEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CurveSubstituteFeatureAlgorithmEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType(CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceOfRevolutionPointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDiameterModifierEnumTypeType::CDiameterModifierEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDiameterModifierEnumTypeType::CDiameterModifierEnumTypeType(CDiameterModifierEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDiameterModifierEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DiameterModifierEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSectionModifierEnumTypeType::CSectionModifierEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSectionModifierEnumTypeType::CSectionModifierEnumTypeType(CSectionModifierEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSectionModifierEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SectionModifierEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CReducedDatumEnumTypeType::CReducedDatumEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CReducedDatumEnumTypeType::CReducedDatumEnumTypeType(CReducedDatumEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CReducedDatumEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ReducedDatumEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDegreeOfFreedomEnumTypeType::CDegreeOfFreedomEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDegreeOfFreedomEnumTypeType::CDegreeOfFreedomEnumTypeType(CDegreeOfFreedomEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDegreeOfFreedomEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DegreeOfFreedomEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CISODegreeOfFreedomEnumTypeType::CISODegreeOfFreedomEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CISODegreeOfFreedomEnumTypeType::CISODegreeOfFreedomEnumTypeType(CISODegreeOfFreedomEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CISODegreeOfFreedomEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ISODegreeOfFreedomEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDigitalModelFormatEnumTypeType::CDigitalModelFormatEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDigitalModelFormatEnumTypeType::CDigitalModelFormatEnumTypeType(CDigitalModelFormatEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDigitalModelFormatEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DigitalModelFormatEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGDTEnumTypeType::CGDTEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CGDTEnumTypeType::CGDTEnumTypeType(CGDTEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CGDTEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GDTEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTopologyEnumTypeType::CTopologyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CTopologyEnumTypeType::CTopologyEnumTypeType(CTopologyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CTopologyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TopologyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistanceBetweenAnalysisModeEnumTypeType::CDistanceBetweenAnalysisModeEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDistanceBetweenAnalysisModeEnumTypeType::CDistanceBetweenAnalysisModeEnumTypeType(CDistanceBetweenAnalysisModeEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDistanceBetweenAnalysisModeEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistanceBetweenAnalysisModeEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDistributionTransformationEnumTypeType::CDistributionTransformationEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDistributionTransformationEnumTypeType::CDistributionTransformationEnumTypeType(CDistributionTransformationEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDistributionTransformationEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DistributionTransformationEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CRetrievalMethodEnumTypeType::CRetrievalMethodEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CRetrievalMethodEnumTypeType::CRetrievalMethodEnumTypeType(CRetrievalMethodEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CRetrievalMethodEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("RetrievalMethodEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CElongatedCylinderPointSamplingStrategyEnumTypeType::CElongatedCylinderPointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CElongatedCylinderPointSamplingStrategyEnumTypeType::CElongatedCylinderPointSamplingStrategyEnumTypeType(CElongatedCylinderPointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CElongatedCylinderPointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ElongatedCylinderPointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExclusionEnumTypeType::CExclusionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CExclusionEnumTypeType::CExclusionEnumTypeType(CExclusionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CExclusionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExclusionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtentEnumTypeType::CExtentEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CExtentEnumTypeType::CExtentEnumTypeType(CExtentEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CExtentEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtentEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::CExtrudedCrossSectionPointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::CExtrudedCrossSectionPointSamplingStrategyEnumTypeType(CExtrudedCrossSectionPointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ExtrudedCrossSectionPointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType(CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FeatureOfSizeSubstituteFeatureAlgorithmEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCommonFileSpecEnumTypeType::CCommonFileSpecEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCommonFileSpecEnumTypeType::CCommonFileSpecEnumTypeType(CCommonFileSpecEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCommonFileSpecEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CommonFileSpecEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNaturalTypeType::CNaturalTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNaturalTypeType::CNaturalTypeType(CNaturalTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CNaturalTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NaturalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CFormalStandardEnumTypeType::CFormalStandardEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CFormalStandardEnumTypeType::CFormalStandardEnumTypeType(CFormalStandardEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CFormalStandardEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("FormalStandardEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CGageRandRStudyEnumTypeType::CGageRandRStudyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CGageRandRStudyEnumTypeType::CGageRandRStudyEnumTypeType(CGageRandRStudyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CGageRandRStudyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("GageRandRStudyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionStatusEnumTypeType::CInspectionStatusEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInspectionStatusEnumTypeType::CInspectionStatusEnumTypeType(CInspectionStatusEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CInspectionStatusEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionStatusEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionScopeEnumTypeType::CInspectionScopeEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInspectionScopeEnumTypeType::CInspectionScopeEnumTypeType(CInspectionScopeEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CInspectionScopeEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionScopeEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CInspectionModeEnumTypeType::CInspectionModeEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CInspectionModeEnumTypeType::CInspectionModeEnumTypeType(CInspectionModeEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CInspectionModeEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("InspectionModeEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CIntersectionPlaneEnumTypeType::CIntersectionPlaneEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CIntersectionPlaneEnumTypeType::CIntersectionPlaneEnumTypeType(CIntersectionPlaneEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CIntersectionPlaneEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("IntersectionPlaneEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLeaderHeadFormEnumTypeType::CLeaderHeadFormEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CLeaderHeadFormEnumTypeType::CLeaderHeadFormEnumTypeType(CLeaderHeadFormEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CLeaderHeadFormEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LeaderHeadFormEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CLinearCoordinateDirectionEnumTypeType::CLinearCoordinateDirectionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CLinearCoordinateDirectionEnumTypeType::CLinearCoordinateDirectionEnumTypeType(CLinearCoordinateDirectionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CLinearCoordinateDirectionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("LinearCoordinateDirectionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CManufacturingMethodEnumTypeType::CManufacturingMethodEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CManufacturingMethodEnumTypeType::CManufacturingMethodEnumTypeType(CManufacturingMethodEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CManufacturingMethodEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ManufacturingMethodEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListDouble9TypeType::CListDouble9TypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListDouble9TypeType::CListDouble9TypeType(CListDouble9TypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListDouble9TypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListDouble9Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasureActionGroupFunctionEnumTypeType::CMeasureActionGroupFunctionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMeasureActionGroupFunctionEnumTypeType::CMeasureActionGroupFunctionEnumTypeType(CMeasureActionGroupFunctionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CMeasureActionGroupFunctionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasureActionGroupFunctionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CMeasurementDirectiveEnumTypeType::CMeasurementDirectiveEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CMeasurementDirectiveEnumTypeType::CMeasurementDirectiveEnumTypeType(CMeasurementDirectiveEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CMeasurementDirectiveEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("MeasurementDirectiveEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType(CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NonFeatureOfSizeSubstituteFeatureAlgorithmEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPlanePointSamplingStrategyEnumTypeType::CPlanePointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPlanePointSamplingStrategyEnumTypeType::CPlanePointSamplingStrategyEnumTypeType(CPlanePointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPlanePointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PlanePointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

COrientationPlaneEnumTypeType::COrientationPlaneEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

COrientationPlaneEnumTypeType::COrientationPlaneEnumTypeType(COrientationPlaneEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void COrientationPlaneEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("OrientationPlaneEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CColorTypeType::CColorTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CColorTypeType::CColorTypeType(CColorTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CColorTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ColorType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointDefinedPointSamplingStrategyEnumTypeType::CPointDefinedPointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointDefinedPointSamplingStrategyEnumTypeType::CPointDefinedPointSamplingStrategyEnumTypeType(CPointDefinedPointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPointDefinedPointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointDefinedPointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPointPointSamplingStrategyEnumTypeType::CPointPointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPointPointSamplingStrategyEnumTypeType::CPointPointSamplingStrategyEnumTypeType(CPointPointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPointPointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PointPointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositionCapabilityCalculationEnumTypeType::CPositionCapabilityCalculationEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPositionCapabilityCalculationEnumTypeType::CPositionCapabilityCalculationEnumTypeType(CPositionCapabilityCalculationEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPositionCapabilityCalculationEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositionCapabilityCalculationEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CDimensionCountEnumTypeType::CDimensionCountEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CDimensionCountEnumTypeType::CDimensionCountEnumTypeType(CDimensionCountEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CDimensionCountEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("DimensionCountEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPrecedenceEnumTypeType::CPrecedenceEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPrecedenceEnumTypeType::CPrecedenceEnumTypeType(CPrecedenceEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPrecedenceEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PrecedenceEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CQIFIdTypeType::CQIFIdTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQIFIdTypeType::CQIFIdTypeType(CQIFIdTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CQIFIdTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("QIFIdType"), _T("http://qifstandards.org/xsd/qif2"));
}

CD4TypeType::CD4TypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CD4TypeType::CD4TypeType(CD4TypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CD4TypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("D4Type"), _T("http://qifstandards.org/xsd/qif2"));
}

CSamplingIntervalEnumTypeType::CSamplingIntervalEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSamplingIntervalEnumTypeType::CSamplingIntervalEnumTypeType(CSamplingIntervalEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSamplingIntervalEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SamplingIntervalEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSecurityClassificationEnumTypeType::CSecurityClassificationEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSecurityClassificationEnumTypeType::CSecurityClassificationEnumTypeType(CSecurityClassificationEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSecurityClassificationEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SecurityClassificationEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CShapeClassEnumTypeType::CShapeClassEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CShapeClassEnumTypeType::CShapeClassEnumTypeType(CShapeClassEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CShapeClassEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ShapeClassEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSlotEndEnumTypeType::CSlotEndEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSlotEndEnumTypeType::CSlotEndEnumTypeType(CSlotEndEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSlotEndEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SlotEndEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSpherePointSamplingStrategyEnumTypeType::CSpherePointSamplingStrategyEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSpherePointSamplingStrategyEnumTypeType::CSpherePointSamplingStrategyEnumTypeType(CSpherePointSamplingStrategyEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSpherePointSamplingStrategyEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SpherePointSamplingStrategyEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsEvalStatusEnumTypeType::CStatsEvalStatusEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CStatsEvalStatusEnumTypeType::CStatsEvalStatusEnumTypeType(CStatsEvalStatusEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CStatsEvalStatusEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsEvalStatusEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CStatsValuesEnumTypeType::CStatsValuesEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CStatsValuesEnumTypeType::CStatsValuesEnumTypeType(CStatsValuesEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CStatsValuesEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("StatsValuesEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSummaryStatsValuesEnumTypeType::CSummaryStatsValuesEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSummaryStatsValuesEnumTypeType::CSummaryStatsValuesEnumTypeType(CSummaryStatsValuesEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSummaryStatsValuesEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SummaryStatsValuesEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CListSummaryStatsValuesTypeType::CListSummaryStatsValuesTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CListSummaryStatsValuesTypeType::CListSummaryStatsValuesTypeType(CListSummaryStatsValuesTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CListSummaryStatsValuesTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ListSummaryStatsValuesType"), _T("http://qifstandards.org/xsd/qif2"));
}

CSurfaceSubstituteFeatureAlgorithmEnumTypeType::CSurfaceSubstituteFeatureAlgorithmEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CSurfaceSubstituteFeatureAlgorithmEnumTypeType::CSurfaceSubstituteFeatureAlgorithmEnumTypeType(CSurfaceSubstituteFeatureAlgorithmEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CSurfaceSubstituteFeatureAlgorithmEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("SurfaceSubstituteFeatureAlgorithmEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CPositiveDecimalTypeType::CPositiveDecimalTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CPositiveDecimalTypeType::CPositiveDecimalTypeType(CPositiveDecimalTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CPositiveDecimalTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("PositiveDecimalType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadClassEnumTypeType::CThreadClassEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CThreadClassEnumTypeType::CThreadClassEnumTypeType(CThreadClassEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CThreadClassEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadClassEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CThreadSeriesEnumTypeType::CThreadSeriesEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CThreadSeriesEnumTypeType::CThreadSeriesEnumTypeType(CThreadSeriesEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CThreadSeriesEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("ThreadSeriesEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CTimeDescriptionEnumTypeType::CTimeDescriptionEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CTimeDescriptionEnumTypeType::CTimeDescriptionEnumTypeType(CTimeDescriptionEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CTimeDescriptionEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("TimeDescriptionEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

CCoordinateEnumTypeType::CCoordinateEnumTypeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CCoordinateEnumTypeType::CCoordinateEnumTypeType(CCoordinateEnumTypeType const& other)
    : TypeBase(other.GetNode())
{
}

void CCoordinateEnumTypeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("CoordinateEnumType"), _T("http://qifstandards.org/xsd/qif2"));
}

} // namespace t


namespace xs
{

CENTITIES::CENTITIES(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CENTITIES::CENTITIES(CENTITIES const& other)
    : TypeBase(other.GetNode())
{
}


CENTITY::CENTITY(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CENTITY::CENTITY(CENTITY const& other)
    : TypeBase(other.GetNode())
{
}


CID::CID(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CID::CID(CID const& other)
    : TypeBase(other.GetNode())
{
}


CIDREF::CIDREF(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CIDREF::CIDREF(CIDREF const& other)
    : TypeBase(other.GetNode())
{
}


CIDREFS::CIDREFS(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CIDREFS::CIDREFS(CIDREFS const& other)
    : TypeBase(other.GetNode())
{
}


CNCName::CNCName(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNCName::CNCName(CNCName const& other)
    : TypeBase(other.GetNode())
{
}


CNMTOKEN::CNMTOKEN(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNMTOKEN::CNMTOKEN(CNMTOKEN const& other)
    : TypeBase(other.GetNode())
{
}


CNMTOKENS::CNMTOKENS(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNMTOKENS::CNMTOKENS(CNMTOKENS const& other)
    : TypeBase(other.GetNode())
{
}


CNOTATION::CNOTATION(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNOTATION::CNOTATION(CNOTATION const& other)
    : TypeBase(other.GetNode())
{
}


CName::CName(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CName::CName(CName const& other)
    : TypeBase(other.GetNode())
{
}


CQName::CQName(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CQName::CQName(CQName const& other)
    : TypeBase(other.GetNode())
{
}


CanySimpleType::CanySimpleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CanySimpleType::CanySimpleType(CanySimpleType const& other)
    : TypeBase(other.GetNode())
{
}


CanyType::CanyType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CanyType::CanyType(CanyType const& other)
    : TypeBase(other.GetNode())
{
}

void CanyType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("anyType"), _T("http://www.w3.org/2001/XMLSchema"));
}

CanyURI::CanyURI(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CanyURI::CanyURI(CanyURI const& other)
    : TypeBase(other.GetNode())
{
}


Cbase64Binary::Cbase64Binary(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cbase64Binary::Cbase64Binary(Cbase64Binary const& other)
    : TypeBase(other.GetNode())
{
}


Cboolean::Cboolean(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cboolean::Cboolean(Cboolean const& other)
    : TypeBase(other.GetNode())
{
}


Cbyte::Cbyte(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cbyte::Cbyte(Cbyte const& other)
    : TypeBase(other.GetNode())
{
}


Cdate::Cdate(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cdate::Cdate(Cdate const& other)
    : TypeBase(other.GetNode())
{
}


CdateTime::CdateTime(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CdateTime::CdateTime(CdateTime const& other)
    : TypeBase(other.GetNode())
{
}


Cdecimal::Cdecimal(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cdecimal::Cdecimal(Cdecimal const& other)
    : TypeBase(other.GetNode())
{
}


Cdouble::Cdouble(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cdouble::Cdouble(Cdouble const& other)
    : TypeBase(other.GetNode())
{
}


Cduration::Cduration(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cduration::Cduration(Cduration const& other)
    : TypeBase(other.GetNode())
{
}


Cfloat::Cfloat(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cfloat::Cfloat(Cfloat const& other)
    : TypeBase(other.GetNode())
{
}


CgDay::CgDay(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CgDay::CgDay(CgDay const& other)
    : TypeBase(other.GetNode())
{
}


CgMonth::CgMonth(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CgMonth::CgMonth(CgMonth const& other)
    : TypeBase(other.GetNode())
{
}


CgMonthDay::CgMonthDay(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CgMonthDay::CgMonthDay(CgMonthDay const& other)
    : TypeBase(other.GetNode())
{
}


CgYear::CgYear(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CgYear::CgYear(CgYear const& other)
    : TypeBase(other.GetNode())
{
}


CgYearMonth::CgYearMonth(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CgYearMonth::CgYearMonth(CgYearMonth const& other)
    : TypeBase(other.GetNode())
{
}


ChexBinary::ChexBinary(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

ChexBinary::ChexBinary(ChexBinary const& other)
    : TypeBase(other.GetNode())
{
}


Cint::Cint(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cint::Cint(Cint const& other)
    : TypeBase(other.GetNode())
{
}


Cinteger::Cinteger(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cinteger::Cinteger(Cinteger const& other)
    : TypeBase(other.GetNode())
{
}


Clanguage::Clanguage(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Clanguage::Clanguage(Clanguage const& other)
    : TypeBase(other.GetNode())
{
}


Clong::Clong(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Clong::Clong(Clong const& other)
    : TypeBase(other.GetNode())
{
}


CnegativeInteger::CnegativeInteger(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CnegativeInteger::CnegativeInteger(CnegativeInteger const& other)
    : TypeBase(other.GetNode())
{
}


CnonNegativeInteger::CnonNegativeInteger(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CnonNegativeInteger::CnonNegativeInteger(CnonNegativeInteger const& other)
    : TypeBase(other.GetNode())
{
}


CnonPositiveInteger::CnonPositiveInteger(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CnonPositiveInteger::CnonPositiveInteger(CnonPositiveInteger const& other)
    : TypeBase(other.GetNode())
{
}


CnormalizedString::CnormalizedString(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CnormalizedString::CnormalizedString(CnormalizedString const& other)
    : TypeBase(other.GetNode())
{
}


CpositiveInteger::CpositiveInteger(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CpositiveInteger::CpositiveInteger(CpositiveInteger const& other)
    : TypeBase(other.GetNode())
{
}


Cshort::Cshort(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cshort::Cshort(Cshort const& other)
    : TypeBase(other.GetNode())
{
}


Cstring::Cstring(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cstring::Cstring(Cstring const& other)
    : TypeBase(other.GetNode())
{
}


Ctime::Ctime(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Ctime::Ctime(Ctime const& other)
    : TypeBase(other.GetNode())
{
}


Ctoken::Ctoken(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Ctoken::Ctoken(Ctoken const& other)
    : TypeBase(other.GetNode())
{
}


CunsignedByte::CunsignedByte(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CunsignedByte::CunsignedByte(CunsignedByte const& other)
    : TypeBase(other.GetNode())
{
}


CunsignedInt::CunsignedInt(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CunsignedInt::CunsignedInt(CunsignedInt const& other)
    : TypeBase(other.GetNode())
{
}


CunsignedLong::CunsignedLong(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CunsignedLong::CunsignedLong(CunsignedLong const& other)
    : TypeBase(other.GetNode())
{
}


CunsignedShort::CunsignedShort(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CunsignedShort::CunsignedShort(CunsignedShort const& other)
    : TypeBase(other.GetNode())
{
}


CdecimalType::CdecimalType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CdecimalType::CdecimalType(CdecimalType const& other)
    : TypeBase(other.GetNode())
{
}

void CdecimalType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("decimal"), _T("http://www.w3.org/2001/XMLSchema"));
}

CstringType::CstringType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CstringType::CstringType(CstringType const& other)
    : TypeBase(other.GetNode())
{
}

void CstringType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("string"), _T("http://www.w3.org/2001/XMLSchema"));
}

CbooleanType::CbooleanType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CbooleanType::CbooleanType(CbooleanType const& other)
    : TypeBase(other.GetNode())
{
}

void CbooleanType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("boolean"), _T("http://www.w3.org/2001/XMLSchema"));
}

CpositiveIntegerType::CpositiveIntegerType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CpositiveIntegerType::CpositiveIntegerType(CpositiveIntegerType const& other)
    : TypeBase(other.GetNode())
{
}

void CpositiveIntegerType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("positiveInteger"), _T("http://www.w3.org/2001/XMLSchema"));
}

CdateTimeType::CdateTimeType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CdateTimeType::CdateTimeType(CdateTimeType const& other)
    : TypeBase(other.GetNode())
{
}

void CdateTimeType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("dateTime"), _T("http://www.w3.org/2001/XMLSchema"));
}

CtokenType::CtokenType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CtokenType::CtokenType(CtokenType const& other)
    : TypeBase(other.GetNode())
{
}

void CtokenType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("token"), _T("http://www.w3.org/2001/XMLSchema"));
}

CdoubleType::CdoubleType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CdoubleType::CdoubleType(CdoubleType const& other)
    : TypeBase(other.GetNode())
{
}

void CdoubleType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("double"), _T("http://www.w3.org/2001/XMLSchema"));
}

Cbase64BinaryType::Cbase64BinaryType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

Cbase64BinaryType::Cbase64BinaryType(Cbase64BinaryType const& other)
    : TypeBase(other.GetNode())
{
}

void Cbase64BinaryType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("base64Binary"), _T("http://www.w3.org/2001/XMLSchema"));
}

CunsignedIntType::CunsignedIntType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CunsignedIntType::CunsignedIntType(CunsignedIntType const& other)
    : TypeBase(other.GetNode())
{
}

void CunsignedIntType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("unsignedInt"), _T("http://www.w3.org/2001/XMLSchema"));
}

CNMTOKENType::CNMTOKENType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CNMTOKENType::CNMTOKENType(CNMTOKENType const& other)
    : TypeBase(other.GetNode())
{
}

void CNMTOKENType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("NMTOKEN"), _T("http://www.w3.org/2001/XMLSchema"));
}

CanyURIType::CanyURIType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CanyURIType::CanyURIType(CanyURIType const& other)
    : TypeBase(other.GetNode())
{
}

void CanyURIType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("anyURI"), _T("http://www.w3.org/2001/XMLSchema"));
}

CnonNegativeIntegerType::CnonNegativeIntegerType(xercesc::DOMNode* const& node)
    : TypeBase(node)
{
}

CnonNegativeIntegerType::CnonNegativeIntegerType(CnonNegativeIntegerType const& other)
    : TypeBase(other.GetNode())
{
}

void CnonNegativeIntegerType::SetXsiType()
{
    XercesTreeOperations::SetAttribute(m_node, _T("xsi:type"), _T("http://www.w3.org/2001/XMLSchema-instance"),
                                       _T("nonNegativeInteger"), _T("http://www.w3.org/2001/XMLSchema"));
}

} // namespace xs


namespace t
{

void CActualAngularValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualAreaValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualDecimalType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CActualForceValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualLinearValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualMassValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualPointType::operator=(const string_type& value)
{
    CPointType::operator=(value);
}

void CActualPressureValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualSpeedValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualTemperatureValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualTimeValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualUnitVectorType::operator=(const string_type& value)
{
    CUnitVectorType::operator=(value);
}

void CActualUserDefinedUnitValueType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CActualVectorType::operator=(const string_type& value)
{
    CVectorType::operator=(value);
}

void CAngleRangeType::operator=(const string_type& value)
{
    CPoint2dSimpleTypeType::operator=(value);
}

void CAngularValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CAreaValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CArrayBinaryType::operator=(const std::vector<unsigned char>& value)
{
    Cbase64BinaryType::operator=(value);
}

void CArrayBoolType::operator=(const string_type& value)
{
    CListBoolTypeType::operator=(value);
}

void CArrayDoubleType::operator=(const string_type& value)
{
    CListDoubleTypeType::operator=(value);
}

void CArrayI2Type::operator=(const string_type& value)
{
    CListIntTypeType::operator=(value);
}

void CArrayI3Type::operator=(const string_type& value)
{
    CListIntTypeType::operator=(value);
}

void CArrayIntType::operator=(const string_type& value)
{
    CListIntTypeType::operator=(value);
}

void CArrayNaturalType::operator=(const string_type& value)
{
    CListNaturalTypeType::operator=(value);
}

void CArrayPoint2dType::operator=(const string_type& value)
{
    CListDoubleTypeType::operator=(value);
}

void CArrayPointType::operator=(const string_type& value)
{
    CListDoubleTypeType::operator=(value);
}

void CArrayUnitVectorType::operator=(const string_type& value)
{
    CListDoubleTypeType::operator=(value);
}

void CArrayUnsignedByteType::operator=(const string_type& value)
{
    CListUnsignedByteTypeType::operator=(value);
}

void CBalloonType::operator=(const unsigned& value)
{
    CunsignedIntType::operator=(value);
}

void CBinaryDataType::operator=(const std::vector<unsigned char>& value)
{
    Cbase64BinaryType::operator=(value);
}

void CForceValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CLinearValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CMassValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CMatrix33Type::operator=(const string_type& value)
{
    CListDouble9TypeType::operator=(value);
}

void CPointType::operator=(const string_type& value)
{
    CPointSimpleTypeType::operator=(value);
}

void CPolyLineType::operator=(const string_type& value)
{
    CArrayPointType::operator=(value);
}

void CPressureValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CQIFReferenceFullType::operator=(const unsigned& value)
{
    CQIFReferenceType::operator=(value);
}

void CQIFReferenceType::operator=(const unsigned& value)
{
    CQIFIdTypeType::operator=(value);
}

void CSpecifiedDecimalType::operator=(const double& value)
{
    CdecimalType::operator=(value);
}

void CSpeedValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CSubgroupDecimalType::operator=(const double& value)
{
    CActualDecimalType::operator=(value);
}

void CSubgroupIntegerType::operator=(const unsigned __int64& value)
{
    CpositiveIntegerType::operator=(value);
}

void CTemperatureValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CTimeValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CUnitVectorType::operator=(const string_type& value)
{
    CUnitVectorSimpleTypeType::operator=(value);
}

void CUserDefinedUnitValueType::operator=(const double& value)
{
    CSpecifiedDecimalType::operator=(value);
}

void CVectorType::operator=(const string_type& value)
{
    CVectorSimpleTypeType::operator=(value);
}

int CMaterialModifierEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CMaterialModifierEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CMaterialModifierEnumType].Facets + 1, 4);
}

void CMaterialModifierEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CMaterialModifierEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CMaterialModifierEnumType].Facets + 1, 4));
}

void CMaterialModifierEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CMaterialModifierEnumTypeType_altova_unnamed, value);
}

CMaterialModifierEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CMaterialModifierEnumTypeType_altova_unnamed);
}

void CPointSimpleTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPointSimpleTypeType_altova_unnamed, value);
}

CPointSimpleTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPointSimpleTypeType_altova_unnamed);
}

void CUnitVectorSimpleTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CUnitVectorSimpleTypeType_altova_unnamed, value);
}

CUnitVectorSimpleTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CUnitVectorSimpleTypeType_altova_unnamed);
}

void CVectorSimpleTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CVectorSimpleTypeType_altova_unnamed, value);
}

CVectorSimpleTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CVectorSimpleTypeType_altova_unnamed);
}

int CAddressDescriptionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CAddressDescriptionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CAddressDescriptionEnumType].Facets + 1, 4);
}

void CAddressDescriptionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CAddressDescriptionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CAddressDescriptionEnumType].Facets + 1, 4));
}

void CAddressDescriptionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CAddressDescriptionEnumTypeType_altova_unnamed, value);
}

CAddressDescriptionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CAddressDescriptionEnumTypeType_altova_unnamed);
}

int CDimensionModifierEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDimensionModifierEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDimensionModifierEnumType].Facets + 1, 3);
}

void CDimensionModifierEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDimensionModifierEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDimensionModifierEnumType].Facets + 1, 3));
}

void CDimensionModifierEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDimensionModifierEnumTypeType_altova_unnamed, value);
}

CDimensionModifierEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDimensionModifierEnumTypeType_altova_unnamed);
}

int CNonToleranceEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CNonToleranceEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CNonToleranceEnumType].Facets + 1, 2);
}

void CNonToleranceEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CNonToleranceEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CNonToleranceEnumType].Facets + 1, 2));
}

void CNonToleranceEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CNonToleranceEnumTypeType_altova_unnamed, value);
}

CNonToleranceEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CNonToleranceEnumTypeType_altova_unnamed);
}

void CQPIdTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CQPIdTypeType_altova_unnamed, value);
}

CQPIdTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CQPIdTypeType_altova_unnamed);
}

int CAngleBetweenAnalysisModeEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CAngleBetweenAnalysisModeEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CAngleBetweenAnalysisModeEnumType].Facets + 1, 2);
}

void CAngleBetweenAnalysisModeEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CAngleBetweenAnalysisModeEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CAngleBetweenAnalysisModeEnumType].Facets + 1, 2));
}

void CAngleBetweenAnalysisModeEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CAngleBetweenAnalysisModeEnumTypeType_altova_unnamed, value);
}

CAngleBetweenAnalysisModeEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CAngleBetweenAnalysisModeEnumTypeType_altova_unnamed);
}

void CListDoubleTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListDoubleTypeType_altova_unnamed, value);
}

CListDoubleTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListDoubleTypeType_altova_unnamed);
}

void CPoint2dSimpleTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPoint2dSimpleTypeType_altova_unnamed, value);
}

CPoint2dSimpleTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPoint2dSimpleTypeType_altova_unnamed);
}

int CAngularCoordinateDirectionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CAngularCoordinateDirectionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CAngularCoordinateDirectionEnumType].Facets + 1, 3);
}

void CAngularCoordinateDirectionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CAngularCoordinateDirectionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CAngularCoordinateDirectionEnumType].Facets + 1, 3));
}

void CAngularCoordinateDirectionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CAngularCoordinateDirectionEnumTypeType_altova_unnamed, value);
}

CAngularCoordinateDirectionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CAngularCoordinateDirectionEnumTypeType_altova_unnamed);
}

int COneSidedCapabilityCalculationEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_COneSidedCapabilityCalculationEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_COneSidedCapabilityCalculationEnumType].Facets + 1, 2);
}

void COneSidedCapabilityCalculationEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_COneSidedCapabilityCalculationEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_COneSidedCapabilityCalculationEnumType].Facets + 1, 2));
}

void COneSidedCapabilityCalculationEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_COneSidedCapabilityCalculationEnumTypeType_altova_unnamed, value);
}

COneSidedCapabilityCalculationEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_COneSidedCapabilityCalculationEnumTypeType_altova_unnamed);
}

void CUnitVector2dSimpleTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CUnitVector2dSimpleTypeType_altova_unnamed, value);
}

CUnitVector2dSimpleTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CUnitVector2dSimpleTypeType_altova_unnamed);
}

int CInternalExternalEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CInternalExternalEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CInternalExternalEnumType].Facets + 1, 3);
}

void CInternalExternalEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CInternalExternalEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CInternalExternalEnumType].Facets + 1, 3));
}

void CInternalExternalEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CInternalExternalEnumTypeType_altova_unnamed, value);
}

CInternalExternalEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CInternalExternalEnumTypeType_altova_unnamed);
}

int COpenCurvePointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_COpenCurvePointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_COpenCurvePointSamplingStrategyEnumType].Facets + 1, 1);
}

void COpenCurvePointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_COpenCurvePointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_COpenCurvePointSamplingStrategyEnumType].Facets + 1, 1));
}

void COpenCurvePointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_COpenCurvePointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

COpenCurvePointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_COpenCurvePointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CCharacteristicTypeEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCharacteristicTypeEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCharacteristicTypeEnumType].Facets + 1, 34);
}

void CCharacteristicTypeEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCharacteristicTypeEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCharacteristicTypeEnumType].Facets + 1, 34));
}

void CCharacteristicTypeEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCharacteristicTypeEnumTypeType_altova_unnamed, value);
}

CCharacteristicTypeEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCharacteristicTypeEnumTypeType_altova_unnamed);
}

void CListBoolTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListBoolTypeType_altova_unnamed, value);
}

CListBoolTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListBoolTypeType_altova_unnamed);
}

void CListIntTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListIntTypeType_altova_unnamed, value);
}

CListIntTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListIntTypeType_altova_unnamed);
}

void CListNaturalTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListNaturalTypeType_altova_unnamed, value);
}

CListNaturalTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListNaturalTypeType_altova_unnamed);
}

void CListUnsignedByteTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListUnsignedByteTypeType_altova_unnamed, value);
}

CListUnsignedByteTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListUnsignedByteTypeType_altova_unnamed);
}

int CAssignableCauseEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CAssignableCauseEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CAssignableCauseEnumType].Facets + 1, 5);
}

void CAssignableCauseEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CAssignableCauseEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CAssignableCauseEnumType].Facets + 1, 5));
}

void CAssignableCauseEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CAssignableCauseEnumTypeType_altova_unnamed, value);
}

CAssignableCauseEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CAssignableCauseEnumTypeType_altova_unnamed);
}

int CReferencedComponentEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CReferencedComponentEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CReferencedComponentEnumType].Facets + 1, 2);
}

void CReferencedComponentEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CReferencedComponentEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CReferencedComponentEnumType].Facets + 1, 2));
}

void CReferencedComponentEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CReferencedComponentEnumTypeType_altova_unnamed, value);
}

CReferencedComponentEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CReferencedComponentEnumTypeType_altova_unnamed);
}

void CListAccumulatedStatsValuesTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListAccumulatedStatsValuesTypeType_altova_unnamed, value);
}

CListAccumulatedStatsValuesTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListAccumulatedStatsValuesTypeType_altova_unnamed);
}

void CListSubgroupStatsValuesTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListSubgroupStatsValuesTypeType_altova_unnamed, value);
}

CListSubgroupStatsValuesTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListSubgroupStatsValuesTypeType_altova_unnamed);
}

void CQPIdReferenceTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CQPIdReferenceTypeType_altova_unnamed, value);
}

CQPIdReferenceTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CQPIdReferenceTypeType_altova_unnamed);
}

int CBottomEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CBottomEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CBottomEnumType].Facets + 1, 3);
}

void CBottomEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CBottomEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CBottomEnumType].Facets + 1, 3));
}

void CBottomEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CBottomEnumTypeType_altova_unnamed, value);
}

CBottomEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CBottomEnumTypeType_altova_unnamed);
}

int CCMMDirectionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCMMDirectionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCMMDirectionEnumType].Facets + 1, 6);
}

void CCMMDirectionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCMMDirectionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCMMDirectionEnumType].Facets + 1, 6));
}

void CCMMDirectionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCMMDirectionEnumTypeType_altova_unnamed, value);
}

CCMMDirectionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCMMDirectionEnumTypeType_altova_unnamed);
}

int CCMMGeometryEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCMMGeometryEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCMMGeometryEnumType].Facets + 1, 8);
}

void CCMMGeometryEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCMMGeometryEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCMMGeometryEnumType].Facets + 1, 8));
}

void CCMMGeometryEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCMMGeometryEnumTypeType_altova_unnamed, value);
}

CCMMGeometryEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCMMGeometryEnumTypeType_altova_unnamed);
}

int CCharacteristicStatusEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCharacteristicStatusEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCharacteristicStatusEnumType].Facets + 1, 8);
}

void CCharacteristicStatusEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCharacteristicStatusEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCharacteristicStatusEnumType].Facets + 1, 8));
}

void CCharacteristicStatusEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCharacteristicStatusEnumTypeType_altova_unnamed, value);
}

CCharacteristicStatusEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCharacteristicStatusEnumTypeType_altova_unnamed);
}

int CClosedCurvePointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CClosedCurvePointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CClosedCurvePointSamplingStrategyEnumType].Facets + 1, 2);
}

void CClosedCurvePointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CClosedCurvePointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CClosedCurvePointSamplingStrategyEnumType].Facets + 1, 2));
}

void CClosedCurvePointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CClosedCurvePointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CClosedCurvePointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CClosedCurvePointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CCompoundFeatureGeometryEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCompoundFeatureGeometryEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCompoundFeatureGeometryEnumType].Facets + 1, 3);
}

void CCompoundFeatureGeometryEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCompoundFeatureGeometryEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCompoundFeatureGeometryEnumType].Facets + 1, 3));
}

void CCompoundFeatureGeometryEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCompoundFeatureGeometryEnumTypeType_altova_unnamed, value);
}

CCompoundFeatureGeometryEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCompoundFeatureGeometryEnumTypeType_altova_unnamed);
}

int CConePointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CConePointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CConePointSamplingStrategyEnumType].Facets + 1, 5);
}

void CConePointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CConePointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CConePointSamplingStrategyEnumType].Facets + 1, 5));
}

void CConePointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CConePointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CConePointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CConePointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CControlIssueEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CControlIssueEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CControlIssueEnumType].Facets + 1, 14);
}

void CControlIssueEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CControlIssueEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CControlIssueEnumType].Facets + 1, 14));
}

void CControlIssueEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CControlIssueEnumTypeType_altova_unnamed, value);
}

CControlIssueEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CControlIssueEnumTypeType_altova_unnamed);
}

int CActionToTakeEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CActionToTakeEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CActionToTakeEnumType].Facets + 1, 8);
}

void CActionToTakeEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CActionToTakeEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CActionToTakeEnumType].Facets + 1, 8));
}

void CActionToTakeEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CActionToTakeEnumTypeType_altova_unnamed, value);
}

CActionToTakeEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CActionToTakeEnumTypeType_altova_unnamed);
}

int CPrismPointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CPrismPointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CPrismPointSamplingStrategyEnumType].Facets + 1, 6);
}

void CPrismPointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CPrismPointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CPrismPointSamplingStrategyEnumType].Facets + 1, 6));
}

void CPrismPointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPrismPointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CPrismPointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPrismPointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CCurveSubstituteFeatureAlgorithmEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCurveSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCurveSubstituteFeatureAlgorithmEnumType].Facets + 1, 4);
}

void CCurveSubstituteFeatureAlgorithmEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCurveSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCurveSubstituteFeatureAlgorithmEnumType].Facets + 1, 4));
}

void CCurveSubstituteFeatureAlgorithmEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCurveSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed, value);
}

CCurveSubstituteFeatureAlgorithmEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCurveSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
}

int CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSurfaceOfRevolutionPointSamplingStrategyEnumType].Facets + 1, 6);
}

void CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSurfaceOfRevolutionPointSamplingStrategyEnumType].Facets + 1, 6));
}

void CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSurfaceOfRevolutionPointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CDiameterModifierEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDiameterModifierEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDiameterModifierEnumType].Facets + 1, 3);
}

void CDiameterModifierEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDiameterModifierEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDiameterModifierEnumType].Facets + 1, 3));
}

void CDiameterModifierEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDiameterModifierEnumTypeType_altova_unnamed, value);
}

CDiameterModifierEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDiameterModifierEnumTypeType_altova_unnamed);
}

int CSectionModifierEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSectionModifierEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSectionModifierEnumType].Facets + 1, 2);
}

void CSectionModifierEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSectionModifierEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSectionModifierEnumType].Facets + 1, 2));
}

void CSectionModifierEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSectionModifierEnumTypeType_altova_unnamed, value);
}

CSectionModifierEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSectionModifierEnumTypeType_altova_unnamed);
}

int CReducedDatumEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CReducedDatumEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CReducedDatumEnumType].Facets + 1, 3);
}

void CReducedDatumEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CReducedDatumEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CReducedDatumEnumType].Facets + 1, 3));
}

void CReducedDatumEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CReducedDatumEnumTypeType_altova_unnamed, value);
}

CReducedDatumEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CReducedDatumEnumTypeType_altova_unnamed);
}

int CDegreeOfFreedomEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDegreeOfFreedomEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDegreeOfFreedomEnumType].Facets + 1, 6);
}

void CDegreeOfFreedomEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDegreeOfFreedomEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDegreeOfFreedomEnumType].Facets + 1, 6));
}

void CDegreeOfFreedomEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDegreeOfFreedomEnumTypeType_altova_unnamed, value);
}

CDegreeOfFreedomEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDegreeOfFreedomEnumTypeType_altova_unnamed);
}

int CISODegreeOfFreedomEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CISODegreeOfFreedomEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CISODegreeOfFreedomEnumType].Facets + 1, 6);
}

void CISODegreeOfFreedomEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CISODegreeOfFreedomEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CISODegreeOfFreedomEnumType].Facets + 1, 6));
}

void CISODegreeOfFreedomEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CISODegreeOfFreedomEnumTypeType_altova_unnamed, value);
}

CISODegreeOfFreedomEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CISODegreeOfFreedomEnumTypeType_altova_unnamed);
}

int CDigitalModelFormatEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDigitalModelFormatEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDigitalModelFormatEnumType].Facets + 1, 15);
}

void CDigitalModelFormatEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDigitalModelFormatEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDigitalModelFormatEnumType].Facets + 1, 15));
}

void CDigitalModelFormatEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDigitalModelFormatEnumTypeType_altova_unnamed, value);
}

CDigitalModelFormatEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDigitalModelFormatEnumTypeType_altova_unnamed);
}

int CGDTEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CGDTEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CGDTEnumType].Facets + 1, 4);
}

void CGDTEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CGDTEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CGDTEnumType].Facets + 1, 4));
}

void CGDTEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CGDTEnumTypeType_altova_unnamed, value);
}

CGDTEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CGDTEnumTypeType_altova_unnamed);
}

int CTopologyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CTopologyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CTopologyEnumType].Facets + 1, 3);
}

void CTopologyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CTopologyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CTopologyEnumType].Facets + 1, 3));
}

void CTopologyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CTopologyEnumTypeType_altova_unnamed, value);
}

CTopologyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CTopologyEnumTypeType_altova_unnamed);
}

int CDistanceBetweenAnalysisModeEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDistanceBetweenAnalysisModeEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDistanceBetweenAnalysisModeEnumType].Facets + 1, 3);
}

void CDistanceBetweenAnalysisModeEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDistanceBetweenAnalysisModeEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDistanceBetweenAnalysisModeEnumType].Facets + 1, 3));
}

void CDistanceBetweenAnalysisModeEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDistanceBetweenAnalysisModeEnumTypeType_altova_unnamed, value);
}

CDistanceBetweenAnalysisModeEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDistanceBetweenAnalysisModeEnumTypeType_altova_unnamed);
}

int CDistributionTransformationEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDistributionTransformationEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDistributionTransformationEnumType].Facets + 1, 3);
}

void CDistributionTransformationEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDistributionTransformationEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDistributionTransformationEnumType].Facets + 1, 3));
}

void CDistributionTransformationEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDistributionTransformationEnumTypeType_altova_unnamed, value);
}

CDistributionTransformationEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDistributionTransformationEnumTypeType_altova_unnamed);
}

int CRetrievalMethodEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CRetrievalMethodEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CRetrievalMethodEnumType].Facets + 1, 6);
}

void CRetrievalMethodEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CRetrievalMethodEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CRetrievalMethodEnumType].Facets + 1, 6));
}

void CRetrievalMethodEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CRetrievalMethodEnumTypeType_altova_unnamed, value);
}

CRetrievalMethodEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CRetrievalMethodEnumTypeType_altova_unnamed);
}

int CElongatedCylinderPointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CElongatedCylinderPointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CElongatedCylinderPointSamplingStrategyEnumType].Facets + 1, 6);
}

void CElongatedCylinderPointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CElongatedCylinderPointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CElongatedCylinderPointSamplingStrategyEnumType].Facets + 1, 6));
}

void CElongatedCylinderPointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CElongatedCylinderPointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CElongatedCylinderPointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CElongatedCylinderPointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CExclusionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CExclusionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CExclusionEnumType].Facets + 1, 4);
}

void CExclusionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CExclusionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CExclusionEnumType].Facets + 1, 4));
}

void CExclusionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CExclusionEnumTypeType_altova_unnamed, value);
}

CExclusionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CExclusionEnumTypeType_altova_unnamed);
}

int CExtentEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CExtentEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CExtentEnumType].Facets + 1, 5);
}

void CExtentEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CExtentEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CExtentEnumType].Facets + 1, 5));
}

void CExtentEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CExtentEnumTypeType_altova_unnamed, value);
}

CExtentEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CExtentEnumTypeType_altova_unnamed);
}

int CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CExtrudedCrossSectionPointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CExtrudedCrossSectionPointSamplingStrategyEnumType].Facets + 1, 3);
}

void CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CExtrudedCrossSectionPointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CExtrudedCrossSectionPointSamplingStrategyEnumType].Facets + 1, 3));
}

void CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CExtrudedCrossSectionPointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CExtrudedCrossSectionPointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CExtrudedCrossSectionPointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CFeatureOfSizeSubstituteFeatureAlgorithmEnumType].Facets + 1, 5);
}

void CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CFeatureOfSizeSubstituteFeatureAlgorithmEnumType].Facets + 1, 5));
}

void CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed, value);
}

CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
}

int CCommonFileSpecEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCommonFileSpecEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCommonFileSpecEnumType].Facets + 1, 36);
}

void CCommonFileSpecEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCommonFileSpecEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCommonFileSpecEnumType].Facets + 1, 36));
}

void CCommonFileSpecEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCommonFileSpecEnumTypeType_altova_unnamed, value);
}

CCommonFileSpecEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCommonFileSpecEnumTypeType_altova_unnamed);
}

void CNaturalTypeType::operator=(const unsigned& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CNaturalTypeType_altova_unnamed, value);
}

CNaturalTypeType::operator unsigned()
{
    return CastAs<unsigned >::Do(GetNode(), members + _altova_mi_t_altova_CNaturalTypeType_altova_unnamed);
}

int CFormalStandardEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CFormalStandardEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CFormalStandardEnumType].Facets + 1, 11);
}

void CFormalStandardEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CFormalStandardEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CFormalStandardEnumType].Facets + 1, 11));
}

void CFormalStandardEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CFormalStandardEnumTypeType_altova_unnamed, value);
}

CFormalStandardEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CFormalStandardEnumTypeType_altova_unnamed);
}

int CGageRandRStudyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CGageRandRStudyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CGageRandRStudyEnumType].Facets + 1, 3);
}

void CGageRandRStudyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CGageRandRStudyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CGageRandRStudyEnumType].Facets + 1, 3));
}

void CGageRandRStudyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CGageRandRStudyEnumTypeType_altova_unnamed, value);
}

CGageRandRStudyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CGageRandRStudyEnumTypeType_altova_unnamed);
}

int CInspectionStatusEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CInspectionStatusEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CInspectionStatusEnumType].Facets + 1, 8);
}

void CInspectionStatusEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CInspectionStatusEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CInspectionStatusEnumType].Facets + 1, 8));
}

void CInspectionStatusEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CInspectionStatusEnumTypeType_altova_unnamed, value);
}

CInspectionStatusEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CInspectionStatusEnumTypeType_altova_unnamed);
}

int CInspectionScopeEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CInspectionScopeEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CInspectionScopeEnumType].Facets + 1, 2);
}

void CInspectionScopeEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CInspectionScopeEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CInspectionScopeEnumType].Facets + 1, 2));
}

void CInspectionScopeEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CInspectionScopeEnumTypeType_altova_unnamed, value);
}

CInspectionScopeEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CInspectionScopeEnumTypeType_altova_unnamed);
}

int CInspectionModeEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CInspectionModeEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CInspectionModeEnumType].Facets + 1, 6);
}

void CInspectionModeEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CInspectionModeEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CInspectionModeEnumType].Facets + 1, 6));
}

void CInspectionModeEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CInspectionModeEnumTypeType_altova_unnamed, value);
}

CInspectionModeEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CInspectionModeEnumTypeType_altova_unnamed);
}

int CIntersectionPlaneEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CIntersectionPlaneEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CIntersectionPlaneEnumType].Facets + 1, 3);
}

void CIntersectionPlaneEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CIntersectionPlaneEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CIntersectionPlaneEnumType].Facets + 1, 3));
}

void CIntersectionPlaneEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CIntersectionPlaneEnumTypeType_altova_unnamed, value);
}

CIntersectionPlaneEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CIntersectionPlaneEnumTypeType_altova_unnamed);
}

int CLeaderHeadFormEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CLeaderHeadFormEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CLeaderHeadFormEnumType].Facets + 1, 14);
}

void CLeaderHeadFormEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CLeaderHeadFormEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CLeaderHeadFormEnumType].Facets + 1, 14));
}

void CLeaderHeadFormEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CLeaderHeadFormEnumTypeType_altova_unnamed, value);
}

CLeaderHeadFormEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CLeaderHeadFormEnumTypeType_altova_unnamed);
}

int CLinearCoordinateDirectionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CLinearCoordinateDirectionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CLinearCoordinateDirectionEnumType].Facets + 1, 4);
}

void CLinearCoordinateDirectionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CLinearCoordinateDirectionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CLinearCoordinateDirectionEnumType].Facets + 1, 4));
}

void CLinearCoordinateDirectionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CLinearCoordinateDirectionEnumTypeType_altova_unnamed, value);
}

CLinearCoordinateDirectionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CLinearCoordinateDirectionEnumTypeType_altova_unnamed);
}

int CManufacturingMethodEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CManufacturingMethodEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CManufacturingMethodEnumType].Facets + 1, 8);
}

void CManufacturingMethodEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CManufacturingMethodEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CManufacturingMethodEnumType].Facets + 1, 8));
}

void CManufacturingMethodEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CManufacturingMethodEnumTypeType_altova_unnamed, value);
}

CManufacturingMethodEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CManufacturingMethodEnumTypeType_altova_unnamed);
}

void CListDouble9TypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListDouble9TypeType_altova_unnamed, value);
}

CListDouble9TypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListDouble9TypeType_altova_unnamed);
}

int CMeasureActionGroupFunctionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CMeasureActionGroupFunctionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CMeasureActionGroupFunctionEnumType].Facets + 1, 9);
}

void CMeasureActionGroupFunctionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CMeasureActionGroupFunctionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CMeasureActionGroupFunctionEnumType].Facets + 1, 9));
}

void CMeasureActionGroupFunctionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CMeasureActionGroupFunctionEnumTypeType_altova_unnamed, value);
}

CMeasureActionGroupFunctionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CMeasureActionGroupFunctionEnumTypeType_altova_unnamed);
}

int CMeasurementDirectiveEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CMeasurementDirectiveEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CMeasurementDirectiveEnumType].Facets + 1, 4);
}

void CMeasurementDirectiveEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CMeasurementDirectiveEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CMeasurementDirectiveEnumType].Facets + 1, 4));
}

void CMeasurementDirectiveEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CMeasurementDirectiveEnumTypeType_altova_unnamed, value);
}

CMeasurementDirectiveEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CMeasurementDirectiveEnumTypeType_altova_unnamed);
}

int CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType].Facets + 1, 3);
}

void CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumType].Facets + 1, 3));
}

void CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed, value);
}

CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CNonFeatureOfSizeSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
}

int CPlanePointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CPlanePointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CPlanePointSamplingStrategyEnumType].Facets + 1, 7);
}

void CPlanePointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CPlanePointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CPlanePointSamplingStrategyEnumType].Facets + 1, 7));
}

void CPlanePointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPlanePointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CPlanePointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPlanePointSamplingStrategyEnumTypeType_altova_unnamed);
}

int COrientationPlaneEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_COrientationPlaneEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_COrientationPlaneEnumType].Facets + 1, 3);
}

void COrientationPlaneEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_COrientationPlaneEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_COrientationPlaneEnumType].Facets + 1, 3));
}

void COrientationPlaneEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_COrientationPlaneEnumTypeType_altova_unnamed, value);
}

COrientationPlaneEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_COrientationPlaneEnumTypeType_altova_unnamed);
}

void CColorTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CColorTypeType_altova_unnamed, value);
}

CColorTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CColorTypeType_altova_unnamed);
}

int CPointDefinedPointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CPointDefinedPointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CPointDefinedPointSamplingStrategyEnumType].Facets + 1, 2);
}

void CPointDefinedPointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CPointDefinedPointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CPointDefinedPointSamplingStrategyEnumType].Facets + 1, 2));
}

void CPointDefinedPointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPointDefinedPointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CPointDefinedPointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPointDefinedPointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CPointPointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CPointPointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CPointPointSamplingStrategyEnumType].Facets + 1, 1);
}

void CPointPointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CPointPointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CPointPointSamplingStrategyEnumType].Facets + 1, 1));
}

void CPointPointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPointPointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CPointPointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPointPointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CPositionCapabilityCalculationEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CPositionCapabilityCalculationEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CPositionCapabilityCalculationEnumType].Facets + 1, 4);
}

void CPositionCapabilityCalculationEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CPositionCapabilityCalculationEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CPositionCapabilityCalculationEnumType].Facets + 1, 4));
}

void CPositionCapabilityCalculationEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPositionCapabilityCalculationEnumTypeType_altova_unnamed, value);
}

CPositionCapabilityCalculationEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPositionCapabilityCalculationEnumTypeType_altova_unnamed);
}

int CDimensionCountEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CDimensionCountEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CDimensionCountEnumType].Facets + 1, 2);
}

void CDimensionCountEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CDimensionCountEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CDimensionCountEnumType].Facets + 1, 2));
}

void CDimensionCountEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CDimensionCountEnumTypeType_altova_unnamed, value);
}

CDimensionCountEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CDimensionCountEnumTypeType_altova_unnamed);
}

int CPrecedenceEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CPrecedenceEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CPrecedenceEnumType].Facets + 1, 6);
}

void CPrecedenceEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CPrecedenceEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CPrecedenceEnumType].Facets + 1, 6));
}

void CPrecedenceEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPrecedenceEnumTypeType_altova_unnamed, value);
}

CPrecedenceEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CPrecedenceEnumTypeType_altova_unnamed);
}

void CQIFIdTypeType::operator=(const unsigned& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CQIFIdTypeType_altova_unnamed, value);
}

CQIFIdTypeType::operator unsigned()
{
    return CastAs<unsigned >::Do(GetNode(), members + _altova_mi_t_altova_CQIFIdTypeType_altova_unnamed);
}

void CD4TypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CD4TypeType_altova_unnamed, value);
}

CD4TypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CD4TypeType_altova_unnamed);
}

int CSamplingIntervalEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSamplingIntervalEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSamplingIntervalEnumType].Facets + 1, 7);
}

void CSamplingIntervalEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSamplingIntervalEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSamplingIntervalEnumType].Facets + 1, 7));
}

void CSamplingIntervalEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSamplingIntervalEnumTypeType_altova_unnamed, value);
}

CSamplingIntervalEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSamplingIntervalEnumTypeType_altova_unnamed);
}

int CSecurityClassificationEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSecurityClassificationEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSecurityClassificationEnumType].Facets + 1, 32);
}

void CSecurityClassificationEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSecurityClassificationEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSecurityClassificationEnumType].Facets + 1, 32));
}

void CSecurityClassificationEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSecurityClassificationEnumTypeType_altova_unnamed, value);
}

CSecurityClassificationEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSecurityClassificationEnumTypeType_altova_unnamed);
}

int CShapeClassEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CShapeClassEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CShapeClassEnumType].Facets + 1, 5);
}

void CShapeClassEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CShapeClassEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CShapeClassEnumType].Facets + 1, 5));
}

void CShapeClassEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CShapeClassEnumTypeType_altova_unnamed, value);
}

CShapeClassEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CShapeClassEnumTypeType_altova_unnamed);
}

int CSlotEndEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSlotEndEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSlotEndEnumType].Facets + 1, 4);
}

void CSlotEndEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSlotEndEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSlotEndEnumType].Facets + 1, 4));
}

void CSlotEndEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSlotEndEnumTypeType_altova_unnamed, value);
}

CSlotEndEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSlotEndEnumTypeType_altova_unnamed);
}

int CSpherePointSamplingStrategyEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSpherePointSamplingStrategyEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSpherePointSamplingStrategyEnumType].Facets + 1, 5);
}

void CSpherePointSamplingStrategyEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSpherePointSamplingStrategyEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSpherePointSamplingStrategyEnumType].Facets + 1, 5));
}

void CSpherePointSamplingStrategyEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSpherePointSamplingStrategyEnumTypeType_altova_unnamed, value);
}

CSpherePointSamplingStrategyEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSpherePointSamplingStrategyEnumTypeType_altova_unnamed);
}

int CStatsEvalStatusEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CStatsEvalStatusEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CStatsEvalStatusEnumType].Facets + 1, 4);
}

void CStatsEvalStatusEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CStatsEvalStatusEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CStatsEvalStatusEnumType].Facets + 1, 4));
}

void CStatsEvalStatusEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CStatsEvalStatusEnumTypeType_altova_unnamed, value);
}

CStatsEvalStatusEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CStatsEvalStatusEnumTypeType_altova_unnamed);
}

int CStatsValuesEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CStatsValuesEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CStatsValuesEnumType].Facets + 1, 52);
}

void CStatsValuesEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CStatsValuesEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CStatsValuesEnumType].Facets + 1, 52));
}

void CStatsValuesEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CStatsValuesEnumTypeType_altova_unnamed, value);
}

CStatsValuesEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CStatsValuesEnumTypeType_altova_unnamed);
}

int CSummaryStatsValuesEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSummaryStatsValuesEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSummaryStatsValuesEnumType].Facets + 1, 5);
}

void CSummaryStatsValuesEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSummaryStatsValuesEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSummaryStatsValuesEnumType].Facets + 1, 5));
}

void CSummaryStatsValuesEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSummaryStatsValuesEnumTypeType_altova_unnamed, value);
}

CSummaryStatsValuesEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSummaryStatsValuesEnumTypeType_altova_unnamed);
}

void CListSummaryStatsValuesTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CListSummaryStatsValuesTypeType_altova_unnamed, value);
}

CListSummaryStatsValuesTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CListSummaryStatsValuesTypeType_altova_unnamed);
}

int CSurfaceSubstituteFeatureAlgorithmEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CSurfaceSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CSurfaceSubstituteFeatureAlgorithmEnumType].Facets + 1, 5);
}

void CSurfaceSubstituteFeatureAlgorithmEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CSurfaceSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CSurfaceSubstituteFeatureAlgorithmEnumType].Facets + 1, 5));
}

void CSurfaceSubstituteFeatureAlgorithmEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CSurfaceSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed, value);
}

CSurfaceSubstituteFeatureAlgorithmEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CSurfaceSubstituteFeatureAlgorithmEnumTypeType_altova_unnamed);
}

void CPositiveDecimalTypeType::operator=(const double& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CPositiveDecimalTypeType_altova_unnamed, value);
}

CPositiveDecimalTypeType::operator double()
{
    return CastAs<double >::Do(GetNode(), members + _altova_mi_t_altova_CPositiveDecimalTypeType_altova_unnamed);
}

int CThreadClassEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CThreadClassEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CThreadClassEnumType].Facets + 1, 50);
}

void CThreadClassEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CThreadClassEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CThreadClassEnumType].Facets + 1, 50));
}

void CThreadClassEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CThreadClassEnumTypeType_altova_unnamed, value);
}

CThreadClassEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CThreadClassEnumTypeType_altova_unnamed);
}

int CThreadSeriesEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CThreadSeriesEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CThreadSeriesEnumType].Facets + 1, 56);
}

void CThreadSeriesEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CThreadSeriesEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CThreadSeriesEnumType].Facets + 1, 56));
}

void CThreadSeriesEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CThreadSeriesEnumTypeType_altova_unnamed, value);
}

CThreadSeriesEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CThreadSeriesEnumTypeType_altova_unnamed);
}

int CTimeDescriptionEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CTimeDescriptionEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CTimeDescriptionEnumType].Facets + 1, 3);
}

void CTimeDescriptionEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CTimeDescriptionEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CTimeDescriptionEnumType].Facets + 1, 3));
}

void CTimeDescriptionEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CTimeDescriptionEnumTypeType_altova_unnamed, value);
}

CTimeDescriptionEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CTimeDescriptionEnumTypeType_altova_unnamed);
}

int CCoordinateEnumTypeType::GetEnumerationValue()
{
    string_type sValue = CastAs<string_type>::Do(GetNode(), members + _altova_mi_t_altova_CCoordinateEnumTypeType_altova_unnamed);
    return TypeBase::GetEnumerationIndex(sValue, types[_altova_ti_t_altova_CCoordinateEnumType].Facets + 1, 6);
}

void CCoordinateEnumTypeType::SetEnumerationValue(const int index)
{
    const MemberInfo* member = members + _altova_mi_t_altova_CCoordinateEnumTypeType_altova_unnamed;
    XercesTreeOperations::SetValue(GetNode(), member, TypeBase::GetEnumerationValue(index, types[_altova_ti_t_altova_CCoordinateEnumType].Facets + 1, 6));
}

void CCoordinateEnumTypeType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_t_altova_CCoordinateEnumTypeType_altova_unnamed, value);
}

CCoordinateEnumTypeType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_t_altova_CCoordinateEnumTypeType_altova_unnamed);
}

} // namespace t


namespace xs
{

void CanyType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed, value);
}

CanyType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed);
}

void CdecimalType::operator=(const double& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CdecimalType_altova_unnamed, value);
}

CdecimalType::operator double()
{
    return CastAs<double >::Do(GetNode(), members + _altova_mi_xs_altova_CdecimalType_altova_unnamed);
}

void CstringType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CstringType_altova_unnamed, value);
}

CstringType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CstringType_altova_unnamed);
}

void CbooleanType::operator=(const bool& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CbooleanType_altova_unnamed, value);
}

CbooleanType::operator bool()
{
    return CastAs<bool >::Do(GetNode(), members + _altova_mi_xs_altova_CbooleanType_altova_unnamed);
}

void CpositiveIntegerType::operator=(const unsigned __int64& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CpositiveIntegerType_altova_unnamed, value);
}

CpositiveIntegerType::operator unsigned __int64()
{
    return CastAs<unsigned __int64 >::Do(GetNode(), members + _altova_mi_xs_altova_CpositiveIntegerType_altova_unnamed);
}

void CdateTimeType::operator=(const altova::DateTime& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CdateTimeType_altova_unnamed, value);
}

CdateTimeType::operator altova::DateTime()
{
    return CastAs<altova::DateTime >::Do(GetNode(), members + _altova_mi_xs_altova_CdateTimeType_altova_unnamed);
}

void CtokenType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CtokenType_altova_unnamed, value);
}

CtokenType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CtokenType_altova_unnamed);
}

void CdoubleType::operator=(const double& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CdoubleType_altova_unnamed, value);
}

CdoubleType::operator double()
{
    return CastAs<double >::Do(GetNode(), members + _altova_mi_xs_altova_CdoubleType_altova_unnamed);
}

void Cbase64BinaryType::operator=(const std::vector<unsigned char>& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_Cbase64BinaryType_altova_unnamed, value);
}

Cbase64BinaryType::operator std::vector<unsigned char>()
{
    return CastAs<std::vector<unsigned char> >::Do(GetNode(), members + _altova_mi_xs_altova_Cbase64BinaryType_altova_unnamed);
}

void CunsignedIntType::operator=(const unsigned& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CunsignedIntType_altova_unnamed, value);
}

CunsignedIntType::operator unsigned()
{
    return CastAs<unsigned >::Do(GetNode(), members + _altova_mi_xs_altova_CunsignedIntType_altova_unnamed);
}

void CNMTOKENType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CNMTOKENType_altova_unnamed, value);
}

CNMTOKENType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CNMTOKENType_altova_unnamed);
}

void CanyURIType::operator=(const string_type& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CanyURIType_altova_unnamed, value);
}

CanyURIType::operator string_type()
{
    return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CanyURIType_altova_unnamed);
}

void CnonNegativeIntegerType::operator=(const unsigned __int64& value)
{
    XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CnonNegativeIntegerType_altova_unnamed, value);
}

CnonNegativeIntegerType::operator unsigned __int64()
{
    return CastAs<unsigned __int64 >::Do(GetNode(), members + _altova_mi_xs_altova_CnonNegativeIntegerType_altova_unnamed);
}

} // namespace xs


}
