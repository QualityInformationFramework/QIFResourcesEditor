// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#include "stdafx.h"
#include "CmmErrorIso10360.h"

namespace Qif
{
/// <summary> Constructor. </summary>
CmmErrorIso10360::CmmErrorIso10360()
{
    _data = new qifbase::CmmErrorIso10360();
}

/// <summary> Copy constructor. </summary>
/// <param name="copy"> Object to copy </param>
CmmErrorIso10360::CmmErrorIso10360(CmmErrorIso10360^ copy)
{
    _data = new qifbase::CmmErrorIso10360(*(copy->_data));
}

/// <summary> Copy constructor. </summary>
/// <param name="copy"> Object to copy </param>
CmmErrorIso10360::CmmErrorIso10360(const qifbase::CmmErrorIso10360& other)
{
    _data = new qifbase::CmmErrorIso10360(other);
}

/// <summary> Finalizer. </summary>
CmmErrorIso10360::!CmmErrorIso10360()
{
    delete _data;
}

/// <summary> Compares the object with the given one. </summary>
/// <param name="o"> Object to compare </param>
/// <returns> True if objects are equal, otherwise false </returns>
bool CmmErrorIso10360::Equals(Object^ o)
{
    CmmErrorIso10360^ other = dynamic_cast<CmmErrorIso10360^>(o);
    if(other == nullptr)
        return false;

    return (*_data == *(other->_data));
}

// <summary> Gets the Artifact Position at the given index. </summary>
/// <param name="index"> Index </param>
/// <returns> Artifact position </returns>
CmmErrorIso10360::ArtifactPosition CmmErrorIso10360::ArtifactPositionValue(int index)
{
    return (CmmErrorIso10360::ArtifactPosition)_data->ArtifactPositionValue(index);
}

/// <summary> Sets the Artifact Position at the given index </summary>
/// <param name="index"> Index </param>
/// <param name="position"> Artifact Position </param>
void CmmErrorIso10360::ArtifactPositionValue(int index, ArtifactPosition position)
{
    _data->ArtifactPositionValue(index, (qifbase::CmmErrorIso10360::ArtifactPosition)position);
}

/// <summary> Gets the Gage Block Stacking at the given index </summary>
/// <param name="index"> Index </param>
/// <returns> Gage Block Stacking </returns>
CmmErrorIso10360::GageBlockStacking CmmErrorIso10360::GageBlockStackingValue(int index)
{
    return (CmmErrorIso10360::GageBlockStacking)_data->GageBlockStackingValue(index);
}

/// <summary> Sets the Gage Block Stacking at the given index </summary>
/// <param name="index"> Index </param>
/// <param name="stacking"> Gage Block Stacking </param>
void CmmErrorIso10360::GageBlockStackingValue(int index, GageBlockStacking stacking)
{
    _data->GageBlockStackingValue(index, (qifbase::CmmErrorIso10360::GageBlockStacking)stacking);
}
}
