// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#include "stdafx.h"
#include "QifResourcesDocument.h"
#include <msclr\marshal.h>
#include <msclr\marshal_cppstd.h>

#define ss2ws(x) msclr::interop::marshal_as<std::wstring>(x)

namespace Qif_1_9_1
{

/// <summary> Constructor. </summary>
/// <param name="filepath"> QIF file path </param>
QifResourcesDocument::QifResourcesDocument(String^ filepath)
{
    _document = new qif191::QifResourcesDocument(ss2ws(filepath));
}

/// <summary> Finalizer. </summary>
/// <returns></returns>
QifResourcesDocument::!QifResourcesDocument()
{
    delete _document;
}

/// <summary> Saves the given CMM list to the QIF document. </summary>
/// <param name="cmmParameters"> CMM to save </param>
/// <returns> True in case of success, otherwise false </returns>
bool QifResourcesDocument::Save(IEnumerable<Qif::CmmParameters^>^ cmmParameters)
{
    using namespace std;

    // Create our native list of CmmParameters
    vector<unique_ptr<qifbase::CmmParameters> > nativeCmmParameters;
    if(cmmParameters != nullptr)
    {
        for each(auto cmm in cmmParameters)
        {
            unique_ptr<qifbase::CmmParameters> nativeCmm(new qifbase::CmmParameters(*(cmm->InternalData)));
            nativeCmmParameters.push_back(std::move(nativeCmm));
        }
    }

    // Call the underlying method
    return _document->Save(nativeCmmParameters);
}

/// <summary> Loads a list of CMMs from the QIF document. </summary>
/// <returns> List of loaded CMMs in case of success, otherwise null </returns>
IReadOnlyList<Qif::CmmParameters^>^ QifResourcesDocument::Load()
{
    using namespace std;

    // Call the underlying method
    vector<unique_ptr<qifbase::CmmParameters> > nativeCmmList;
    bool result = _document->Load(nativeCmmList);
    if(result == false)
        return nullptr;

    // Build up our list of CmmParameter^
    auto cmmList = gcnew List<Qif::CmmParameters^>();
    for(size_t i = 0; i < nativeCmmList.size(); i++)
    {
        qifbase::CmmParameters* ptr = nativeCmmList[i].release();
        cmmList->Add(gcnew Qif::CmmParameters(ptr));
    }
    return cmmList;
}

/// <summary> Gets error list. </summary>
IReadOnlyList<String^>^ QifResourcesDocument::ErrorList::get()
{
    List<String^>^ list = gcnew List<String^>();
    for(std::vector<std::wstring>::const_iterator it = _document->ErrorList().begin(); it != _document->ErrorList().end(); it++)
        list->Add(gcnew String((*it).c_str()));
    return list;
}

/// <summary> Gets error detail list. </summary>
IReadOnlyList<String^>^ QifResourcesDocument::ErrorDetailsList::get()
{
    List<String^>^ list = gcnew List<String^>();
    for(std::vector<std::wstring>::const_iterator it = _document->ErrorDetailsList().begin(); it != _document->ErrorDetailsList().end(); it++)
        list->Add(gcnew String((*it).c_str()));
    return list;
}

/// <summary> Gets warning list. </summary>
IReadOnlyList<String^>^ QifResourcesDocument::WarningList::get()
{
    List<String^>^ list = gcnew List<String^>();
    for(std::vector<std::wstring>::const_iterator it = _document->WarningList().begin(); it != _document->WarningList().end(); it++)
        list->Add(gcnew String((*it).c_str()));
    return list;
}

/// <summary> Gets warning detail list. </summary>
IReadOnlyList<String^>^ QifResourcesDocument::WarningDetailsList::get()
{
    List<String^>^ list = gcnew List<String^>();
    for(std::vector<std::wstring>::const_iterator it = _document->WarningDetailsList().begin(); it != _document->WarningDetailsList().end(); it++)
        list->Add(gcnew String((*it).c_str()));
    return list;
}
}
