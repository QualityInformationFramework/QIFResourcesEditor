///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once
#include <qifbase/Data/CmmErrorB89.h>

namespace Qif
{
public ref class CmmErrorB89
{
public:

    // Default Constructor
    CmmErrorB89();

    // Copy Constructor
    CmmErrorB89(CmmErrorB89^ other);

    // Copy Constructor
    CmmErrorB89(const qifbase::CmmErrorB89& other);

    // Constructor
    CmmErrorB89(double xLinearAccuracy, double yLinearAccuracy, double zLinearAccuracy, double volumetricPerformance, double offsetVolumetricPerformance, double repeatability);

    // Finalizer & Destructor
    ~CmmErrorB89() { this->!CmmErrorB89(); }
    !CmmErrorB89();

    // BAngleAdjustment
    property double XLinearAccuracy{ double get() { return _data->XLinearAccuracy(); } void set(double value) { _data->XLinearAccuracy(value); } }

    // BAngleAdjustment
    property double YLinearAccuracy{ double get() { return _data->YLinearAccuracy(); } void set(double value) { _data->YLinearAccuracy(value); } }

    // BAngleAdjustment
    property double ZLinearAccuracy{ double get() { return _data->ZLinearAccuracy(); } void set(double value) { _data->ZLinearAccuracy(value); } }

    // BAngleAdjustment
    property double VolumetricPerformance{ double get() { return _data->VolumetricPerformance(); } void set(double value) { _data->VolumetricPerformance(value); } }

    // BAngleAdjustment
    property double OffsetVolumetricPerformance{ double get() { return _data->OffsetVolumetricPerformance(); } void set(double value) { _data->OffsetVolumetricPerformance(value); } }

    // BAngleAdjustment
    property double Repeatability{ double get() { return _data->Repeatability(); } void set(double value) { _data->Repeatability(value); } }

    // Pointer to the internal data
    property qifbase::CmmErrorB89* InternalData { qifbase::CmmErrorB89* get() { return _data; } }

    // Equals override
    virtual bool Equals(Object^ o) override;

private:
    // core unmanaged object
    qifbase::CmmErrorB89* _data;
};
}
