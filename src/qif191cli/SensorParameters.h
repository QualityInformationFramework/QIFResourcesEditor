///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once
#include "SensorPerformanceTest.h"
#include "SensorTechnology.h"
#include "SensorType.h"
#include "Units.h"
#include <qifbase/Data/SensorParameters.h>

using System::String;
using System::Collections::Generic::IReadOnlyList;

namespace Qif
{

/// <summary> Represents a sensor. </summary>
public ref class SensorParameters
{
public:
    // Constructor
    SensorParameters(qifbase::SensorParameters* sensorParameters);

    // "Copy" Constructor
    SensorParameters(SensorParameters^ sensorParameters);

    // Finalizer & Destructor
    ~SensorParameters() { this->!SensorParameters(); }
    !SensorParameters();

    // Creates a new, default SensorParameters object, including a new underlying native object.
    static SensorParameters^ CreateNewSensorParameters();

    // Creates a new CmmParameters object, including a new underlying native object, based on the given CmmParameters
    static SensorParameters^ CreateNewSensorParameters(SensorParameters^ copyFrom);

    // Calls delete on the native data that this class wraps. We don't rely on GC for this layer
    void DeleteNativeData();

    // Override. Gets hash code
    int GetHashCode() override;

private:
    // Default Constructor. Private: call CreateNewSensorParameters() instead.
    SensorParameters();

    // "Copy" constructor. Copies underlying value as well. Private: call CreateNewSensorParameters() instead.
    SensorParameters(const qifbase::SensorParameters& sensorParameters);

public:

    // Name
    property String^ Name
    {
        String^ get();
        void set(String^ value);
    }

    // Type
    property SensorType Type
    {
        SensorType get() { return (SensorType)_data->Type(); }
        void set(SensorType value) { _data->Type((qifbase::SensorType)value); }
    }

    // Technology
    property SensorTechnology Technology
    {
        SensorTechnology get() { return (SensorTechnology)_data->Technology(); }
        void set(SensorTechnology value) { _data->Technology((qifbase::SensorTechnology)value); }
    }

    // Active Performance Test
    property SensorPerformanceTest ActivePerformanceTest
    {
        SensorPerformanceTest get() { return (SensorPerformanceTest)_data->ActivePerformanceTest(); }
        void set(SensorPerformanceTest value) { _data->ActivePerformanceTest((qifbase::SensorPerformanceTest)value); }
    }

    // ISO 10360 Performance Test
    property IReadOnlyList<double>^ PerformanceTestIso10360
    {
        IReadOnlyList<double>^ get();
        void set(IReadOnlyList<double>^ value);
    }

    // ASME B89 Performance Test
    property IReadOnlyList<double>^ PerformanceTestB89
    {
        IReadOnlyList<double>^ get();
        void set(IReadOnlyList<double>^ value);
    }

    // VDI/VDE Performance Test
    property IReadOnlyList<double>^ PerformanceTestVdiVde
    {
        IReadOnlyList<double>^ get();
        void set(IReadOnlyList<double>^ value);
    }

    // Specified Standard Deviation Performance Test
    property IReadOnlyList<double>^ PerformanceTestSpecifiedStandardDeviation
    {
        IReadOnlyList<double>^ get();
        void set(IReadOnlyList<double>^ value);
    }

    // Stylus Lengths
    property IReadOnlyList<double>^ StylusLengths
    {
        IReadOnlyList<double>^ get();
        void set(IReadOnlyList<double>^ value);
    }

    // Extension Length
    property double ExtensionLength
    {
        double get() { return _data->ExtensionLength(); }
        void set(double value) { _data->ExtensionLength(value); }
    }

    // A Angle
    property double AAngle
    {
        double get() { return _data->AAngle(); }
        void set(double value) { _data->AAngle(value); }
    }

    // B Angle
    property double BAngle
    {
        double get() { return _data->BAngle(); }
        void set(double value) { _data->BAngle(value); }
    }

    // B Angle Adjustment
    property double BAngleAdjustment
    {
        double get() { return _data->BAngleAdjustment(); }
        void set(double value) { _data->BAngleAdjustment(value); }
    }

    // Pointer to the internal data
    property qifbase::SensorParameters* InternalData { qifbase::SensorParameters* get() { return _data; } }

    // Gets the description for this probe in the given units.
    String^ GetDescription(Units units);

    // Equals override
    bool Equals(Object^ o) override;

    // ToString override
    String^ ToString() override;

    // Indicates checks pointer equality of the internal fields
    bool ReferenceEquality(SensorParameters^ other) { return _data == other->_data; }

protected:
    // core unmanaged object
    qifbase::SensorParameters* _data;
};
}
