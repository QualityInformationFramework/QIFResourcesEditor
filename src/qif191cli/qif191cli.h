// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once
#include <vector>

using System::Collections::Generic::IReadOnlyList;
using System::Collections::Generic::List;
using System::Collections::Generic::IEnumerable;

/// <summary> Converts unmanaged vector of doubles to managed list of doubles. </summary>
/// <param name="data"> Vector to convert </param>
/// <returns> Converter list </returns>
inline IReadOnlyList<double>^ ToDoubleList(const std::vector<double>& data)
{
    List<double>^ retval = gcnew List<double>();
    for(std::vector<double>::const_iterator it = data.begin(); it != data.end(); it++)
        retval->Add(*it);
    return retval;
}

/// <summary> Converts managed list of doubles to unmanaged vector.  </summary>
/// <param name="data"> Data to convert </param>
/// <param name="result"> Converted data </param>
inline void ToDoubleVector(IEnumerable<double>^ data, std::vector<double>& result)
{
    result.clear();
    if(data == nullptr)
        return;
    for each(double d in data)
        result.push_back(d);
}
