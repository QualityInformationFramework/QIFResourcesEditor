///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using Qif;

namespace MeasurementResourceEditor.MrdXml
{
    public class MrdXmlSaver
    {
        /// <summary>
        /// ===== MRD Version History =====
        /// 
        /// 0
        ///  Used for testing.
        /// 1
        ///  Initial release
        /// 2
        ///  Changes:
        ///     - Updated the ISO 10360 Artifact Position Values ToString to output exactly what the enumeration is, rather than
        ///       the elaborate scheme in version 1.
        ///     - Changed the "PerfectCmm" tag for ActivePerformanceTest to "None" to reflect what is in the enumeration
        ///     - Added "CmmType" to the CmmParameters class for the stacking order.
        ///     - Added "CmmAxisOrientation" to the CmmParameters class for the stacking order.
        ///     - Added A and B angles for fixed probes (multi and single tip)
        ///     - Added a B-Angle-adjustment value for Articulating heads
        /// </summary>
        private const int MRD_VERSION = 2;

        /// <summary> Constructor. </summary>
        public MrdXmlSaver()
        {
            _cmmBeingSaved = null;
            _probeBeingSaved = null;
            ErrorMessage = null;
        }

        /// <summary> The MRD Version that this Writer will create. </summary>
        public int MrdVersion => MRD_VERSION;

        /// <summary> The error message associated with the last call to Execute (if any error occurred, otherwise will be null). </summary>
        public string ErrorMessage { get; private set; }

        /// <summary>
        /// Saves the given list of CMMs and corresponding sensors to the given file.
        /// This will overwrite the file, if it exists.
        /// </summary>
        /// <param name="filename"> The path of the MRD file </param>
        /// <param name="data"> The CMM and Sensor data to be written </param>
        /// <returns>
        /// True if success, false if there was an error.
        /// If false, retrieve the error message by checking the Property "ErrorMessage"
        /// </returns>
        public bool SaveFile(string filename, List<CmmParameters> data)
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.IndentChars = "\t";

            // Try to write the file
            ErrorMessage = null;
            try
            {
                using (var writer = XmlWriter.Create(filename, settings))
                    WriteDocument(writer, data);
            }
            catch (Exception ex)
            {
                // Get the exception message 
                string exMessage = ex.Message;
                if (ex.InnerException != null)
                    exMessage += "\n" + ex.InnerException.Message;

                // Let the user know where we were.
                if (_cmmBeingSaved != null && _probeBeingSaved != null)
                    ErrorMessage = "Error writing sensor \"" + _probeBeingSaved + "\" assigned to CMM \"" + _cmmBeingSaved + "\"";
                else if (_cmmBeingSaved != null)
                    ErrorMessage = "Error writing CMM \"" + _cmmBeingSaved + "\"";
                else
                    ErrorMessage = "Error writing MRD";
                ErrorMessage += ":\n" + exMessage;
                return false;
            }

            return true;
        }

        /// <summary> Writes the data to the XML document using the given XmlWriter. </summary>
        /// <param name="writer"> XML writer </param>
        /// <param name="data"> CMMs to write </param>
        private void WriteDocument(XmlWriter writer, List<CmmParameters> data)
        {
            // Write the base XML node
            writer.WriteStartElement("Mrd");
            writer.WriteAttributeString("Version", MRD_VERSION.ToString());

            // Write out each CMM
            foreach (CmmParameters cmm in data)
            {
                // Open the "CMM" main tag
                writer.WriteStartElement("Cmm");

                // CMM Name
                writer.WriteElementString("Name", cmm.Name);
                _cmmBeingSaved = cmm.Name;

                // CMM Stacking Order
                writer.WriteElementString("Type", cmm.Type.ToString());
                writer.WriteElementString("AxisOrientationX", cmm.AxisOrientationX.ToString());
                writer.WriteElementString("AxisOrientationY", cmm.AxisOrientationY.ToString());
                writer.WriteElementString("AxisOrientationZ", cmm.AxisOrientationZ.ToString());

                // CMM Extents: Extents
                WriteCmmExtentsData(writer, cmm);

                // Environment Data
                WriteEnvironmentData(writer, cmm);

                // ActivePerformanceTest
                writer.WriteElementString("ActivePerformanceTest", cmm.ActivePerformanceTest.ToString());

                // B89 values
                WriteCmmB89Data(writer, cmm.B89Results);

                // ISO 10360 values
                WriteCmmIso10360Data(writer, cmm.Iso10360Results);

                // Load a Rotary Table, if it is there
                WriteCmmRotaryTableData(writer, cmm);

                // Write out each of the sensors in this CMM
                foreach (SensorParameters sensor in cmm.SensorParameterList)
                    WriteSensorData(writer, sensor);

                // Close the "CMM" main tag
                writer.WriteEndElement();
                _cmmBeingSaved = null;
            }

            // Close the base node
            writer.WriteEndElement();
        }

        /// <summary> Writes the CMM extents to the given XmlWriter. </summary>
        /// <param name="writer"> Writer </param>
        /// <param name="cmm"> CMM </param>
        private void WriteCmmExtentsData(XmlWriter writer, CmmParameters cmm)
        {
            // The Zero location
            writer.WriteStartElement("Zero");
            writer.WriteAttributeString("X", cmm.Zero[0].ToString());
            writer.WriteAttributeString("Y", cmm.Zero[1].ToString());
            writer.WriteAttributeString("Z", cmm.Zero[2].ToString());
            writer.WriteEndElement();

            // The maximum extents
            writer.WriteStartElement("Extents");
            writer.WriteAttributeString("X", cmm.Extents[0].ToString());
            writer.WriteAttributeString("Y", cmm.Extents[1].ToString());
            writer.WriteAttributeString("Z", cmm.Extents[2].ToString());
            writer.WriteEndElement();
        }

        /// <summary> Writes all the B89 data to a the given writer (if there is any b89 data). </summary>
        /// <param name="writer"> XML writer </param>
        /// <param name="data"> B89 performance test </param>
        private void WriteCmmB89Data(XmlWriter writer, CmmErrorB89 data)
        {
            // If there is no B89 data, then nothing to do here.
            if (data == null)
                return;

            // Open up a <B89> node, and write all the data, then close it.
            writer.WriteStartElement("B89");
            writer.WriteElementString("XLinearAccuracy", data.XLinearAccuracy.ToString());
            writer.WriteElementString("YLinearAccuracy", data.YLinearAccuracy.ToString());
            writer.WriteElementString("ZLinearAccuracy", data.ZLinearAccuracy.ToString());
            writer.WriteElementString("OffsetVolumetricPerformance", data.OffsetVolumetricPerformance.ToString());
            writer.WriteElementString("VolumetricPerformance", data.VolumetricPerformance.ToString());
            writer.WriteElementString("Repeatability", data.Repeatability.ToString());
            writer.WriteEndElement();
        }

        /// <summary> Writes all the CMM ISO 10360 data to the given writer (if there is any iso10360 data). </summary>
        /// <param name="writer"> XML writer </param>
        /// <param name="data"> ISO 10360 performance test </param>
        private void WriteCmmIso10360Data(XmlWriter writer, CmmErrorIso10360 data)
        {
            // If there is no B89 data, then nothing to do here.
            if (data == null)
                return;

            // Open up a Iso10360 node
            writer.WriteStartElement("Iso10360");

            // Artifact type and error of indication type
            writer.WriteElementString("ArtifactType", data.Artifact.ToString());
            writer.WriteElementString("ErrorOfIndicationType", data.ErrorOfIndicationType.ToString());

            // Error of indication values.
            string errorOfInidcationValueString;
            switch (data.ErrorOfIndicationType)
            {
                case CmmErrorIso10360.ErrorType.OneValue:
                    errorOfInidcationValueString = data.ErrorOfIndicationValue1.ToString();
                    break;
                case CmmErrorIso10360.ErrorType.TwoValues:
                    errorOfInidcationValueString = data.ErrorOfIndicationValue1.ToString() + " " + data.ErrorOfIndicationValue2.ToString();
                    break;
                case CmmErrorIso10360.ErrorType.ThreeValues:
                    errorOfInidcationValueString = data.ErrorOfIndicationValue1.ToString() + " " + data.ErrorOfIndicationValue2.ToString() + " " + data.ErrorOfIndicationValue3.ToString();
                    break;
                default:
                    throw new InvalidOperationException();
            }
            writer.WriteElementString("ErrorOfIndication", errorOfInidcationValueString);

            // Artifact positions
            for (int i = 0; i < data.ArtifactPositionCount; i++)
            {
                writer.WriteStartElement("ArtifactPosition");
                CmmErrorIso10360.ArtifactPosition position = data.ArtifactPositionValue(i);
                CmmErrorIso10360.GageBlockStacking stacking = data.GageBlockStackingValue(i);
                writer.WriteElementString("Position", position.ToString());
                writer.WriteElementString("StackingOrder", stacking.ToString());
                writer.WriteEndElement();
            }

            // Close the Iso10360 node
            writer.WriteEndElement();
        }

        /// <summary> Writes all the CMM rotary table data (if there is one). </summary>
        /// <param name="writer"> XML writer  </param>
        /// <param name="cmm"> CMM </param>
        private void WriteCmmRotaryTableData(XmlWriter writer, CmmParameters cmm)
        {
            // If this CMM doesn't have a rotary table, then just return w/o doing anything.
            if (!cmm.HasRotaryTable)
                return;

            // Open up a Rotary Table tag
            writer.WriteStartElement("RotaryTable");

            // Radius
            writer.WriteElementString("Radius", cmm.RotaryTableRadius.ToString());

            // X, Y and Z Origin
            writer.WriteStartElement("Origin");
            writer.WriteAttributeString("X", cmm.RotaryTableXOrigin.ToString());
            writer.WriteAttributeString("Y", cmm.RotaryTableYOrigin.ToString());
            writer.WriteAttributeString("Z", cmm.RotaryTableZOrigin.ToString());
            writer.WriteEndElement();

            // Axis X, Y and Z Direction
            writer.WriteStartElement("AxisDirection");
            writer.WriteAttributeString("X", cmm.RotaryTableAxisDirection[0].ToString());
            writer.WriteAttributeString("Y", cmm.RotaryTableAxisDirection[1].ToString());
            writer.WriteAttributeString("Z", cmm.RotaryTableAxisDirection[2].ToString());
            writer.WriteEndElement();

            // Zero Index Direction in X, Y and Z
            writer.WriteStartElement("ZeroIndexDirection");
            writer.WriteAttributeString("X", cmm.RotaryTableZeroIndexDirection[0].ToString());
            writer.WriteAttributeString("Y", cmm.RotaryTableZeroIndexDirection[1].ToString());
            writer.WriteAttributeString("Z", cmm.RotaryTableZeroIndexDirection[2].ToString());
            writer.WriteEndElement();

            // Axial, Radial, and Tangential Error Values
            writer.WriteStartElement("Error");
            writer.WriteAttributeString("Axial", cmm.RotaryTableAxialError.ToString());
            writer.WriteAttributeString("Radial", cmm.RotaryTableRadialError.ToString());
            writer.WriteAttributeString("Tangential", cmm.RotaryTableTangentialError.ToString());
            writer.WriteEndElement();

            // Close the Rotary Table tag
            writer.WriteEndElement();
        }

        /// <summary> Writes all the environment related data to the XML writer. </summary>
        /// <param name="writer"> XML writer </param>
        /// <param name="cmm"> CMM </param>
        private void WriteEnvironmentData(XmlWriter writer, CmmParameters cmm)
        {
            // CMM Scales type
            writer.WriteElementString("CmmScales", cmm.CmmScales.ToString());

            // Depending on which type of CMM Scales we are using, there are two different sets of data to be written
            if (cmm.CmmScales == CmmScalesType.Standard)
            {
                writer.WriteElementString("CmmTemperature", cmm.CmmTemperature.ToString());
                writer.WriteElementString("CmmTemperatureUncertainty", cmm.CmmTemperatureUncertainty.ToString());
                writer.WriteElementString("CmmExpansionCoefficient", cmm.CmmExpansionCoefficient.ToString());
                writer.WriteElementString("CmmExpansionCoefficientUncertainty", cmm.CmmExpansionCoefficientUncertainty.ToString());
            }
            else if (cmm.CmmScales == CmmScalesType.Laser)
            {
                writer.WriteElementString("CmmLaserAirTemperature", cmm.CmmLaserAirTemperature.ToString());
                writer.WriteElementString("CmmLaserAirTemperatureUncertainty", cmm.CmmLaserAirTemperatureUncertainty.ToString());
                writer.WriteElementString("CmmLaserAirPressure", cmm.CmmLaserAirPressure.ToString());
                writer.WriteElementString("CmmLaserAirPressureUncertainty", cmm.CmmLaserAirPressureUncertainty.ToString());
                writer.WriteElementString("CmmLaserAirHumidity", cmm.CmmLaserAirHumidity.ToString());
                writer.WriteElementString("CmmLaserAirHumidityUncertainty", cmm.CmmLaserAirHumidityUncertainty.ToString());
            }
            else throw new InvalidOperationException();

            // Write out the software compensation type
            writer.WriteElementString("CmmSoftwareCompensation", cmm.CmmSoftwareCompensation.ToString());
        }
        
        /// <summary> Writes the given Sensor as an XML element in the current location in the given XmlWriter. </summary>
        /// <param name="writer"> XML writer </param>
        /// <param name="sensor"> Sensor to write </param>
        private void WriteSensorData(XmlWriter writer, SensorParameters sensor)
        {
            // Open the "Sensor" main tag
            writer.WriteStartElement("Sensor");

            // Name
            writer.WriteElementString("Name", sensor.Name);
            _probeBeingSaved = sensor.Name;

            // Sensor Type
            writer.WriteElementString("SensorType", sensor.Type.ToString());

            // Sensor Technology
            writer.WriteElementString("SensorTechnology", sensor.Technology.ToString());

            // Active Performance Type
            if (sensor.ActivePerformanceTest != SensorPerformanceTest.None && !SensorPerformanceTestHasData(sensor, sensor.ActivePerformanceTest))
                throw new InvalidOperationException("sensor.ActivePerformanceTest has no data");
            writer.WriteElementString("ActivePerformanceTest", sensor.ActivePerformanceTest.ToString());

            // ISO10360 performance test data, if any
            if (SensorPerformanceTestHasData(sensor, SensorPerformanceTest.Iso10360))
            {
                string data = "";
                foreach (double d in sensor.PerformanceTestIso10360)
                    data += d + "   ";
                writer.WriteElementString("Iso10360", data);
            }

            // B89 performance test data, if any
            if (SensorPerformanceTestHasData(sensor, SensorPerformanceTest.B89))
            {
                string data = "";
                foreach (double d in sensor.PerformanceTestB89)
                    data += d + "   ";
                writer.WriteElementString("B89", data);
            }

            // VDI/VDE performance test data, if any
            if (SensorPerformanceTestHasData(sensor, SensorPerformanceTest.VdiVde))
            {
                string data = "";
                foreach (double d in sensor.PerformanceTestVdiVde)
                    data += d + "   ";
                writer.WriteElementString("VdiVde", data);
            }

            // Specified Standard Deviation performance test data, if any
            if (SensorPerformanceTestHasData(sensor, SensorPerformanceTest.SpecifiedStandardDeviation))
            {
                string data = "";
                foreach (double d in sensor.PerformanceTestSpecifiedStandardDeviation)
                    data += d + "   ";
                writer.WriteElementString("SpecifiedStandardDeviation", data);
            }

            // Probe orientation stuff
            if (sensor.Type == SensorType.SingleTipArticulated)
                writer.WriteElementString("BAngleAdjustment", sensor.BAngleAdjustment.ToString());
            else
            {
                writer.WriteElementString("AAngle", sensor.AAngle.ToString());
                writer.WriteElementString("BAngle", sensor.BAngle.ToString());
            }

            // Stylus Definitions
            writer.WriteStartElement("StylusDefinitions");
            if ((sensor.Type == SensorType.MultiTipFixed && sensor.StylusLengths.Count != 5) ||
                ((sensor.Type == SensorType.SingleTipArticulated || sensor.Type == SensorType.SingleTipFixed) && sensor.StylusLengths.Count != 1))
                throw new InvalidOperationException(); // make sure that there are the right numbers of stylii
            foreach (double d in sensor.StylusLengths)
            {
                writer.WriteStartElement("Stylus");
                writer.WriteAttributeString("Length", d.ToString());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();

            // Extension length
            writer.WriteStartElement("Extension");
            writer.WriteAttributeString("Length", sensor.ExtensionLength.ToString());
            writer.WriteEndElement();

            // Close the "Sensor" main tag
            writer.WriteEndElement();
            _probeBeingSaved = null;
        }

        /// <summary> Determines if the given SensorPerformanceTest type is contained in the given SensorParameters. </summary>
        /// <param name="sensor"> Sensor to check </param>
        /// <param name="test"> Performance test type </param>
        /// <returns> True if the sensor has the performance test of the specified type, otherwise false </returns>
        private bool SensorPerformanceTestHasData(SensorParameters sensor, SensorPerformanceTest test)
        {
            // Get the performance test data that would be associated with this type
            IReadOnlyList<double> performanceTest = null;
            switch (test)
            {
                case SensorPerformanceTest.Iso10360:
                    performanceTest = sensor.PerformanceTestIso10360;
                    break;
                case SensorPerformanceTest.B89:
                    performanceTest = sensor.PerformanceTestB89;
                    break;
                case SensorPerformanceTest.VdiVde:
                    performanceTest = sensor.PerformanceTestVdiVde;
                    break;
                case SensorPerformanceTest.SpecifiedStandardDeviation:
                    performanceTest = sensor.PerformanceTestSpecifiedStandardDeviation;
                    break;
            }

            // See if it has any data
            if (performanceTest != null && performanceTest.Count > 0)
                return true;

            return false;
        }

        /// <summary> Name of the CMM being saved. </summary>
        private string _cmmBeingSaved;
        /// <summary> Name of the sensor being saved. </summary>
        private string _probeBeingSaved;
    }
}
