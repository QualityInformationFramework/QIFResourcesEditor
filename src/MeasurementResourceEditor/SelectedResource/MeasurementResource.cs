///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia and QIF Resources contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Diagnostics;

using MeasurementResourceEditor.MrdXml;
using Qif_1_9_1;
using Qif;

namespace MeasurementResourceEditor
{
    /// <summary> The ViewModel for a measurement resource, which will either be a CmmParameters or SensorParameters object. </summary>
    public class MeasurementResource : INotifyPropertyChanged
    {
        #region Constructor

        /// <summary> Constructs a new SelectedResource object from the given CmmParameters. </summary>
        /// <param name="cmm"> CMM parameters </param>
        public MeasurementResource(CmmParameters cmm)
        {
            Sensor = null;
            Cmm = cmm;
            if (Cmm.B89Results == null)
                Cmm.B89Results = new CmmErrorB89(0, 0, 0, 0, 0, 0);
            if (Cmm.Iso10360Results == null)
                Cmm.Iso10360Results = new CmmErrorIso10360();

            _cmmAxisOrientationModified1 = 2;
            _cmmAxisOrientationModified2 = 1;
        }

        /// <summary> Constructs a new SelectedResource object from the given SensorParameters. </summary>
        /// <param name="sensor"> Sensor </param>
        /// <param name="owningCmm"> Owning CMM </param>
        public MeasurementResource(SensorParameters sensor, CmmParameters owningCmm)
        {
            // Set the _cmm value to the owning CMM
            Cmm = owningCmm;
            Sensor = sensor;

            _cmmAxisOrientationModified1 = 2;
            _cmmAxisOrientationModified2 = 1;
        }
        #endregion

        #region INotifyPropertyChanged implementation

        /// <summary> Calls the Event Handler for the PropertyChanged event with the given property name. </summary>
        /// <param name="propertyName"> Changed property name </param>
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        /// <summary> Occurs when a property value changes. </summary>
        public event PropertyChangedEventHandler PropertyChanged;
        #endregion

        #region Properties: General

        /// <summary> Determines if this resource is a CMM. </summary>
        public bool IsCmm => Sensor == null;

        /// <summary> Determines if this resource is a Sensor. </summary>
        public bool IsSensor => Sensor != null;

        /// <summary> Gets the name of this resource. </summary>
        public string Name
        {
            get
            {
                if (IsCmm)
                    return Cmm.Name;
                else
                    return Sensor.Name;
            }
            set
            {
                if (IsCmm)
                    Cmm.Name = value;
                else
                    Sensor.Name = value;
                OnPropertyChanged("Name");

                // Make sure the MRDs tree is updated as well.
                RoutedCommands.UpdateTreeViewNodeNames.Execute(this, null);
            }
        }

        /// <summary> Either the CmmParameters object or the SensorParameters object. </summary>
        public object Data
        {
            get
            {
                if (IsCmm)
                    return Cmm;
                else
                    return Sensor;
            }
        }
        #endregion

        #region Properties: CMM General Values

        /// <summary>
        /// Returns the CMM associated with this object. Will either be the CMM represented by this object, or, in the case
        /// of a Sensor, the owning CMM.
        /// </summary>
        public CmmParameters Cmm { get; }

        /// <summary> The performance test that will be used to characterize this sensor. </summary>
        public CmmPerformanceTest ActiveCmmPerformanceTest
        {
            get
            {
                return Cmm.ActivePerformanceTest;
            }
            set
            {
                Cmm.ActivePerformanceTest = value;
                OnPropertyChanged("ActiveCmmPerformanceTest");
                OnPropertyChanged("IsCmmB89Visible");
                OnPropertyChanged("IsCmmIso10360Visible");
            }
        }

        /// <summary> Determines if the B89 Data group-box should be visible. </summary>
        public bool IsCmmB89Visible => ActiveCmmPerformanceTest == CmmPerformanceTest.B89;

        /// <summary> Determines if the Iso10360 Data group-box should be visible. </summary>
        public bool IsCmmIso10360Visible => ActiveCmmPerformanceTest == CmmPerformanceTest.Iso10360;

        /// <summary> Gets or sets the minimum extents in X of the CMM volume. </summary>
        public double CmmExtentsMinX
        {
            get { return Cmm.Zero[0]; }
            set
            {
                List<double> list = new List<double>(Cmm.Zero) { [0] = value };
                Cmm.Zero = list;
                OnPropertyChanged("CmmExtentsMinX");
            }
        }

        /// <summary> Gets or sets the minimum extents in Y of the CMM volume. </summary>
        public double CmmExtentsMinY
        {
            get { return Cmm.Zero[1]; }
            set
            {
                List<double> list = new List<double>(Cmm.Zero) { [1] = value };
                Cmm.Zero = list;
                OnPropertyChanged("CmmExtentsMinY");
            }
        }

        /// <summary> Gets or sets the minimum extents in Z of the CMM volume. </summary>
        public double CmmExtentsMinZ
        {
            get { return Cmm.Zero[2]; }
            set
            {
                List<double> list = new List<double>(Cmm.Zero) { [2] = value };
                Cmm.Zero = list;
                OnPropertyChanged("CmmExtentsMinZ");
            }
        }

        /// <summary> Gets or sets the maximum extents in X of the CMM volume. </summary>
        public double CmmExtentsMaxX
        {
            get { return Cmm.Extents[0]; }
            set
            {
                List<double> list = new List<double>(Cmm.Extents) { [0] = value };
                Cmm.Extents = list;
                OnPropertyChanged("CmmExtentsMaxX");
            }
        }

        /// <summary> Gets or sets the maximum extents in Y of the CMM volume. </summary>
        public double CmmExtentsMaxY
        {
            get { return Cmm.Extents[1]; }
            set
            {
                List<double> list = new List<double>(Cmm.Extents) { [1] = value };
                Cmm.Extents = list;
                OnPropertyChanged("CmmExtentsMaxY");
            }
        }

        /// <summary> Gets or sets the maximum extents in Z of the CMM volume. </summary>
        public double CmmExtentsMaxZ
        {
            get { return Cmm.Extents[2]; }
            set
            {
                List<double> list = new List<double>(Cmm.Extents) { [2] = value };
                Cmm.Extents = list;
                OnPropertyChanged("CmmExtentsMaxZ");
            }
        }

        /// <summary> Gets the list of possible CMM Axis Orientations for the a combo box. </summary>
        public List<string> CmmAxisOrientationList => new List<string>() { "+ A", "+ B", "+ C", "- A", "- B", "- C" };

        /// <summary> Gets or sets the selected index for the X CMM Axis orientation. </summary>
        public int SelectedCmmAxisOrientationX
        {
            get { return (int)Cmm.AxisOrientationX; }
            set
            {
                SetCmmAxisOrientation(0, value);
                SetAllCmmAxisOrientations(0);
            }
        }

        /// <summary> Gets or sets the selected index for the Y CMM Axis orientation. </summary>
        public int SelectedCmmAxisOrientationY
        {
            get { return (int)Cmm.AxisOrientationY; }
            set
            {
                SetCmmAxisOrientation(1, value);
                SetAllCmmAxisOrientations(1);
            }
        }

        /// <summary> Gets or sets the selected index for the Z CMM Axis orientation. </summary>
        public int SelectedCmmAxisOrientationZ
        {
            get { return (int)Cmm.AxisOrientationZ; }
            set
            {
                SetCmmAxisOrientation(2, value);
                SetAllCmmAxisOrientations(2);
            }
        }
        #endregion

        #region Properties: CMM Environment Values

        /// <summary> Gets or sets the type of CMM scales. </summary>
        public CmmScalesType CmmScales
        {
            get { return Cmm.CmmScales; }
            set
            {
                Cmm.CmmScales = value;
                OnPropertyChanged("CmmScales");
                OnPropertyChanged("IsCmmStandardEnvironmentDataVisible");
                OnPropertyChanged("IsCmmLaserEnvironmentDataVisible");
            }
        }

        /// <summary> Determines if the Standard Scales aspect of the environment data is visible. </summary>
        public bool IsCmmStandardEnvironmentDataVisible
        {
            get
            {
                if (CmmScales == CmmScalesType.Standard)
                    return true;
                return false;
            }
        }

        /// <summary> Determines if the Laser Scales aspect of the environment data is visible. </summary>
        public bool IsCmmLaserEnvironmentDataVisible
        {
            get
            {
                if (CmmScales == CmmScalesType.Laser)
                    return true;
                return false;
            }
        }

        /// <summary> The type of temperature compensation used by the CMM software. </summary>
        public CmmSoftwareCompensationType CmmSoftwareCompensation
        {
            get { return Cmm.CmmSoftwareCompensation; }
            set
            {
                Cmm.CmmSoftwareCompensation = value;
                OnPropertyChanged("CmmSoftwareCompensation");
            }
        }

        /// <summary> The expansion coefficient for the CMM scales (standard scales). </summary>
        public double CmmExpansionCoefficient
        {
            get { return Cmm.CmmExpansionCoefficient; }
            set
            {
                Cmm.CmmExpansionCoefficient = value;
                OnPropertyChanged("CmmExpansionCoefficient");
            }
        }

        /// <summary> The expansion coefficient uncertainty for the CMM scales (standard scales). </summary>
        public double CmmExpansionCoefficientUncertainty
        {
            get { return Cmm.CmmExpansionCoefficientUncertainty; }
            set
            {
                Cmm.CmmExpansionCoefficientUncertainty = value;
                OnPropertyChanged("CmmExpansionCoefficientUncertainty");
            }
        }

        /// <summary> Gets or sets the temperature for the CMM scales (standard scales). </summary>
        public double CmmTemperature
        {
            get { return Cmm.CmmTemperature; }
            set
            {
                Cmm.CmmTemperature = value;
                OnPropertyChanged("CmmTemperature");
            }
        }

        /// <summary> Gets or sets the temperature uncertainty for the CMM scales (standard scales). </summary>
        public double CmmTemperatureUncertainty
        {
            get { return Cmm.CmmTemperatureUncertainty; }
            set
            {
                Cmm.CmmTemperatureUncertainty = value;
                OnPropertyChanged("CmmTemperatureUncertainty");
            }
        }

        /// <summary> Gets or sets the air pressure for the CMM scales (laser scales). </summary>
        public double CmmLaserAirPressure
        {
            get { return Cmm.CmmLaserAirPressure; }
            set
            {
                Cmm.CmmLaserAirPressure = value;
                OnPropertyChanged("CmmLaserAirPressure");
            }
        }

        /// <summary> Gets or sets the air pressure uncertainty for the CMM scales (laser scales). </summary>
        public double CmmLaserAirPressureUncertainty
        {
            get { return Cmm.CmmLaserAirPressureUncertainty; }
            set
            {
                Cmm.CmmLaserAirPressureUncertainty = value;
                OnPropertyChanged("CmmLaserAirPressureUncertainty");
            }
        }

        /// <summary> Gets or sets the air humidity for the CMM scales (laser scales). </summary>
        public double CmmLaserAirHumidity
        {
            get { return Cmm.CmmLaserAirHumidity; }
            set
            {
                Cmm.CmmLaserAirHumidity = value;
                OnPropertyChanged("CmmLaserAirHumidity");
            }
        }

        /// <summary> Gets or sets the air humidity unc. for the CMM scales (laser scales). </summary>
        public double CmmLaserAirHumidityUncertainty
        {
            get { return Cmm.CmmLaserAirHumidityUncertainty; }
            set
            {
                Cmm.CmmLaserAirHumidityUncertainty = value;
                OnPropertyChanged("CmmLaserAirHumidityUncertainty");
            }
        }

        /// <summary> Gets or sets the air temp for the CMM scales (laser scales). </summary>
        public double CmmLaserAirTemperature
        {
            get { return Cmm.CmmLaserAirTemperature; }
            set
            {
                Cmm.CmmLaserAirTemperature = value;
                OnPropertyChanged("CmmLaserAirTemperature");
            }
        }

        /// <summary> Gets or sets the air temp unc. for the CMM scales (laser scales). </summary>
        public double CmmLaserAirTemperatureUncertainty
        {
            get { return Cmm.CmmLaserAirTemperatureUncertainty; }
            set
            {
                Cmm.CmmLaserAirTemperatureUncertainty = value;
                OnPropertyChanged("CmmLaserAirTemperatureUncertainty");
            }
        }
        #endregion

        #region Properties: CMM B89 Values

        /// <summary> Gets or sets the X Linear Accuracy value for the CMM's B89 Performance Test. </summary>
        public double CmmB89LinearX
        {
            get
            {
                return Cmm.B89Results.XLinearAccuracy;
            }
            set
            {
                CmmErrorB89 test = Cmm.B89Results;
                test.XLinearAccuracy = value;
                Cmm.B89Results = test;
                OnPropertyChanged("CmmB89LinearX");
            }
        }

        /// <summary> Gets or sets the Y Linear Accuracy value for the CMM's B89 Performance Test. </summary>
        public double CmmB89LinearY
        {
            get
            {
                return Cmm.B89Results.YLinearAccuracy;
            }
            set
            {
                CmmErrorB89 test = Cmm.B89Results;
                test.YLinearAccuracy = value;
                Cmm.B89Results = test;
                OnPropertyChanged("CmmB89LinearY");
            }
        }

        /// <summary> Gets or sets the Z Linear Accuracy value for the CMM's B89 Performance Test. </summary>
        public double CmmB89LinearZ
        {
            get
            {
                return Cmm.B89Results.ZLinearAccuracy;
            }
            set
            {
                CmmErrorB89 test = Cmm.B89Results;
                test.ZLinearAccuracy = value;
                Cmm.B89Results = test;
                OnPropertyChanged("CmmB89LinearZ");
            }
        }

        /// <summary> Gets or sets the Volumetric Performance value for the CMM's B89 Performance Test. </summary>
        public double CmmB89Volumetric
        {
            get
            {
                return Cmm.B89Results.VolumetricPerformance;
            }
            set
            {
                CmmErrorB89 test = Cmm.B89Results;
                test.VolumetricPerformance = value;
                Cmm.B89Results = test;
                OnPropertyChanged("CmmB89Volumetric");
            }
        }

        /// <summary> Gets or sets the Offset Volumetric Performance value for the CMM's B89 Performance Test. </summary>
        public double CmmB89OffsetVolumetric
        {
            get
            {
                return Cmm.B89Results.OffsetVolumetricPerformance;
            }
            set
            {
                CmmErrorB89 test = Cmm.B89Results;
                test.OffsetVolumetricPerformance = value;
                Cmm.B89Results = test;
                OnPropertyChanged("CmmB89OffsetVolumetric");
            }
        }

        /// <summary> Gets or sets the Repeatability value for the CMM's B89 Performance Test. </summary>
        public double CmmB89Repeatability
        {
            get
            {
                return Cmm.B89Results.Repeatability;
            }
            set
            {
                CmmErrorB89 test = Cmm.B89Results;
                test.Repeatability = value;
                Cmm.B89Results = test;
                OnPropertyChanged("CmmB89Repeatability");
            }
        }
        #endregion

        #region Properties: CMM ISO10360 Values

        /// <summary> Gets or sets the Error of Indication specification type. </summary>
        public CmmErrorIso10360.ErrorType CmmIsoErrorOfIndicationType
        {
            get { return Cmm.Iso10360Results.ErrorOfIndicationType; }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ErrorOfIndicationType = value;
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmIsoErrorOfIndicationType");
            }
        }

        /// <summary> Gets or sets the first value in the error of indication values. </summary>
        public double CmmIsoErrorValue1
        {
            get { return Cmm.Iso10360Results.ErrorOfIndicationValue1; }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ErrorOfIndicationValue1 = value;
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmIsoErrorValue1");
            }
        }

        /// <summary> Gets or sets the second value in the error of indication values. </summary>
        public double CmmIsoErrorValue2
        {
            get { return Cmm.Iso10360Results.ErrorOfIndicationValue2; }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ErrorOfIndicationValue2 = value;
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmIsoErrorValue2");
            }
        }

        /// <summary> Gets or sets the third value in the error of indication values. </summary>
        public double CmmIsoErrorValue3
        {
            get { return Cmm.Iso10360Results.ErrorOfIndicationValue3; }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ErrorOfIndicationValue3 = value;
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmIsoErrorValue3");
            }
        }

        /// <summary> Gets or sets the type of artifact used for the ISO 10360 test. </summary>
        public CmmErrorIso10360.ArtifactType CmmErrorIsoArtifactType
        {
            get { return Cmm.Iso10360Results.Artifact; }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.Artifact = value;
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoArtifactType");
            }
        }

        /// <summary> Gets the list of all the values in the CmmErrorIso10360.ArtifactPosition enumeration. </summary>
        public List<ArtifactPositionWrapper> CmmErrorIsoArtifactPositionList
        {
            get
            {
                if (_cmmErrorIsoArtifactPositionList == null)
                    _cmmErrorIsoArtifactPositionList = new ArtifactPositionList();
                return _cmmErrorIsoArtifactPositionList.ArtifactTypes;
            }
        }

        /// <summary> Gets or sets the position #1 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition1
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(0);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(0, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition1");
            }
        }

        /// <summary> Gets or sets the position #2 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition2
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(1);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(1, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition2");
            }
        }

        /// <summary> Gets or sets the position #3 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition3
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(2);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(2, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition3");
            }
        }

        /// <summary> Gets or sets the position #4 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition4
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(3);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(3, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition4");
            }
        }

        /// <summary> Gets or sets the position #5 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition5
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(4);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(4, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition5");
            }
        }

        /// <summary> Gets or sets the position #6 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition6
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(5);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(5, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition6");
            }
        }

        /// <summary> Gets or sets the position #7 of the artifact for the ISO 10360 CMM performance test. </summary>
        public ArtifactPositionWrapper SelectedArtifactPosition7
        {
            get
            {
                CmmErrorIso10360.ArtifactPosition pos = Cmm.Iso10360Results.ArtifactPositionValue(6);
                return GetArtifactPositionWrapperFromArtifactPosition(pos);
            }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.ArtifactPositionValue(6, value.ArtifactPosition);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("SelectedArtifactPosition7");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 1. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking1
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(0); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(0, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking1");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 2. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking2
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(1); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(1, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking2");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 3. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking3
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(2); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(2, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking3");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 4. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking4
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(3); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(3, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking4");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 5. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking5
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(4); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(4, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking5");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 6. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking6
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(5); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(5, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking6");
            }
        }

        /// <summary> Gets or sets the gage block stacking order for the artifact position # 7. </summary>
        public CmmErrorIso10360.GageBlockStacking CmmErrorIsoGageBlockStacking7
        {
            get { return Cmm.Iso10360Results.GageBlockStackingValue(6); }
            set
            {
                CmmErrorIso10360 test = Cmm.Iso10360Results;
                test.GageBlockStackingValue(6, value);
                Cmm.Iso10360Results = test;
                OnPropertyChanged("CmmErrorIsoGageBlockStacking7");
            }
        }
        #endregion

        #region Properties: Sensor General Values

        /// <summary> Gets the Sensor that is represented by this object.  If this object is not a sensor, then null. </summary>
        public SensorParameters Sensor { get; }

        /// <summary> Gets or sets the type of sensor, i.e., fixed single tip, articulating, multi-tip.... </summary>
        public SensorType SensorType
        {
            get
            {
                return Sensor.Type;
            }
            set
            {
                Sensor.Type = value;

                // If this is not a fixed single tip, then make sure that we have a valid selection
                if (!IsFixedSingleTipSensor)
                {
                    ActiveSensorPerformanceTest = SensorPerformanceTest.Iso10360;
                    SensorTechnology = SensorTechnology.SwitchingProbe;
                }

                OnPropertyChanged("SensorType");
                OnPropertyChanged("IsFixedSingleTipSensor");
                OnPropertyChanged("IsFixedMultiTipSensor");
                OnPropertyChanged("IsArticulatedSingleTipSensor");

                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestIso10360Visible");
                if (Sensor.Type == SensorType.SingleTipFixed)
                {
                    OnPropertyChanged("FstIso_0");
                    OnPropertyChanged("FstIso_1");
                    OnPropertyChanged("SingleTipStylusLength0");
                }

                OnPropertyChanged("IsFixedMultiTipSensorPerformanceTestIso10360Visible");
                if (Sensor.Type == SensorType.MultiTipFixed)
                {
                    OnPropertyChanged("MtIso_0");
                    OnPropertyChanged("MtIso_1");
                    OnPropertyChanged("MtIso_2");
                    OnPropertyChanged("MtIso_3");
                    OnPropertyChanged("MtIso_4");
                    OnPropertyChanged("MtIso_5");
                    OnPropertyChanged("MtIso_6");
                    OnPropertyChanged("MtIso_7");
                    OnPropertyChanged("MtIso_8");
                    OnPropertyChanged("MtIso_9");
                    OnPropertyChanged("MtIso_10");
                    OnPropertyChanged("MtIso_11");
                    OnPropertyChanged("MtIso_12");
                    OnPropertyChanged("MtIso_13");
                    OnPropertyChanged("MtIso_14");
                    OnPropertyChanged("MtIso_15");
                    OnPropertyChanged("MtIso_16");
                    OnPropertyChanged("MtIso_17");
                    OnPropertyChanged("MtIso_18");
                    OnPropertyChanged("MtIso_19");
                    OnPropertyChanged("MtIso_20");
                    OnPropertyChanged("MultiTipStylusLength0");
                    OnPropertyChanged("MultiTipStylusLength1Through4");
                }

                OnPropertyChanged("IsSingleTipArticulatedSensorPerformanceTestIso10360Visible");
                if (Sensor.Type == SensorType.SingleTipArticulated)
                {
                    OnPropertyChanged("StaIso_0");
                    OnPropertyChanged("StaIso_1");
                    OnPropertyChanged("StaIso_2");
                    OnPropertyChanged("StaIso_3");
                    OnPropertyChanged("StaIso_4");
                    OnPropertyChanged("StaIso_5");
                    OnPropertyChanged("StaIso_6");
                    OnPropertyChanged("StaIso_7");
                    OnPropertyChanged("StaIso_8");
                    OnPropertyChanged("StaIso_9");
                    OnPropertyChanged("StaIso_10");
                    OnPropertyChanged("StaIso_11");
                    OnPropertyChanged("SingleTipStylusLength0");
                }

                OnPropertyChanged("SensorOrientationHeader");
                OnPropertyChanged("SensorOrientationImage");
                OnPropertyChanged("SensorOrientationText");
            }
        }

        /// <summary> Gets or sets the trigger technology of the sensor. </summary>
        public SensorTechnology SensorTechnology
        {
            get
            {
                return Sensor.Technology;
            }
            set
            {
                Sensor.Technology = value;

                // If we are changing to a non-piezo probe, then make sure we don't have specified standard deviation selected.
                if (Sensor.Technology != SensorTechnology.PiezoelectricProbe && ActiveSensorPerformanceTest == SensorPerformanceTest.SpecifiedStandardDeviation)
                    ActiveSensorPerformanceTest = SensorPerformanceTest.Iso10360;

                OnPropertyChanged("SensorTechnology");
                OnPropertyChanged("IsPiezoelectricProbe");
            }
        }

        /// <summary> Determines if this is a fixed single tip probe. </summary>
        public bool IsFixedSingleTipSensor
        {
            get
            {
                // Only fixed single tip probes can be piezo right now.
                return (Sensor.Type == SensorType.SingleTipFixed);
            }
        }

        /// <summary> Determines if this is a fixed multi tip probe. </summary>
        public bool IsFixedMultiTipSensor
        {
            get
            {
                // Only fixed single tip probes can be piezo right now.
                return (Sensor.Type == SensorType.MultiTipFixed);
            }
        }

        /// <summary> Determines if this is a articulated single tip probe. </summary>
        public bool IsArticulatedSingleTipSensor
        {
            get
            {
                // Only fixed single tip probes can be piezo right now.
                return (Sensor.Type == SensorType.SingleTipArticulated);
            }
        }

        /// <summary> Determines if this is a piezoelectric probe. </summary>
        public bool IsPiezoelectricProbe
        {
            get { return Sensor.Technology == SensorTechnology.PiezoelectricProbe; }
        }

        /// <summary> Gets or sets a value indicating whether this is a "perfect" sensor or not. </summary>
        public bool IsPerfectSensor
        {
            get { return Sensor.ActivePerformanceTest == SensorPerformanceTest.None; }
            set
            {
                if (value == true)
                {
                    Sensor.ActivePerformanceTest = SensorPerformanceTest.None;
                }
                else
                {
                    // See if we have any performance test data.  If so, set it to that.  If not, then 
                    // just set it to ISO 10360.
                    if (Sensor.PerformanceTestIso10360 != null)
                        Sensor.ActivePerformanceTest = SensorPerformanceTest.Iso10360;
                    else if (Sensor.PerformanceTestB89 != null)
                        Sensor.ActivePerformanceTest = SensorPerformanceTest.B89;
                    else if (Sensor.PerformanceTestVdiVde != null)
                        Sensor.ActivePerformanceTest = SensorPerformanceTest.VdiVde;
                    else if (Sensor.PerformanceTestSpecifiedStandardDeviation != null)
                        Sensor.ActivePerformanceTest = SensorPerformanceTest.SpecifiedStandardDeviation;
                    else
                        Sensor.ActivePerformanceTest = SensorPerformanceTest.Iso10360;
                }
                OnPropertyChanged("ActiveSensorPerformanceTest");
                OnPropertyChanged("IsPerfectSensor");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestIso10360Visible");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestB89Visible");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestVdiVdeVisible");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestSpecifiedStandardDeviationVisible");
            }
        }
        #endregion

        #region Properties: Sensor Performance Test Values

        /// <summary> The performance test that will be used to characterize this sensor. </summary>
        public SensorPerformanceTest ActiveSensorPerformanceTest
        {
            get
            {
                return Sensor.ActivePerformanceTest;
            }
            set
            {
                Sensor.ActivePerformanceTest = value;
                OnPropertyChanged("ActiveSensorPerformanceTest");
                OnPropertyChanged("IsPerfectSensor");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestIso10360Visible");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestB89Visible");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestVdiVdeVisible");
                OnPropertyChanged("IsFixedSingleTipSensorPerformanceTestSpecifiedStandardDeviationVisible");
            }
        }

        /// <summary> Determines if the ISO10360 editor for a single tip probe should be visible. </summary>
        public bool IsFixedSingleTipSensorPerformanceTestIso10360Visible => IsFixedSingleTipSensor && ActiveSensorPerformanceTest == SensorPerformanceTest.Iso10360;

        /// <summary> Gets or sets fixed single tip performance test values for iso10360. </summary>
        public double FstIso_0
        {
            get { return GetFstIso(0); }
            set { SetFstIso(0, value); }
        }

        /// <summary> Gets or sets fixed single tip performance test values for iso10360. </summary>
        public double FstIso_1
        {
            get { return GetFstIso(1); }
            set { SetFstIso(1, value); }
        }

        /// <summary> Gets fixed single tip performance test values for iso10360: Function to get the actual values. </summary>
        public double GetFstIso(int index)
        {
            if (SensorType != SensorType.SingleTipFixed || index < 0 || index > 1)
                return 0;
            if (Sensor.PerformanceTestIso10360 == null || Sensor.PerformanceTestIso10360.Count != 2)
                SetFstIso(index, index == 0 ? 0 : 50);
            return Sensor.PerformanceTestIso10360[index];
        }

        /// <summary> Sets fixed single tip performance test values for iso10360: Function to set the actual values, including the OnPropertyChanged(). </summary>
        public void SetFstIso(int index, double value)
        {
            Debug.Assert(SensorType == SensorType.SingleTipFixed && index >= 0 && index < 2);
            List<double> l;
            if (Sensor.PerformanceTestIso10360 == null || Sensor.PerformanceTestIso10360.Count != 2)
                l = new List<double>() { 0, 50 };
            else
                l = new List<double>(Sensor.PerformanceTestIso10360);
            l[index] = value;
            Sensor.PerformanceTestIso10360 = l;
            OnPropertyChanged("FstIso_" + index);
        }

        /// <summary> Determines if the b89 editor for a single tip probe should be visible. </summary>
        public bool IsFixedSingleTipSensorPerformanceTestB89Visible => IsFixedSingleTipSensor && ActiveSensorPerformanceTest == SensorPerformanceTest.B89;

        /// <summary> Gets or sets fixed single tip performance test values for b89. </summary>
        public double FstB89_0
        {
            get { return GetFstB89(0); }
            set { SetFstB89(0, value); }
        }

        /// <summary> Gets or sets fixed single tip performance test values for b89. </summary>
        public double FstB89_1
        {
            get { return GetFstB89(1); }
            set { SetFstB89(1, value); }
        }

        /// <summary> Gets fixed single tip performance test values for b89: Function to get the actual values. </summary>
        public double GetFstB89(int index)
        {
            if (SensorType != SensorType.SingleTipFixed || index < 0 || index > 1)
                return 0;
            if (Sensor.PerformanceTestB89 == null || Sensor.PerformanceTestB89.Count != 2)
                SetFstB89(index, index == 0 ? 0 : 50);
            return Sensor.PerformanceTestB89[index];
        }

        /// <summary> Sets fixed single tip performance test values for b89: Function to set the actual values, including the OnPropertyChanged(). </summary>
        public void SetFstB89(int index, double value)
        {
            Debug.Assert(SensorType == SensorType.SingleTipFixed && index >= 0 && index < 2);
            List<double> l;
            if (Sensor.PerformanceTestB89 == null || Sensor.PerformanceTestB89.Count != 2)
                l = new List<double>() { 0, 50 };
            else
                l = new List<double>(Sensor.PerformanceTestB89);
            l[index] = value;
            Sensor.PerformanceTestB89 = l;
            OnPropertyChanged("FstB89_" + index);
        }

        /// <summary> Determines if the VDI/VDE editor for a single tip probe should be visible. </summary>
        public bool IsFixedSingleTipSensorPerformanceTestVdiVdeVisible => IsFixedSingleTipSensor && ActiveSensorPerformanceTest == SensorPerformanceTest.VdiVde;

        /// <summary> Gets or sets fixed single tip performance test values for VDI/VDE. </summary>
        public double FstVdiVde_0
        {
            get { return GetFstVdiVde(0); }
            set { SetFstVdiVde(0, value); }
        }

        /// <summary> Gets or sets fixed single tip performance test values for VDI/VDE. </summary>
        public double FstVdiVde_1
        {
            get { return GetFstVdiVde(1); }
            set { SetFstVdiVde(1, value); }
        }

        /// <summary> Gets fixed single tip performance test values for VDE/VDI: Function to get the actual values. </summary>
        public double GetFstVdiVde(int index)
        {
            if (SensorType != SensorType.SingleTipFixed || index < 0 || index > 1)
                return 0;
            if (Sensor.PerformanceTestVdiVde == null || Sensor.PerformanceTestVdiVde.Count != 2)
                SetFstVdiVde(index, index == 0 ? 0 : 50);
            return Sensor.PerformanceTestVdiVde[index];
        }

        /// <summary> Sets single tip performance test values for vdi/vde: Function to set the actual values, including the OnPropertyChanged(). </summary>
        public void SetFstVdiVde(int index, double value)
        {
            Debug.Assert(SensorType == SensorType.SingleTipFixed && index >= 0 && index < 2);
            List<double> l;
            if (Sensor.PerformanceTestVdiVde == null || Sensor.PerformanceTestVdiVde.Count != 2)
                l = new List<double>() { 0, 50 };
            else
                l = new List<double>(Sensor.PerformanceTestVdiVde);
            l[index] = value;
            Sensor.PerformanceTestVdiVde = l;
            OnPropertyChanged("FstVdiVde_" + index);
        }

        /// <summary> Determines if the specified standard deviation editor for a single tip probe should be visible. </summary>
        public bool IsFixedSingleTipSensorPerformanceTestSpecifiedStandardDeviationVisible => IsFixedSingleTipSensor && ActiveSensorPerformanceTest == SensorPerformanceTest.SpecifiedStandardDeviation;

        /// <summary> Gets or sets fixed single tip performance test values for specified standard deviation. </summary>
        public double FstStdDev_0
        {
            get { return GetFstStdDev(0); }
            set { SetFstStdDev(0, value); }
        }

        /// <summary> Gets or sets fixed single tip performance test values for specified standard deviation. </summary>
        public double FstStdDev_1
        {
            get { return GetFstStdDev(1); }
            set { SetFstStdDev(1, value); }
        }

        /// <summary> Gets fixed single tip performance test values for specified standard deviation: Function to get the actual values. </summary>
        public double GetFstStdDev(int index)
        {
            if (SensorType != SensorType.SingleTipFixed || index < 0 || index > 1)
                return 0;
            if (Sensor.PerformanceTestSpecifiedStandardDeviation == null || Sensor.PerformanceTestSpecifiedStandardDeviation.Count != 2)
                SetFstStdDev(index, index == 0 ? 0 : 50);
            return Sensor.PerformanceTestSpecifiedStandardDeviation[index];
        }

        /// <summary> Sets fixed single tip performance test values for specified standard deviation: Function to set the actual values, including the OnPropertyChanged()
        /// </summary>
        public void SetFstStdDev(int index, double value)
        {
            Debug.Assert(SensorType == SensorType.SingleTipFixed && index >= 0 && index < 2);
            List<double> l;
            if (Sensor.PerformanceTestSpecifiedStandardDeviation == null || Sensor.PerformanceTestSpecifiedStandardDeviation.Count != 2)
                l = new List<double>() { 0, 50 };
            else
                l = new List<double>(Sensor.PerformanceTestSpecifiedStandardDeviation);
            l[index] = value;
            Sensor.PerformanceTestSpecifiedStandardDeviation = l;
            OnPropertyChanged("FstStdDev_" + index);
        }

        /// <summary> Determines if the ISO 10360 editor for a multi tip probe should be visible. </summary>
        public bool IsFixedMultiTipSensorPerformanceTestIso10360Visible => SensorType == SensorType.MultiTipFixed && ActiveSensorPerformanceTest == SensorPerformanceTest.Iso10360;

        /// <summary> Gets or sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_0
        {
            get { return GetMtIso(0); }
            set { SetMtIso(0, value); }
        }

        /// <summary> Gets or sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_1
        {
            get { return GetMtIso(1); }
            set { SetMtIso(1, value); }
        }

        /// <summary> Gets or sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_2
        {
            get { return GetMtIso(2); }
            set { SetMtIso(2, value); }
        }

        /// <summary> Gets or sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_3
        {
            get { return GetMtIso(3); }
            set { SetMtIso(3, value); }
        }

        /// <summary> Gets or sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_4
        {
            get { return GetMtIso(4); }
            set { SetMtIso(4, value); }
        }

        /// <summary> Gets of sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_5
        {
            get { return GetMtIso(5); }
            set { SetMtIso(5, value); }
        }

        /// <summary> Gets or sets Fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_6
        {
            get { return GetMtIso(6); }
            set { SetMtIso(6, value); }
        }

        /// <summary> Gets or sets fixed multi tip performance test values for ISO 10360. </summary>
        public double MtIso_7
        {
            get { return GetMtIso(7); }
            set { SetMtIso(7, value); }
        }

        /// <summary>
        /// Fixed multi tip performance test values for ISO 10360
        /// </summary>
        public double MtIso_8
        {
            get { return GetMtIso(8); }
            set { SetMtIso(8, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_9
        {
            get { return GetMtIso(9); }
            set { SetMtIso(9, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_10
        {
            get { return GetMtIso(10); }
            set { SetMtIso(10, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_11
        {
            get { return GetMtIso(11); }
            set { SetMtIso(11, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_12
        {
            get { return GetMtIso(12); }
            set { SetMtIso(12, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_13
        {
            get { return GetMtIso(13); }
            set { SetMtIso(13, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_14
        {
            get { return GetMtIso(14); }
            set { SetMtIso(14, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_15
        {
            get { return GetMtIso(15); }
            set { SetMtIso(15, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_16
        {
            get { return GetMtIso(16); }
            set { SetMtIso(16, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_17
        {
            get { return GetMtIso(17); }
            set { SetMtIso(17, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_18
        {
            get { return GetMtIso(18); }
            set { SetMtIso(18, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_19
        {
            get { return GetMtIso(19); }
            set { SetMtIso(19, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360 </summary> 
        public double MtIso_20
        {
            get { return GetMtIso(20); }
            set { SetMtIso(20, value); }
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360: Function to get the actual values </summary> 
        public double GetMtIso(int index)
        {
            if (SensorType != SensorType.MultiTipFixed || index < 0 || index > 20)
                return 0;
            if (Sensor.PerformanceTestIso10360 == null || Sensor.PerformanceTestIso10360.Count != 21)
                SetMtIso(index, 0);
            return Sensor.PerformanceTestIso10360[index];
        }

        /// <summary> Fixed multi tip performance test values for ISO 10360: Function to set the actual values, including the OnPropertyChanged() </summary> 
        public void SetMtIso(int index, double value)
        {
            Debug.Assert(SensorType == SensorType.MultiTipFixed && index >= 0 && index < 21);
            List<double> l;
            bool updateAll = false;
            if (Sensor.PerformanceTestIso10360 == null || Sensor.PerformanceTestIso10360.Count != 21)
            {
                l = new List<double>() { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                updateAll = true;
            }
            else
                l = new List<double>(Sensor.PerformanceTestIso10360);
            l[index] = value;
            Sensor.PerformanceTestIso10360 = l;
            if (!updateAll)
                OnPropertyChanged("MtIso_" + index);
            else
                for (int i = 0; i < 21; i++)
                    OnPropertyChanged("MtIso_" + i);
        }

        /// <summary> Determines if the ISO 10360 editor for a articulated probe should be visible </summary> 
        public bool IsSingleTipArticulatedSensorPerformanceTestIso10360Visible
        {
            get
            {
                if (SensorType == SensorType.SingleTipArticulated)
                {
                    if (ActiveSensorPerformanceTest == SensorPerformanceTest.Iso10360)
                    {
                        return true;
                    }
                }
                return false;
            }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_0
        {
            get { return GetStaIso(0); }
            set { SetStaIso(0, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_1
        {
            get { return GetStaIso(1); }
            set { SetStaIso(1, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_2
        {
            get { return GetStaIso(2); }
            set { SetStaIso(2, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_3
        {
            get { return GetStaIso(3); }
            set { SetStaIso(3, value); }
        }

        /// <summary> Fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_4
        {
            get { return GetStaIso(4); }
            set { SetStaIso(4, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_5
        {
            get { return GetStaIso(5); }
            set { SetStaIso(5, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_6
        {
            get { return GetStaIso(6); }
            set { SetStaIso(6, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_7
        {
            get { return GetStaIso(7); }
            set { SetStaIso(7, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_8
        {
            get { return GetStaIso(8); }
            set { SetStaIso(8, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_9
        {
            get { return GetStaIso(9); }
            set { SetStaIso(9, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_10
        {
            get { return GetStaIso(10); }
            set { SetStaIso(10, value); }
        }

        /// <summary> Gets or sets fixed single tip articulated performance test values for ISO 10360 </summary> 
        public double StaIso_11
        {
            get { return GetStaIso(11); }
            set { SetStaIso(11, value); }
        }

        /// <summary> Gets fixed single tip articulated performance test values for ISO 10360: Function to get the actual values </summary> 
        public double GetStaIso(int index)
        {
            if (SensorType != SensorType.SingleTipArticulated || index < 0 || index > 11)
                return 0;
            if (Sensor.PerformanceTestIso10360 == null || Sensor.PerformanceTestIso10360.Count != 12)
                SetStaIso(index, 0);
            return Sensor.PerformanceTestIso10360[index];
        }

        /// <summary> Sets fixed single tip articulated performance test values for ISO 10360: Function to set the actual values, including the OnPropertyChanged() </summary> 
        public void SetStaIso(int index, double value)
        {
            Debug.Assert(SensorType == SensorType.SingleTipArticulated && index >= 0 && index < 12);
            List<double> l;
            bool updateAll = false;
            if (Sensor.PerformanceTestIso10360 == null || Sensor.PerformanceTestIso10360.Count != 12)
            {
                l = new List<double>() { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                updateAll = true;
            }
            else
                l = new List<double>(Sensor.PerformanceTestIso10360);
            l[index] = value;
            Sensor.PerformanceTestIso10360 = l;
            if (!updateAll)
                OnPropertyChanged("StaIso_" + index);
            else
                for (int i = 0; i < 12; i++)
                    OnPropertyChanged("StaIso_" + i);
        }
        #endregion

        #region Properties: Sensor Mounting Values

        /// <summary> The orientation of the CMM coordinate system. Used for defining how the probe is mounted. </summary> 
        public CoordinateSystemOrientation CmmCoordinateSystemOrientation
        {
            get
            {
                // This code is essentially taken from Pundit 3.  
                int axis, direction;
                GetCmmCsOrientation(out axis, out direction);
                int csIndex = 2 * ((axis + 1) % 3) + (direction > 0 ? 1 : 0);

                // Get the enumeration that represents this cs orientation
                string name = "cs" + (csIndex + 1).ToString();
                CoordinateSystemOrientation orientation = (CoordinateSystemOrientation)Enum.Parse(typeof(CoordinateSystemOrientation), name);
                return orientation;
            }
        }

        /// <summary> Returns the Coordinate system orientation of the current CMM </summary> 
        public ImageSource CmmCoordinateSystemImage => CmmCoordinateSystemOrientation.GetImage();

        /// <summary> The orientation of the sensor.  Only applicable for fixed single tip and articulated single tip.  
        /// For fixed tip, it means the A and B angle orientation.  For the articulated tip, it means the orientation
        /// of the probe tip when A = 90 and B = 0. </summary> 
        public SensorOrientation SensorOrientation
        {
            get
            {
                if (Sensor.Type == SensorType.SingleTipFixed)
                {
                    if (Sensor.AAngle == 0)
                        return SensorOrientation.SensorDown;
                    else
                    {
                        // If here, the A Angle should be 90
                        System.Diagnostics.Debug.Assert(Sensor.AAngle == 90);
                        if (Sensor.BAngle == 0)
                            return SensorOrientation.SensorRight;
                        else if (Sensor.BAngle == 90)
                            return SensorOrientation.SensorOut;
                        else if (Sensor.BAngle == 180)
                            return SensorOrientation.SensorLeft;
                        else if (Sensor.BAngle == 270)
                            return SensorOrientation.SensorIn;
                    }
                }
                else if (Sensor.Type == SensorType.SingleTipArticulated)
                {
                    if (Sensor.BAngleAdjustment == 0)
                        return SensorOrientation.SensorRight;
                    else if (Sensor.BAngleAdjustment == 90)
                        return SensorOrientation.SensorOut;
                    else if (Sensor.BAngleAdjustment == 180)
                        return SensorOrientation.SensorLeft;
                    else if (Sensor.BAngleAdjustment == 270)
                        return SensorOrientation.SensorIn;
                }
                else
                    return SensorOrientation.SensorDown;
                throw new InvalidOperationException();
            }
            set
            {
                if (Sensor.Type == SensorType.SingleTipFixed)
                {
                    if (value == SensorOrientation.SensorDown)
                    {
                        Sensor.AAngle = 0;
                        Sensor.BAngle = 0;
                    }
                    else if (value == SensorOrientation.SensorRight)
                    {
                        Sensor.AAngle = 90;
                        Sensor.BAngle = 0;
                    }
                    else if (value == SensorOrientation.SensorOut)
                    {
                        Sensor.AAngle = 90;
                        Sensor.BAngle = 90;
                    }
                    else if (value == SensorOrientation.SensorLeft)
                    {
                        Sensor.AAngle = 90;
                        Sensor.BAngle = 180;
                    }
                    else if (value == SensorOrientation.SensorIn)
                    {
                        Sensor.AAngle = 90;
                        Sensor.BAngle = 270;
                    }
                }
                else if (Sensor.Type == SensorType.SingleTipArticulated)
                {
                    if (value == SensorOrientation.SensorRight)
                        Sensor.BAngleAdjustment = 0;
                    else if (value == SensorOrientation.SensorOut)
                        Sensor.BAngleAdjustment = 90;
                    else if (value == SensorOrientation.SensorLeft)
                        Sensor.BAngleAdjustment = 180;
                    else if (value == SensorOrientation.SensorIn)
                        Sensor.BAngleAdjustment = 270;
                }
                OnPropertyChanged("SensorOrientation");
                OnPropertyChanged("SensorOrientationHeader");
                OnPropertyChanged("SensorOrientationImage");
                OnPropertyChanged("SensorOrientationText");
            }
        }

        /// <summary> The header for a UI item having to do with sensor mounting orientation </summary> 
        public string SensorOrientationHeader
        {
            get
            {
                if (Sensor.Type == SensorType.SingleTipFixed)
                    return "Stylus tip points in the:";
                if (Sensor.Type == SensorType.MultiTipFixed)
                    return "";
                if (Sensor.Type == SensorType.SingleTipArticulated)
                    return "When A = 90 and B = 0, the stylus tip points in the:";
                throw new InvalidOperationException();
            }
        }

        /// <summary> The image that depicts the orientation of the probe. </summary> 
        public ImageSource SensorOrientationImage
        {
            get
            {
                // if this is a fixed multi-tip, then return that image
                if (Sensor.Type == SensorType.MultiTipFixed)
                {
                    string uri = "pack://application:,,,/MeasurementResourceEditor;component/images/SensorMulti.png";
                    BitmapImage bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.UriSource = new Uri(uri);
                    bitmapImage.EndInit();
                    return bitmapImage;
                }

                // Otherwise, return the image from the enumeration that describes its orientation.
                return SensorOrientation.GetImage();
            }
        }

        /// <summary> The text that indicates the orientation of the probe tip based on the CMM coordinate system and the A and B angles. </summary> 
        public string SensorOrientationText
        {
            get
            {
                if (Sensor.Type == SensorType.SingleTipFixed)
                {
                    string[,] orientation = new string[,] {
                        { "-Z", "+X", "+Y", "-X", "-Y" },
                        { "+Z", "+Y", "+X", "-Y", "-X" },
                        { "-X", "+Y", "+Z", "-Y", "-Z" },
                        { "+X", "+Z", "+Y", "-Z", "-Y" },
                        { "-Y", "+Z", "+X", "-Z", "-X" },
                        { "+Y", "+X", "+Z", "-X", "-Z" } };
                    return orientation[(int)CmmCoordinateSystemOrientation, (int)SensorOrientation];
                }
                else if (Sensor.Type == SensorType.SingleTipArticulated)
                {
                    string[,] orientation = new string[,] {
                        { "", "+X", "+Y", "-X", "-Y"},
                        { "", "+Y", "+X", "-Y", "-X"},
                        { "", "+Y", "+Z", "-Y", "-Z"},
                        { "", "+Z", "+Y", "-Z", "-Y"},
                        { "", "+Z", "+X", "-Z", "-X"},
                        { "", "+X", "+Z", "-X", "-Z"} };
                    return orientation[(int)CmmCoordinateSystemOrientation, (int)SensorOrientation];
                }
                return "";
            }
        }

        /// <summary> The one and only tip length of a single tip probe </summary> 
        public double SingleTipStylusLength0
        {
            get { return Sensor.StylusLengths[0]; }
            set
            {
                Sensor.StylusLengths = new List<double>() { value };
                OnPropertyChanged("SingleTipStylusLength0");
            }
        }

        /// <summary> The extension length of the probe </summary> 
        public double SensorExtensionLength
        {
            get { return Sensor.ExtensionLength; }
            set
            {
                Sensor.ExtensionLength = value;
                OnPropertyChanged("SensorExtensionLength");
            }
        }

        /// <summary> The 1st stylus length of a multi-tip probe </summary> 
        public double MultiTipStylusLength0
        {
            get { return Sensor.StylusLengths[0]; }
            set
            {
                List<double> stylusLengthList;
                if (Sensor.StylusLengths == null || Sensor.StylusLengths.Count != 5)
                {
                    stylusLengthList = new List<double>() { value, 50, 50, 50, 50 };
                    Sensor.StylusLengths = stylusLengthList;
                    OnPropertyChanged("MultiTipStylusLength1Through4");
                }
                else
                {
                    stylusLengthList = new List<double>(Sensor.StylusLengths);
                    stylusLengthList[0] = value;
                    Sensor.StylusLengths = stylusLengthList;
                }
                OnPropertyChanged("MultiTipStylusLength0");
            }
        }

        /// <summary> The 2-5th stylus lengths of a multi-tip probe</summary> 
        public double MultiTipStylusLength1Through4
        {
            get
            {
                if (Sensor.Type != SensorType.MultiTipFixed)
                    return 0;

                if (Sensor.StylusLengths.Count != 5)
                    MultiTipStylusLength0 = Sensor.StylusLengths[0];
                System.Diagnostics.Debug.Assert((Sensor.StylusLengths[1] == Sensor.StylusLengths[2]) &&
                                                (Sensor.StylusLengths[2] == Sensor.StylusLengths[3]) &&
                                                (Sensor.StylusLengths[3] == Sensor.StylusLengths[4]));
                return Sensor.StylusLengths[1];
            }
            set
            {
                double s0value = Sensor.StylusLengths[0];
                Sensor.StylusLengths = new List<double>() { s0value, value, value, value, value };
                OnPropertyChanged("MultiTipStylusLength1Through4");
            }
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Finds the Axis and Direction of the coordinate system for the given CMM.
        /// Used for determining which image to show in the sensor dialog for the coordinate system.
        /// </summary> 
        /// <param name="axis"> Axis </param>
        /// <param name="direction"> Direction </param>
        public void GetCmmCsOrientation(out int axis, out int direction)
        {
            // Get the axis
            if (GetCmmAxisOrientation(0) % 3 == 2)
                axis = 0;
            else if (GetCmmAxisOrientation(1) % 3 == 2)
                axis = 1;
            else
                axis = 2;

            // Get the direction
            if (GetCmmAxisOrientation(axis) < 3)
                direction = -1;
            else
                direction = 1;
        }

        /// <summary> Selects the next sensor orientation. </summary> 
        public void ChangeToNextSensorOrientation()
        {
            SensorOrientation = SensorOrientation.Next(Sensor.Type);
        }

        /// <summary> Selects the previous sensor orientation. </summary> 
        public void ChangeToPreviousSensorOrientation()
        {
            SensorOrientation = SensorOrientation.Previous(Sensor.Type);
        }
        #endregion

        #region ---- private methods ----

        /// <summary> Converts the given CmmErrorIso10360.ArtifactPosition to a reference to the corresponding ArtifactPositionWrapper in our internal list. </summary> 
        /// <param name="position"> Artifact position </param>
        /// <returns> Wrapper </returns>
        private ArtifactPositionWrapper GetArtifactPositionWrapperFromArtifactPosition(CmmErrorIso10360.ArtifactPosition position)
        {
            return _cmmErrorIsoArtifactPositionList.ArtifactTypes.FirstOrDefault(w => w.ArtifactPosition == position);
        }

        /// <summary>
        /// This method will make a change to the CMM Axis Orientation, and make sure that between the 3 values,
        /// there is always a right handed coordinate system.
        /// The code is ported directly from Pundit 3.
        /// </summary> 
        /// <param name="changedByUser"> Index of axis orientation (from 0 to 2) </param>
        private void SetAllCmmAxisOrientations(int changedByUser)
        {
            // Determine which axis should be adjusted to make it right handed.
            int dontChange = (changedByUser == _cmmAxisOrientationModified1) ? _cmmAxisOrientationModified2 : _cmmAxisOrientationModified1;

            if ((GetCmmAxisOrientation(changedByUser) % 3) == (GetCmmAxisOrientation(dontChange) % 3))
                dontChange = 3 - (changedByUser + dontChange);

            int change = 3 - (changedByUser + dontChange);

            // let GetCmmAxisOrientation[change] = not equal to GetCmmAxisOrientation[changed_by_user] or GetCmmAxisOrientation[dont_change]
            SetCmmAxisOrientation(change, 3 - ((GetCmmAxisOrientation(changedByUser) % 3) + (GetCmmAxisOrientation(dontChange) % 3)));

            // Now make it the correct sign for it to be right handed
            bool flip =
                ((3 + GetCmmAxisOrientation(changedByUser) - GetCmmAxisOrientation(dontChange)) % 3 != 1) ^
                ((3 + changedByUser - dontChange) % 3 != 1) ^
                (GetCmmAxisOrientation(dontChange) > 2) ^
                (GetCmmAxisOrientation(changedByUser) > 2);
            if (flip)
                SetCmmAxisOrientation(change, GetCmmAxisOrientation(change) + 3);

            // remember which item the user last modified so that we know which one not to change next time.
            if (changedByUser != _cmmAxisOrientationModified1)
            {
                _cmmAxisOrientationModified2 = _cmmAxisOrientationModified1;
                _cmmAxisOrientationModified1 = changedByUser;
            }

            // Update the UI
            OnPropertyChanged("SelectedCmmAxisOrientationX");
            OnPropertyChanged("SelectedCmmAxisOrientationY");
            OnPropertyChanged("SelectedCmmAxisOrientationZ");
        }

        /// <summary> Gets the Axis orientation index selected for the given axis-index (X=0, Y=1, Z=2). </summary> 
        /// <param name="index"> X=0, Y=1, Z=2 </param>
        /// <returns> Axis orientation index </returns>
        private int GetCmmAxisOrientation(int index)
        {
            if (index == 0)
                return SelectedCmmAxisOrientationX;
            else if (index == 1)
                return SelectedCmmAxisOrientationY;
            else if (index == 2)
                return SelectedCmmAxisOrientationZ;

            throw new ArgumentException();
        }

        /// <summary> Sets the CmmAxisOrientation for the given axis-index (X=0, Y=1, Z=2). Does NOT update the UI. </summary> 
        /// <param name="index"> X=0, Y=1, Z=2 </param>
        /// <param name="value"> Value to set </param>
        private void SetCmmAxisOrientation(int index, int value)
        {
            if (index == 0)
                Cmm.AxisOrientationX = (CmmAxisOrientation)value;
            else if (index == 1)
                Cmm.AxisOrientationY = (CmmAxisOrientation)value;
            else if (index == 2)
                Cmm.AxisOrientationZ = (CmmAxisOrientation)value;
            else
                throw new ArgumentException();
        }
        #endregion

        #region ---- private fields ----
        /// <summary> Artifact position list </summary>
        private ArtifactPositionList _cmmErrorIsoArtifactPositionList;
        // index of previously modified axis orientations
        private int _cmmAxisOrientationModified1;
        // index of previously modified axis orientations
        private int _cmmAxisOrientationModified2;
        #endregion
    }
}
