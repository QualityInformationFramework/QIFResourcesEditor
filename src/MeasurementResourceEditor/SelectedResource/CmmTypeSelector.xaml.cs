///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Controls.Primitives;
using Qif;

namespace MeasurementResourceEditor
{
    /// <summary> Interaction logic for CmmTypeSelector.xaml. </summary>
    public partial class CmmTypeSelector : Window
    {
        /// <summary> Constructs a new CmmTypeSelector dialog. </summary>
        /// <param name="owner"> Owner window </param>
        /// <param name="currentCmmType"> Current type </param>
        public CmmTypeSelector(Window owner, CmmType currentCmmType)
        {
            Owner = owner;
            InitializeComponent();

            // Set the CMM type for the corresponding button
            SelectedCmmType = currentCmmType;
            switch (SelectedCmmType)
            {
                case CmmType.MovingBridge:
                    MovingBridge.IsChecked = true;
                    break;
                case CmmType.FixedBridge:
                    FixedBridge.IsChecked = true;
                    break;
                case CmmType.Column:
                    Column.IsChecked = true;
                    break;
                case CmmType.FixedTableCantilever:
                    FixedTableCantilever.IsChecked = true;
                    break;
                case CmmType.MovingRamHorizontalArm:
                    MovingRamHorizontalArm.IsChecked = true;
                    break;
                case CmmType.MovingTableHorizontalArm:
                    MovingTableHorizontalArm.IsChecked = true;
                    break;
                case CmmType.Gantry:
                    Gantry.IsChecked = true;
                    break;
                case CmmType.LShapedBridge:
                    LShapedBridge.IsChecked = true;
                    break;
                case CmmType.FixedTableHorizontalArm:
                    FixedTableHorizontalArm.IsChecked = true;
                    break;
                case CmmType.MovingTableCantileverArm:
                    MovingTableCantileverArm.IsChecked = true;
                    break;
            }
        }

        /// <summary> Gets the selected CMM Type. </summary>
        public CmmType SelectedCmmType { get; private set; }

        /// <summary> Handler for when any of the CMM toggle buttons are clicked. </summary>
        /// <param name="sender"> Sender </param>
        /// <param name="e"> Event arguments </param>
        private void ToggleButton_Click(object sender, RoutedEventArgs e)
        {
            ToggleButton button = sender as ToggleButton;
            SelectedCmmType = (CmmType)Enum.Parse(typeof(CmmType), button.Name);
            Close();
        }

        /// <summary> Handles a key being pressed.  When escape is pressed, we want to close the window. </summary>
        /// <param name="sender"> Sender </param>
        /// <param name="e"> Event arguments </param>
        private void Window_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Escape)
                Close();
        }
    }
}
