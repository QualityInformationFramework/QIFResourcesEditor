///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;

namespace MeasurementResourceEditor
{
    /// <summary> Interaction logic for TreeView.xaml </summary>
    public partial class TreeView : UserControl
    {
        /// <summary> Selection changed event </summary>
        public event EventHandler<TreeNode> SelectionChanged;

        /// <summary> Default constructor. </summary>
        public TreeView()
        {
            InitializeComponent();
        }

        /// <summary> The document currently being rendered by this tree view. </summary>
        public MrdDocument Document
        {
            get { return DataContext as MrdDocument; }
            set
            {
                if (!(value is MrdDocument))
                {
                    throw new InvalidOperationException();
                }
                DataContext = value;
            }
        }

        /// <summary> Gets the currently selected MrdTreeViewNode. </summary>
        public TreeNode SelectedNode
        {
            get { return _treeView.SelectedItem as TreeNode; }
        }

        /// <summary> Manually refreshes the tree because of changes made to the model. </summary>
        public void RefreshTreeNodes()
        {
            _treeView.Items.Refresh();
        }

        /// <summary> Event handler for when a tree view item is selected </summary>
        /// <param name="sender"> Sender </param>
        /// <param name="e"> Event arguments </param>
        private void TreeViewItem_Selected(object sender, RoutedEventArgs e)
        {
            // Raise the SelectionChanged event
            SelectionChanged?.Invoke(this, SelectedNode);
            e.Handled = true;
        }

        /// <summary> Handles the event of the button being pressed </summary>
        /// <param name="sender"> Sender </param>
        /// <param name="e"> Event arguments </param>
        private void TreeViewItem_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == Key.Delete && SelectedNode != null)
                RoutedCommands.DeleteMeasurementResource.Execute(null, null);
        }
    }
}
