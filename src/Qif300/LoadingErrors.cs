// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Qif300
{
    /// <summary> Container for loading/saving errors and warnings. </summary>
    class LoadingErrors
    {
        /// <summary> Gets array of errors </summary>
        public IReadOnlyList<string> Errors => mErrors;

        /// <summary> Gets array of error details </summary>
        public IReadOnlyList<string> ErrorDetails => mErrorDetails;

        /// <summary> Gets array of warnings </summary>
        public IReadOnlyList<string> Warnings => mWarnings;

        /// <summary> Gets array of warning details </summary>
        public IReadOnlyList<string> WarningDetails => mWarningDetails;

        /// <summary> Clears the container </summary>
        public void Clear()
        {
            mErrors.Clear();
            mErrorDetails.Clear();
            mWarnings.Clear();
            mWarningDetails.Clear();
        }

        /// <summary> Adds an error </summary>
        /// <param name="error"> Error </param>
        /// <param name="details"> Error details </param>
        public void AddError(string error, string details)
        {
            mErrors.Add(error);
            mErrorDetails.Add(details);
        }

        /// <summary> Adds error related to the specified CMM </summary>
        /// <param name="cmm"> CMM </param>
        /// <param name="details"> Error details </param>
        public void AddError(Qif.CmmParameters cmm, string details)
        {
            mErrors.Add($"Error saving CMM {cmm.Name}");
            mErrorDetails.Add(details);
        }

        /// <summary> Adds error related to the specified CMM </summary>
        /// <param name="cmm"> CMM </param>
        /// <param name="details"> Error details </param>
        public void AddError(qif30.CartesianCMMType cmm, string details)
        {
            mErrors.Add($"Error loading CMM: {cmm.Name} (id = {cmm.id})");
            mErrorDetails.Add(details);
        }

        /// <summary> Adds error related to the specified sensor </summary>
        /// <param name="cmm"> Sensor </param>
        /// <param name="details"> Error details </param>
        public void AddError(qif30.DetachableSensorBaseType sensor, string details)
        {
            mErrors.Add($"Error loading sensor: {sensor.Name} (id = {sensor.id})");
            mErrorDetails.Add(details);
        }

        /// <summary> Adds a warning </summary>
        /// <param name="warning"> Warning </param>
        /// <param name="details"> Warning details </param>
        public void AddWarning(string warning, string details)
        {
            mWarnings.Add(warning);
            mWarningDetails.Add(details);
        }

        /// <summary> Adds warning related to the specified CMM </summary>
        /// <param name="cmm"> CMM </param>
        /// <param name="details"> Warning details </param>
        public void AddWarning(qif30.CartesianCMMType cmm, string details)
        {
            mWarnings.Add($"Warning loading CMM: {cmm.Name} (id = {cmm.id})");
            mWarningDetails.Add(details);
        }

        /// <summary> Array of errors </summary>
        private readonly List<string> mErrors = new List<string>();
        /// <summary> Array of error details </summary>
        private readonly List<string> mErrorDetails = new List<string>();
        /// <summary> Array of warnings </summary>
        private readonly List<string> mWarnings = new List<string>();
        /// <summary> Array of warning details </summary>
        private readonly List<string> mWarningDetails = new List<string>();
    }
}
