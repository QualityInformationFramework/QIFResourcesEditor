// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Qif300.Units
{
    /// <summary>
    /// Gives converts to MRE units
    /// To millimeters for length units
    /// To Celsius for temperature units
    /// To kPa for pressure units
    /// </summary>
    static class UnitConverters
    {
        /// <summary> Creates a temperature unit converter from the units with the specified name. </summary>
        /// <param name="name"> Source unit name </param>
        /// <returns> Converter </returns>
        public static SingleConverter CreateTemperature(string name)
        {
            if (name == "celsius")
                return new IdenticalUnitConverter(name);
            else if (name == "kelvin")
                return new UnitConverter(name, 0, -273.15M);

            return null;
        }

        /// <summary> Creates a pressure unit converter from the units with the specified name. </summary>
        /// <param name="name"> Source unit name </param>
        /// <returns> Converter </returns>
        public static SingleConverter CreatePressure(string name)
        {
            if (name == "pa")
                return new UnitConverter(name, 1.0M / 1000, 0);
            else if (name == "kpa")
                return new IdenticalUnitConverter(name);
            return null;
        }

        /// <summary> Creates a length unit converter from the units with the specified name. </summary>
        /// <param name="name"> Source unit name </param>
        /// <returns> Converter </returns>
        public static SingleConverter CreateLength(string name)
        {
            switch (name)
            {
                case "inch":
                    return new UnitConverter(name, 25.4M, 0);
                case "mm":
                    return new IdenticalUnitConverter(name);
                case "ft":
                    return new UnitConverter(name, 304.8M, 0);
                case "mi":
                    return new UnitConverter(name, 1609344M, 0);
                case "m":
                    return new UnitConverter(name, 1000M, 0);
                case "km":
                    return new UnitConverter(name, 1000000M, 0);
                case "mil":
                    return new UnitConverter(name, 0.0254M, 0);
                case "um":
                    return new UnitConverter(name, 0.001M, 0);
                case "cm":
                    return new UnitConverter(name, 10M, 0);
                case "uin":
                    return new UnitConverter(name, 1M / 39370M, 0);
            }
            return null;
        }
    }
}
