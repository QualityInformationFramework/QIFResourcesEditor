// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Qif300.Units
{
    /// <summary>
    /// Represents multi-converter using QIF rules for units:
    /// First, Primary Units are applied if source unit is not specified
    /// Otherwise, Other Units are used for conversion
    /// </summary>
    class FileUnitConverter : IMultiConverter
    {
        /// <summary> Gets or sets primary converter. Used for values with default (no specified) unit. </summary>
        public SingleConverter PrimaryConverter { get; set; }

        /// <summary> Gets or sets other converters. Used for converting values in units which are different from default ones. </summary>
        public IList<SingleConverter> OtherConverters { get; } = new List<SingleConverter>();

        /// <summary> Converts a value in source unit into destination units. </summary>
        /// <param name="unit"> Source unit name </param>
        /// <param name="value"> Value to convert </param>
        /// <returns> Converted value </returns>
        public double? Convert(string unit, decimal value)
        {
            if (string.IsNullOrEmpty(unit) || unit == PrimaryConverter.Name)
                return PrimaryConverter.Convert(value);

            var converter = OtherConverters.FirstOrDefault(c => c.Name == unit);
            if (converter != null)
                return converter.Convert(value);

            return null;
        }
    }
}
