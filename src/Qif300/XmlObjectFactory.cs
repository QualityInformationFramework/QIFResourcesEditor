// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace Qif300
{
    /// <summary> Factory of QIF XML objects. </summary>
    class XmlObjectFactory
    {
        /// <summary> Constructor </summary>
        /// <param name="xmlDocument"> XML document </param>
        public XmlObjectFactory(XmlDocument xmlDocument)
        {
            XmlDocument = xmlDocument;
        }

        /// <summary> Gets XML document </summary>
        private XmlDocument XmlDocument { get; }

        /// <summary> Identifier generator </summary>
        private IdGenerator IdGenerator { get; } = new IdGenerator();

        /// <summary> Creates Cartesian CMM object. </summary>
        /// <returns> Cartesian CMM object </returns>
        public qif30.CartesianCMMType CreateCartesianCmm()
        {
            return new qif30.CartesianCMMType()
            {
                Attributes = new qif30.AttributesType(),
                id = IdGenerator.Get()
            };
        }

        /// <summary> Creates XML element </summary>
        /// <param name="name"> Element name </param>
        /// <param name="innerText"> Inner text of the element </param>
        /// <returns> XML element </returns>
        public XmlElement CreateXmlElement(string name, string innerText)
        {
            var element = XmlDocument.CreateElement(name);
            element.InnerText = innerText;
            return element;
        }

        /// <summary> Creates a complex tactile probe sensor. </summary>
        /// <returns> Created sensor </returns>
        public qif30.ComplexTactileProbeSensorType CreateComplexTactileProbeSensor()
        {
            return new qif30.ComplexTactileProbeSensorType()
            {
                Attributes = new qif30.AttributesType(),
                id = IdGenerator.Get()
            };
        }

        /// <summary> Creates simple tactile probe sensor. </summary>
        /// <returns> Created sensor </returns>
        public qif30.SimpleTactileProbeSensorType CreateSimpleTactileProbeSensor()
        {
            return new qif30.SimpleTactileProbeSensorType()
            {
                Attributes = new qif30.AttributesType(),
                id = IdGenerator.Get()
            };
        }
    }
}
