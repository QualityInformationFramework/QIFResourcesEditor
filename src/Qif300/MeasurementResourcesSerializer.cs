// Copyright(c) Capvidia, 2020
// https://www.capvidia.com
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software
// and accompanying documentation covered by this license(the "Software") to use, reproduce, display, distribute, execute,
// and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software
// is furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and all derivative works of the Software,
// unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;

namespace Qif300
{
    /// <summary> Manages serialization/deserialization to QIF structures. </summary>
    public class MeasurementResourcesSerializer
    {
        public string Qpid { get; set; }

        public qif30.FileUnitsType FileUnits { get; set; }

        /// <summary> Gets or sets QIF measurement resources object </summary>
        public qif30.MeasurementResourcesType MeasurementResources { get; set; }

        /// <summary> Deserializes measurement resources from the specified QIF file </summary>
        /// <param name="path"> The path to the QIF file </param>
        public void Deserialize(string path)
        {
            // load XML
            var doc = new XmlDocument();
            doc.Load(path);

            // create namespace manager
            var namespaceManager = new XmlNamespaceManager(doc.NameTable);
            namespaceManager.AddNamespace("t", NamespaceUri);

            // deserialize QPID
            var qpid = doc.SelectSingleNode("t:QIFDocument/t:QPId", namespaceManager);
            if (qpid != null)
                Qpid = qpid.InnerText;

            // deserialize measurement resources
            var mr = doc.SelectSingleNode("t:QIFDocument/t:MeasurementResources", namespaceManager);
            if (mr != null)
            {
                var xmlReader = new XmlNodeReader(mr);
                MeasurementResources = MrSerializer.Deserialize(xmlReader) as qif30.MeasurementResourcesType;
            }

            // deserialize file units
            var fu = doc.SelectSingleNode("t:QIFDocument/t:FileUnits", namespaceManager);
            if (fu != null)
            {
                var xmlReaderUnits = new XmlNodeReader(fu);
                FileUnits = UnitSerillizer.Deserialize(xmlReaderUnits) as qif30.FileUnitsType;
            }
        }

        /// <summary> Serializes measurement resources to the specified QIF file </summary>
        /// <param name="path"> The path to the QIF file </param>
        public void Serialize(string path)
        {
            // create XML document and namespace manager
            var doc = new XmlDocument();
            var namespaceManager = new XmlNamespaceManager(doc.NameTable);
            namespaceManager.AddNamespace("t", NamespaceUri);

            // create root QIDDocument
            var root = doc.CreateElement("QIFDocument", NamespaceUri);
            root.SetAttribute("versionQIF", "3.0.0");
            root.SetAttribute("idMax", Utilities.FindMaximumId(MeasurementResources).ToString());
            doc.AppendChild(root);

            // add QPId
            var qpid = doc.CreateElement("QPId", NamespaceUri);
            qpid.InnerText = !string.IsNullOrEmpty(Qpid) ? Qpid : Guid.NewGuid().ToString();
            root.AppendChild(qpid);

            // add File Units
            using (var xw = doc.DocumentElement.CreateNavigator().AppendChild())
            {
                xw.WriteWhitespace(string.Empty);
                UnitSerillizer.Serialize(xw, FileUnits);
            }

            // add Measurement Resources
            using (var xw = doc.DocumentElement.CreateNavigator().AppendChild())
            {
                xw.WriteWhitespace(string.Empty);
                MrSerializer.Serialize(xw, MeasurementResources);
            }

            doc.Save(path);
        }

        /// <summary> QIF namespace  </summary>
        private const string NamespaceUri = "http://qifstandards.org/xsd/qif3";

        /// <summary> XML serializer for measurement resources </summary>
        private XmlSerializer MrSerializer { get; } = new XmlSerializer(typeof(qif30.MeasurementResourcesType));

        /// <summary> XML serializer for units </summary>
        private XmlSerializer UnitSerillizer { get; } = new XmlSerializer(typeof(qif30.FileUnitsType));
    }
}
