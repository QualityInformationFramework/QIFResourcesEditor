///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Qif300
{
    /// <summary> Provides functionality for loading sensor from the corresponding QIF structure. </summary>
    class SensorLoader
    {
        /// <summary> Constructor </summary>
        /// <param name="sensor"> QIF sensor object </param>
        /// <param name="errors"> Error container for putting errors during loading </param>
        public SensorLoader(qif30.DetachableSensorBaseType sensor, LoadingErrors errors)
        {
            Sensor = sensor;
            Errors = errors;
        }

        /// <summary> Gets error container </summary>
        private LoadingErrors Errors { get; }

        /// <summary> Gets QIF sensor object </summary>
        private qif30.DetachableSensorBaseType Sensor { get; }

        /// <summary> Loads the name of the sensor </summary>
        /// <returns> The name of the sensor </returns>
        public string LoadName()
        {
            return Sensor.Name;
        }

        /// <summary> Loads the type of the sensor </summary>
        /// <returns> The type of the sensor or null if the were loading errors </returns>
        public Qif.SensorType? LoadType()
        {
            if (Sensor is qif30.SimpleTactileProbeSensorType)
                return Qif.SensorType.SingleTipFixed;

            if (!(Sensor is qif30.ComplexTactileProbeSensorType))
            {
                Errors.AddError(Sensor, "Unsupported sensor type");
                return null;
            }

            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeStrType>("Type");
            if (attr == null)
            {
                Errors.AddError(Sensor, "Sensor does not have 'Type' attribute");
                return null;
            }

            try
            {
                return Utilities.SensorTypeUdaStrMap.ToEnum(attr.value);
            }
            catch
            {
                Errors.AddError(Sensor, "Unsupported sensor type");
            }

            return null;
        }

        /// <summary> Loads technology </summary>
        /// <returns> Technology or null of there were loading errors </returns>
        public Qif.SensorTechnology? LoadTechnology()
        {
            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeStrType>("Technology");
            if (attr != null)
            {
                try
                {
                    return Utilities.SensorTechnologyStrMap.ToEnum(attr.value);
                }
                catch
                {
                    Errors.AddError(Sensor, "Incorrect technology value");
                    return null;
                }
            }

            Errors.AddError(Sensor, "Sensor technology has no value");
            return null;
        }


        /// <summary> Loads the type of the active performance test </summary>
        /// <returns> The type of the active performance test or null of there were loading errors </returns>
        public Qif.SensorPerformanceTest? LoadActivePerformanceTest()
        {
            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeStrType>("ActivePerformanceTest");
            if (attr != null)
            {
                try
                {
                    return Utilities.SensorPerfomanceTestStrMap.ToEnum(attr.value);
                }
                catch
                {
                    Errors.AddError(Sensor, "Incorrect value of active performance test");
                    return null;
                }
            }

            Errors.AddError(Sensor, "Active performance test has no value");
            return null;
        }

        /// <summary> Loads ISO performance test </summary>
        /// <returns> ISO performance test of null if there were loading errors </returns>
        public double[] LoadPerfomanceTestIso()
        {
            var testValues = Sensor.Attributes.FindAttributeD1Array("PerformanceTestIso10360", "PerformanceTestIso10360");
            if (testValues != null)
            {
                var type = LoadType();
                if (!type.HasValue)
                {
                    Errors.AddError(Sensor, "ISO Performance has been ignored because sensor type was not read");
                    return null;
                }

                if (type == Qif.SensorType.SingleTipFixed && testValues.Length == 2
                    || type == Qif.SensorType.SingleTipArticulated && testValues.Length == 12
                    || type == Qif.SensorType.MultiTipFixed && testValues.Length == 21)
                    return testValues;
            }
            return null;
        }


        /// <summary> Loads ASME B89 performance test </summary>
        /// <returns> ASME B89 performance test if there were loading errors </returns>
        public double[] LoadPerfomanceTestB89()
        {
            var testValues = Sensor.Attributes.FindAttributeD1Array("PerformanceTestB89", "PerformanceTestB89");
            if (testValues != null && testValues.Length == 2)
                return testValues;
            return null;
        }

        /// <summary> Loads VDI/VDE performance test </summary>
        /// <returns> VDI/VDE performance test if there were loading errors </returns>
        public double[] LoadPerfomanceTestVdiVde()
        {
            var testValues = Sensor.Attributes.FindAttributeD1Array("PerfomanceTestVdiVde", "PerfomanceTestVdiVde");
            if (testValues != null && testValues.Length == 2)
                return testValues;
            return null;
        }

        /// <summary> Loads standard deviation performance test </summary>
        /// <returns> Standard deviation performance test if there were loading errors </returns>
        public double[] LoadPerfomanceStandardDeviation()
        {
            var testValues = Sensor.Attributes.FindAttributeD1Array( "PerfomanceStandardDeviation", "PerfomanceStandardDeviation");
            if (testValues != null && testValues.Length == 2)
                return testValues;
            return null;
        }

        /// <summary> Loads stylus lengths </summary>
        /// <returns> Stylus lengths or null if there were loading errors </returns>
        public double[] LoadStylusLengths()
        {
            var testValues = Sensor.Attributes.FindAttributeD1Array("StylusLengths", "StylusLengths");
            if (testValues != null)
            {
                var type = LoadType();
                if (!type.HasValue)
                {
                    Errors.AddError(Sensor, "StylusLengths have been ignored because sensor type was not read");
                    return null;
                }

                int n = type == Qif.SensorType.MultiTipFixed ? 5 : 1;
                if (testValues.Length >= n)
                    return testValues;
            }

            Errors.AddError(Sensor, "Error loading stylus lengths");
            return null;
        }

        /// <summary> Loads extension length </summary>
        /// <returns> Extension length or null if there were loading errors </returns>
        public double? LoadExtensionLength()
        {
            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeD1Type>("ExtensionLength");
            if (attr != null)
                return attr.value;

            return null;
        }

        /// <summary> Loads A angle </summary>
        /// <returns> A angle or null if there were loading errors </returns>
        public double? LoadAAngle()
        {
            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeD1Type>("AAngle");
            if (attr != null)
                return attr.value;

            Errors.AddError(Sensor, "AAngle has no value");
            return null;
        }

        /// <summary> Loads B Angle </summary>
        /// <returns> B angle or null if there were loading errors </returns>
        public double? LoadBAngle()
        {
            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeD1Type>("BAngle");
            if (attr != null)
                return attr.value;

            Errors.AddError(Sensor, "BAngle has no value");
            return null;
        }

        /// <summary>
        /// Loads B angle adjustment
        /// Makes sense only for type == SingleTipArticulated
        /// </summary>
        /// <returns> B angle adjustment or null if there were loading errors </returns>
        public double? LoadBAngleAdjustment()
        {
            var attr = Sensor.Attributes.FindAttribute<qif30.AttributeD1Type>("BAngleAdjustment");
            if (attr != null)
                return attr.value;

            Errors.AddError(Sensor, "BAngle has no value");
            return null;
        }

        /// <summary> Loads description </summary>
        /// <returns> Description </returns>
        public string LoadDescription()
        {
            return Sensor.Description;
        }
    }
}
