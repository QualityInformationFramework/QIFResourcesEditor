///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once

namespace qifbase
{
/// <summary> Represents a type of sensor. </summary>
enum SensorType
{
    /// <summary> Fixed orientation single tip. </summary>
    SingleTipFixed = 0,

    /// <summary> Fixed orientation multi tip. </summary>
    MultiTipFixed,

    /// <summary> Articulated single tip. </summary>
    SingleTipArticulated
};

/// <summary> Methods for working with type of sensor. </summary>
class SensorTypeMethods
{
public:
    /// <summary> Gets a string representation of the given sensor type. </summary>
    /// <param name="type"> Sensor type </param>
    /// <returns> Name </returns>
    static std::wstring Name(SensorType type)
    {
        switch(type)
        {
        case SensorType::SingleTipFixed:
            return L"Fixed single tip";
        case SensorType::SingleTipArticulated:
            return L"Articulated single tip";
        case SensorType::MultiTipFixed:
            return L"Multi-tip";
        }
        throw std::invalid_argument("Unknown type in SensorType::Name()");
    }
};
}
