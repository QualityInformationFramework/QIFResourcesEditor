///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#include "stdafx.h"
#include "CmmErrorIso10360.h"
#include <algorithm>

namespace qifbase
{
/// <summary> Constructor. </summary>
CmmErrorIso10360::CmmErrorIso10360()
{
    _artifactPositions.fill(ArtifactPosition::Unknown);
    _gageBlockStacking.fill(GageBlockStacking::Left);
}

/// <summary> Copy constructor. </summary>
/// <param name="copy"> Object to copy </param>
CmmErrorIso10360::CmmErrorIso10360(const CmmErrorIso10360& copy) :
    _artifactType(copy._artifactType),
    _errorOfIndicationType(copy._errorOfIndicationType),
    _errorOfIndication1(copy._errorOfIndication1),
    _errorOfIndication2(copy._errorOfIndication2),
    _errorOfIndication3(copy._errorOfIndication3),
    _artifactPositions(copy._artifactPositions),
    _gageBlockStacking(copy._gageBlockStacking)
{
}

/// <summary> Equality operator. </summary>
/// <param name="other"> Object to compare </param>
/// <returns> True if objects are equal, otherwise false </returns>
bool CmmErrorIso10360::operator==(const CmmErrorIso10360& other) const
{
    if(_artifactType != other._artifactType)
        return false;
    if(_errorOfIndicationType != other._errorOfIndicationType)
        return false;
    if(_errorOfIndication1 != other._errorOfIndication1)
        return false;
    if(_errorOfIndication2 != other._errorOfIndication2)
        return false;
    if(_errorOfIndication3 != other._errorOfIndication3)
        return false;
    if(_artifactPositions != other._artifactPositions)
        return false;
    if(_gageBlockStacking != other._gageBlockStacking)
        return false;

    return true;
}

/// <summary> Gets the Artifact Position at the given index. </summary>
/// <param name="index"> Index </param>
/// <returns> Artifact position </returns>
CmmErrorIso10360::ArtifactPosition CmmErrorIso10360::ArtifactPositionValue(int index) const
{
    return _artifactPositions[index];
}

/// <summary> Sets the Artifact Position at the given index </summary>
/// <param name="index"> Index </param>
/// <param name="position"> Artifact Position </param>
void CmmErrorIso10360::ArtifactPositionValue(int index, ArtifactPosition position)
{
    _artifactPositions[index] = position;
}

/// <summary> Gets the Gage Block Stacking at the given index </summary>
/// <param name="index"> Index </param>
/// <returns> Gage Block Stacking </returns>
CmmErrorIso10360::GageBlockStacking CmmErrorIso10360::GageBlockStackingValue(int index) const
{
    return _gageBlockStacking[index];
}

/// <summary> Sets the Gage Block Stacking at the given index </summary>
/// <param name="index"> Index </param>
/// <param name="stacking"> Gage Block Stacking </param>
void CmmErrorIso10360::GageBlockStackingValue(int index, GageBlockStacking stacking)
{
    _gageBlockStacking[index] = stacking;
}
}
