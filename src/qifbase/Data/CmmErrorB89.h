///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once
#include "../decl_qifbase.h"

namespace qifbase
{

/// <summary> Represents ASME B89 performance test. </summary>
class QIFBASE_EXPORT CmmErrorB89
{
public:

    /// <summary> Constructor. </summary>
    CmmErrorB89() = default;

    /// <summary> Copy constructor. </summary>
    CmmErrorB89(const CmmErrorB89& other) = default;

    /// <summary> Constructor. </summary>
    /// <param name="xLinearAccuracy"> Accuracy along the X axis </param>
    /// <param name="yLinearAccuracy"> Accuracy along the Y axis </param>
    /// <param name="zLinearAccuracy"> Accuracy along the Z axis </param>
    /// <param name="volumetricPerformance"> Volumetric performance </param>
    /// <param name="offsetVolumetricPerformance"> Offset volumetric performance </param>
    /// <param name="repeatability"> Repeatability </param>
    CmmErrorB89(double xLinearAccuracy, double yLinearAccuracy, double zLinearAccuracy, double volumetricPerformance, double offsetVolumetricPerformance, double repeatability) :
        _xLinearAccuracy(xLinearAccuracy),
        _yLinearAccuracy(yLinearAccuracy),
        _zLinearAccuracy(zLinearAccuracy),
        _volumetricPerformance(volumetricPerformance),
        _offsetVolumetricPerformance(offsetVolumetricPerformance),
        _repeatability(repeatability)
    {
    }

public:

    /// <summary> Queries accuracy along the X axis </summary>
    double XLinearAccuracy() const { return _xLinearAccuracy; }

    /// <summary> Sets accuracy along the X axis </summary>
    void XLinearAccuracy(double value) { _xLinearAccuracy = value; }

    /// <summary> Queries accuracy along the Y axis </summary>
    double YLinearAccuracy() const { return _yLinearAccuracy; }

    /// <summary> Sets accuracy along the Y axis </summary>
    void YLinearAccuracy(double value) { _yLinearAccuracy = value; }

    /// <summary> Queries accuracy along the Z axis </summary>
    double ZLinearAccuracy() const { return _zLinearAccuracy; }

    /// <summary> Sets accuracy along the Z axis </summary>
    void ZLinearAccuracy(double value) { _zLinearAccuracy = value; }

    /// <summary> Queries volumetric performance </summary>
    double VolumetricPerformance() const { return _volumetricPerformance; }

    /// <summary> Sets volumetric performance </summary>
    void VolumetricPerformance(double value) { _volumetricPerformance = value; }

    /// <summary> Queries offset volumetric performance </summary>
    double OffsetVolumetricPerformance() const { return _offsetVolumetricPerformance; }

    /// <summary> Sets offset volumetric performance </summary>
    void OffsetVolumetricPerformance(double value) { _offsetVolumetricPerformance = value; }

    /// <summary> Queries repeatability value </summary>
    double Repeatability() const { return _repeatability; }

    /// <summary> Sets repeatability value </summary>
    void Repeatability(double value) { _repeatability = value; }

    bool operator==(const CmmErrorB89& other) const;

private:
    // Accuracy along the X axis 
    double _xLinearAccuracy{0};
    // Accuracy along the Y axis
    double _yLinearAccuracy{0};
    // Accuracy along the Z axis
    double _zLinearAccuracy{0};
    // Volumetric performance
    double _volumetricPerformance{0};
    // Offset volumetric performance
    double _offsetVolumetricPerformance{0};
    // Repeatability
    double _repeatability{0};
};
}
