///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once
#include "../decl_qifbase.h"
#include "SensorType.h"
#include "SensorTechnology.h"
#include "SensorPerformanceTest.h"
#include "Units.h"

namespace qifbase
{
/// <summary> Represents a sensor. </summary>
class QIFBASE_EXPORT SensorParameters
{
public:
    // Default Constructor
    SensorParameters();

    // Copy Constructor
    SensorParameters(const SensorParameters& copy);

    // Name
    std::wstring Name() const { return _name; }
    void Name(std::wstring value) { _name = value; }

    // Type
    SensorType Type() const { return _type; }
    void Type(SensorType value) { _type = value; }

    // Technology
    SensorTechnology Technology() const { return _technology; }
    void Technology(SensorTechnology value) { _technology = value; }

    // Active Performance Test
    SensorPerformanceTest ActivePerformanceTest() const { return _activePerformanceTest; }
    void ActivePerformanceTest(SensorPerformanceTest value) { _activePerformanceTest = value; }

    // ISO 10360 Performance Test
    const std::vector<double>& PerformanceTestIso10360() const { return _perfTestIso10360; }
    void PerformanceTestIso10360(const std::vector<double>& value) { _perfTestIso10360 = value; }

    // ASME B89 Performance Test
    const std::vector<double>& PerformanceTestB89() const { return _perfTestB89; }
    void PerformanceTestB89(const std::vector<double>& value) { _perfTestB89 = value; }

    // VDI/VDE Performance Test
    const std::vector<double>& PerformanceTestVdiVde() const { return _perfTestVdiVde; }
    void PerformanceTestVdiVde(const std::vector<double>& value) { _perfTestVdiVde = value; }

    // Specified Standard Deviation Performance Test
    const std::vector<double>& PerformanceTestSpecifiedStandardDeviation() const { return _perfTestSpecifiedStdDev; }
    void PerformanceTestSpecifiedStandardDeviation(const std::vector<double>& value) { _perfTestSpecifiedStdDev = value; }

    // Stylus Lengths
    const std::vector<double>& StylusLengths() const { return _stylusLengths; }
    void StylusLengths(const std::vector<double>& value) { _stylusLengths = value; }

    // Extension Length
    double ExtensionLength() const { return _extensionLength; }
    void ExtensionLength(double value) { _extensionLength = value; }

    // A Angle
    double AAngle() const { return _aAngle; }
    void AAngle(double value) { _aAngle = value; }

    // B Angle
    double BAngle() const { return _bAngle; }
    void BAngle(double value) { _bAngle = value; }

    // B Angle Adjustment
    double BAngleAdjustment() const { return _bAngleAdjustment; }
    void BAngleAdjustment(double value) { _bAngleAdjustment = value; }

    // Gets the description for this probe in the given units.
    std::wstring GetDescription(Units units) const;

    // Equals override
    bool operator==(const SensorParameters& other) const;
    bool operator!=(const SensorParameters& other) const { return !operator==(other); }

private:
    // Gets the description string for the ISO 10360 test
    std::wstring GetIso10360PerformanceTestDescription(Units units) const;

private:
    // Name
    std::wstring _name;
    // Type of the sensor
    SensorType _type;
    // Trigger technology
    SensorTechnology _technology;
    // Active performance test
    SensorPerformanceTest _activePerformanceTest;
    // ISO 10360 performance test
    std::vector<double> _perfTestIso10360;
    // ASME B89 performance test
    std::vector<double> _perfTestB89;
    // VDI/VDE performance test
    std::vector<double> _perfTestVdiVde;
    // Specified standard deviation
    std::vector<double> _perfTestSpecifiedStdDev;
    // Stylus lengths
    std::vector<double> _stylusLengths;
    // Extension length
    double _extensionLength;
    // The A and B angle.  Only used for single tip fixed and multi-tip fixed.
    double _aAngle;
    double _bAngle;
    // The B angle adjustment.  Only used for the articulating head model. Our probe model
    // assumes a certain fixed B angle when A=90, so this is used to adjust everything the user
    // enters for each point to fit our model.
    double _bAngleAdjustment;
};
}
