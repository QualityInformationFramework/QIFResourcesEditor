///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

#pragma once
#include <string>
#include <stdexcept>

namespace qifbase
{
/// <summary> Represents the type of CMM. </summary>
enum CmmType
{
    /// <summary> Moving bridge. </summary>
    MovingBridge = 0,

    /// <summary> Fixed bridge. </summary>
    FixedBridge,

    /// <summary> Column. </summary>
    Column,

    /// <summary> Fixed table cantilever. </summary>
    FixedTableCantilever,

    /// <summary> Moving ram horizontal arm. </summary>
    MovingRamHorizontalArm,

    /// <summary> Moving table horizontal arm. </summary>
    MovingTableHorizontalArm,

    /// <summary> Gantry. </summary>
    Gantry,

    /// <summary> L-Shaped bridge. </summary>
    LShapedBridge,

    /// <summary> Fixed table horizontal arm. </summary>
    FixedTableHorizontalArm,

    /// <summary> Moving table cantilever arm. </summary>
    MovingTableCantileverArm
};

/// <summary> Methods for working with CMM type. </summary>
class CmmTypeMethods
{
public:
    /// <summary> Gets a string representation of the given type </summary>
    /// <param name="type"> CMM type </param>
    /// <returns> String </returns>
    static std::wstring Name(CmmType type)
    {
        switch(type)
        {
        case CmmType::MovingBridge:
            return L"Moving Bridge";
        case CmmType::FixedBridge:
            return L"Fixed Bridge";
        case CmmType::Column:
            return L"Column";
        case CmmType::FixedTableCantilever:
            return L"Fixed Table Cantilever";
        case CmmType::MovingRamHorizontalArm:
            return L"Moving Ram Horizontal Arm";
        case CmmType::MovingTableHorizontalArm:
            return L"Moving Table Horizontal Arm";
        case CmmType::Gantry:
            return L"Gantry";
        case CmmType::LShapedBridge:
            return L"L-Shaped Bridge";
        case CmmType::FixedTableHorizontalArm:
            return L"Fixed Table Horizontal Arm";
        case CmmType::MovingTableCantileverArm:
            return L"Moving Table Cantilever Arm";
        }
        throw std::invalid_argument("Unknown type in CmmType::Name()");
    }
};
}
