///////////////////////////////////////////////////////////////////////////////
///
/// Copyright 2018-2020, Capvidia, Metrosage, and project contributors
/// https://www.capvidia.com/
/// 
/// This software is provided for free use to the QIF Community under the 
/// following license:
/// 
/// Boost Software License - Version 1.0 - August 17th, 2003
/// https://www.boost.org/LICENSE_1_0.txt
/// 
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// 
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MRETest
{
    /// <summary> Base class for test classes. </summary>
    public class BaseTest
    {
        /// <summary> Gets the full path to the TestFiles directory in this build. </summary>
        protected string TestFilePath => @"..\..\MRETest\TestFiles";

        /// <summary> Generates resulting file name by input file name. </summary>
        /// <param name="input"> Input file name </param>
        /// <returns> Resulting file name </returns>
        protected string GenerateResultFileName(string input)
        {
            var dir = Path.GetDirectoryName(input);
            var name = Path.GetFileNameWithoutExtension(input);
            var ext = Path.GetExtension(input);

            return Path.Combine(dir, $"{name}.~.result{ext}");
        }

        /// <summary> Generates etalon file name by input file name. </summary>
        /// <param name="input"> Input file name </param>
        /// <returns> Etalon file name </returns>
        protected string GenerateEtalonFileName(string input)
        {
            var dir = Path.GetDirectoryName(input);
            var name = Path.GetFileNameWithoutExtension(input);
            var ext = Path.GetExtension(input);

            return Path.Combine(dir, $"{name}.exam{ext}");
        }

        /// <summary>
        /// Examines resulting file by comparing it with the etalon file.
        /// Creates etalon file if it does not exist
        /// </summary>
        /// <param name="result"> Resulting file </param>
        /// <param name="exam"> Etalon file </param>
        /// <returns> True of resulting and etalon file are equal </returns>
        protected bool ExamineFile(string result, string exam)
        {
            if (!File.Exists(result))
                throw new Exception("Resulting file is not found");

            if (!File.Exists(exam))
            {
                File.Copy(result, exam);
                return true;
            }

            return AreFilesEqual(exam, result);
        }

        /// <summary> Compares the two given files and returns true if they are equal. </summary>
        /// <param name="f1"> The first file </param>
        /// <param name="f2"> The second file </param>
        /// <returns> True if files are equal, otherwise false </returns>
        protected bool AreFilesEqual(string f1, string f2)
        {
            string s1 = File.ReadAllText(f1);
            string s2 = File.ReadAllText(f2);
            return string.Equals(s1, s2);
        }
    }
}
